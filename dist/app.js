!function(){"use strict";const e={accessibilityContainer:document.querySelector("#accessibility-container"),animationSwitch:document.querySelector("#animation-switch"),githubLogo:document.querySelector("#lower-nav img"),themeSwitch:document.querySelector("#theme-switch")},t=()=>{localStorage.setItem("theme",document.documentElement.getAttribute("theme")),localStorage.setItem("animations-enabled",e.animationSwitch.getAttribute("aria-checked"))},n=((()=>{const n=e=>{"light"===document.documentElement.getAttribute("theme")?a():o(),t()},a=()=>{e.themeSwitch.setAttribute("aria-checked","false"),document.documentElement.setAttribute("theme","dark"),e.themeSwitch.style.backgroundPosition="center bottom -0.8rem",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-Light-32px.png")},o=()=>{e.themeSwitch.setAttribute("aria-checked","true"),document.documentElement.setAttribute("theme","light"),e.themeSwitch.style.backgroundPosition="center top 2px",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-32px.png")};e.themeSwitch.addEventListener("click",n),e.themeSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"light"===localStorage.getItem("theme")?o():a()}))})(),(()=>{const n=()=>{"true"===e.animationSwitch.getAttribute("aria-checked")?o():a(),t()},a=()=>{e.animationSwitch.setAttribute("aria-checked","true"),document.documentElement.style.scrollBehavior="smooth",e.accessibilityContainer.style.transition="top 0.75s ease-in-out",e.animationSwitch.textContent="Animations Enabled",e.themeSwitch.style.transition="background-position 0.3s ease-in",document.querySelector("#main-nav").style.transition="left 0.5s",Array.from(document.querySelectorAll(".label-arrow")).forEach((e=>{e.style.transition="transform 0.75s"}))},o=()=>{e.animationSwitch.setAttribute("aria-checked","false"),document.documentElement.style.scrollBehavior="auto",e.animationSwitch.setAttribute("aria-checked","false"),e.animationSwitch.textContent="Animations Disabled",Array.from(document.querySelectorAll(".animated")).forEach((e=>{e.style.transition="none"}))};return e.animationSwitch.addEventListener("click",n),e.animationSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"false"===localStorage.getItem("animations-enabled")?o():a()})),{animationsEnabled:a,animationsDisabled:o}})()),a={addGroupBtn:document.querySelector(".add-group-btn"),defaultGroups:["Important","Next 7 Days","Later","Eventually"],groupButtons:document.getElementsByClassName("group-btn"),groupOptionBtn:document.querySelector(".group-option-btn"),modalBox:document.querySelector(".modal-box"),modalContainer:document.querySelector(".modal-container"),taskHeader:document.querySelector(".selected-group")},o=(()=>{const e=()=>{for(;a.modalBox.firstChild;)a.modalBox.removeChild(a.modalBox.firstChild);a.modalContainer.style.display="none",a.modalBox.dataset.indexRef="",a.modalBox.dataset.groupRef=""};return window.addEventListener("keydown",(t=>{"Escape"===t.key&&e()})),{createCloseBtn:()=>{const e=document.createElement("button");e.setAttribute("type","button"),e.setAttribute("aria-label","Close modal"),e.classList.add("modal-close-button","close-btn","focusable"),e.addEventListener("click",o.onClose),a.modalBox.appendChild(e)},onClose:e,onOpen:()=>{a.modalContainer.style.display="flex",document.querySelector(".modal-close-button").focus()}}})(),r=((()=>{const e=e=>{e.target.classList.contains("disable-button")?n.animationsDisabled():e.target.classList.contains("enable-button")&&n.animationsEnabled(),t(),o.onClose()};window.addEventListener("load",(()=>{0===localStorage.length&&(()=>{const t=document.createElement("h1");t.textContent="This site uses minimal animation effects.";const n=document.createElement("p");n.textContent="Effects include moving menus and smooth scrolling. If you suffer from a vestibular disorder or otherwise prefer no animations, you can turn them off by clicking the first button below.";const o=document.createElement("p");o.textContent="You can later change this setting in the Display & Accessibility tab at the top of the page.";const r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("disable-button","focusable","primary-btn"),r.textContent="DISABLE ANIMATIONS",r.addEventListener("click",e);const i=document.createElement("button");i.setAttribute("type","button"),i.classList.add("enable-button","focusable","secondary-btn"),i.textContent="ENABLE ANIMATIONS",i.addEventListener("click",e),a.modalBox.appendChild(t),a.modalBox.appendChild(n),a.modalBox.appendChild(o),a.modalBox.appendChild(r),a.modalBox.appendChild(i),a.modalContainer.style.display="flex"})()}))})(),(()=>{const e=e=>{const t=document.createElement("form"),n=document.createElement("fieldset"),r=document.createElement("legend"),i=document.createElement("div"),s=document.createElement("input"),l=document.createElement("label");l.setAttribute("for","name-input"),l.textContent="Group Name";const u=document.createElement("input");if(u.setAttribute("type","text"),u.setAttribute("required","true"),u.setAttribute("id","name-input"),u.setAttribute("autocomplete","off"),u.classList.add("focusable"),e.target.classList.contains("add-group-btn"))r.textContent="Add a Group",s.setAttribute("type","submit"),s.setAttribute("value","ADD GROUP"),s.classList.add("submit-group-btn","primary-btn","focusable","submit"),i.appendChild(s);else if(e.target.classList.contains("group-option-btn")){r.textContent="Group Options",s.setAttribute("type","submit"),s.setAttribute("value","UPDATE"),s.classList.add("update-group-btn","secondary-btn","focusable","submit");const e=document.createElement("button");e.setAttribute("type","button"),e.classList.add("delete-group-btn","delete-btn","focusable"),e.textContent="DELETE GROUP";const t=document.createElement("button");t.setAttribute("type","button"),t.classList.add("delete-completed-btn","delete-btn","focusable"),t.textContent="DELETE COMPLETED TASKS",a.defaultGroups.indexOf(a.taskHeader.textContent)>=0&&(l.style.opacity="0.38",u.setAttribute("disabled","true"),u.style.opacity="0.38",s.setAttribute("disabled","true"),s.style.opacity="0.38",e.setAttribute("disabled","true"),e.style.opacity="0.38"),i.appendChild(s),i.appendChild(e),i.appendChild(t)}n.appendChild(r),n.appendChild(l),n.appendChild(u),n.appendChild(i),t.appendChild(n),o.createCloseBtn(),a.modalBox.appendChild(t)};a.groupOptionBtn.addEventListener("click",(t=>{e(t),o.onOpen()})),a.addGroupBtn.addEventListener("click",(t=>{e(t),o.onOpen()}))})(),(()=>{const e=["Normal","Important"];return{render:(t,n)=>{const r=document.createElement("form"),i=document.createElement("fieldset"),s=document.createElement("legend"),l=document.createElement("div"),u=document.createElement("label");u.setAttribute("for","name-input"),u.textContent="Task Name (required)";const d=document.createElement("input");d.setAttribute("type","text"),d.setAttribute("id","name-input"),d.setAttribute("placeholder","Enter a task name"),d.setAttribute("required","true"),d.setAttribute("autocomplete","off"),d.className="focusable";const c=document.createElement("label");c.setAttribute("for","group-select"),c.textContent="Group";const m=document.createElement("select");m.setAttribute("id","group-select"),m.className="focusable";for(let e=0;e<n.length;e++){const t=document.createElement("option");t.setAttribute("value",n[e]),t.textContent=n[e],m.appendChild(t)}const p=document.createElement("label");p.setAttribute("for","priority-select"),p.textContent="Priority";const h=document.createElement("select");h.setAttribute("id","priority-select"),h.className="focusable";for(let t=0;t<e.length;t++){const n=document.createElement("option");n.setAttribute("value",e[t]),n.textContent=e[t],h.appendChild(n)}const b=document.createElement("label");b.setAttribute("for","date-select"),b.textContent="Due Date (optional)";const f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("id","date-select"),f.className="focusable";const g=document.createElement("label");g.setAttribute("for","notes-input"),g.textContent="Additional Notes";const y=document.createElement("textarea");if(y.setAttribute("id","notes-input"),y.setAttribute("placeholder","Enter any additional notes for the task"),y.className="focusable",t.target.textContent.includes("ADD TASK")){s.textContent="Add a Task";const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","ADD ONE"),e.setAttribute("aria-label","Add task and close modal"),e.classList.add("add-single-btn","primary-btn","submit","focusable");const t=document.createElement("input");t.setAttribute("type","submit"),t.setAttribute("value","ADD MANY"),t.setAttribute("aria-label","Add task and keep modal open"),t.classList.add("add-many-btn","secondary-btn","submit","focusable"),l.appendChild(e),l.appendChild(t)}else if("EDIT"===t.target.textContent){s.textContent="Edit Task";const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","UPDATE"),e.setAttribute("aria-label","Update task and close modal"),e.classList.add("update-task-btn","primary-btn","focusable"),m.setAttribute("disabled","true"),c.style.opacity="0.38",m.style.opacity="0.38",l.appendChild(e)}i.appendChild(s),i.appendChild(u),i.appendChild(d),i.appendChild(c),i.appendChild(document.createElement("br")),i.appendChild(m),i.appendChild(document.createElement("br")),i.appendChild(p),i.appendChild(document.createElement("br")),i.appendChild(h),i.appendChild(document.createElement("br")),i.appendChild(b),i.appendChild(document.createElement("br")),i.appendChild(f),i.appendChild(document.createElement("br")),i.appendChild(g),i.appendChild(y),i.appendChild(l),r.appendChild(i),o.createCloseBtn(),a.modalBox.appendChild(r)}}})());var i=6e4;function s(e){return e.getTime()%i}function l(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var a=n>0?(i+s(t))%i:s(t);return n*i+a}function u(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function d(e){u(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function c(e,t){u(2,arguments);var n=d(e),a=d(t),o=n.getTime()-a.getTime();return o<0?-1:o>0?1:o}function m(e,t){u(2,arguments);var n=d(e),a=d(t);return n.getTime()-a.getTime()}function p(e,t){u(2,arguments);var n=m(e,t)/1e3;return n>0?Math.floor(n):Math.ceil(n)}function h(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})t.hasOwnProperty(n)&&(e[n]=t[n]);return e}({},e)}var b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function f(e){return function(t){var n=t||{},a=n.width?String(n.width):e.defaultWidth;return e.formats[a]||e.formats[e.defaultWidth]}}var g={date:f({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:f({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:f({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function v(e){return function(t,n){var a,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var s=e.defaultWidth,l=o.width?String(o.width):e.defaultWidth;a=e.values[l]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function k(e){return function(t,n){var a=String(t),o=n||{},r=o.width,i=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],s=a.match(i);if(!s)return null;var l,u=s[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth];return l="[object Array]"===Object.prototype.toString.call(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(u))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(u))return n}(d),l=e.valueCallback?e.valueCallback(l):l,{value:l=o.valueCallback?o.valueCallback(l):l,rest:a.slice(u.length)}}}var C,E={code:"en-US",formatDistance:function(e,t,n){var a;return n=n||{},a="string"==typeof b[e]?b[e]:1===t?b[e].one:b[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:g,formatRelative:function(e,t,n,a){return y[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:v({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:v({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:v({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:v({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:v({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(C={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),a=t||{},o=n.match(C.matchPattern);if(!o)return null;var r=o[0],i=n.match(C.parsePattern);if(!i)return null;var s=C.valueCallback?C.valueCallback(i[0]):i[0];return{value:s=a.valueCallback?a.valueCallback(s):s,rest:n.slice(r.length)}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}},w=1440,A=43200,L=525600;function S(e,t,n){u(2,arguments);var a=n||{},o=a.locale||E;if(!o.formatDistance)throw new RangeError("locale must contain localize.formatDistance property");var r=c(e,t);if(isNaN(r))throw new RangeError("Invalid time value");var i,s,m=h(a);m.addSuffix=Boolean(a.addSuffix),m.comparison=r,r>0?(i=d(t),s=d(e)):(i=d(e),s=d(t));var b,f=null==a.roundingMethod?"round":String(a.roundingMethod);if("floor"===f)b=Math.floor;else if("ceil"===f)b=Math.ceil;else{if("round"!==f)throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");b=Math.round}var g,y=p(s,i),v=(l(s)-l(i))/1e3,k=b((y-v)/60);if("second"===(g=null==a.unit?k<1?"second":k<60?"minute":k<w?"hour":k<A?"day":k<L?"month":"year":String(a.unit)))return o.formatDistance("xSeconds",y,m);if("minute"===g)return o.formatDistance("xMinutes",k,m);if("hour"===g){var C=b(k/60);return o.formatDistance("xHours",C,m)}if("day"===g){var S=b(k/w);return o.formatDistance("xDays",S,m)}if("month"===g){var x=b(k/A);return o.formatDistance("xMonths",x,m)}if("year"===g){var D=b(k/L);return o.formatDistance("xYears",D,m)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}function x(e){u(1,arguments);var t=d(e);return t.setHours(0,0,0,0),t}var D=864e5;function N(e,t){u(2,arguments);var n=x(e),a=x(t),o=n.getTime()-l(n),r=a.getTime()-l(a);return Math.round((o-r)/D)}const q={customGroups:document.querySelector(".custom-groups-container"),taskHeader:document.querySelector(".selected-group"),tasksList:document.querySelector(".task-container")},M=e=>{(()=>{for(;q.customGroups.firstChild;)q.customGroups.removeChild(q.customGroups.firstChild)})(),Object.keys(e).forEach((e=>{const t=document.createElement("button");t.setAttribute("type","button"),t.setAttribute("aria-label",`Group name: ${e}`),t.classList.add("custom-group","focusable","group-btn"),t.textContent=e,q.customGroups.appendChild(t)}))},T=(()=>{const e=(e,t,n)=>{const a=document.createElement("section");a.setAttribute("data-group",t),a.setAttribute("data-index",n),a.className="task-item";const o=document.createElement("span");if(o.setAttribute("aria-label",`${e.priority} task`),o.className="task-priority","Important"===e.priority){const e=document.createElement("span");e.className="material-icons",e.textContent="priority_high",o.appendChild(e)}const r=document.createElement("span");r.setAttribute("role","checkbox"),r.setAttribute("aria-checked","false"),r.setAttribute("tabindex","0"),r.setAttribute("aria-label",e.taskName),r.classList.add("task-status","focusable"),e.completed&&(r.style.backgroundImage="url(assets/images/icons/done-black-24dp.svg)");const i=document.createElement("span");i.setAttribute("role","button"),i.setAttribute("tabindex","0"),i.setAttribute("aria-label",`Details for ${e.taskName}`),i.classList.add("task-name","focusable"),i.textContent=e.taskName;const s=document.createElement("span");s.setAttribute("aria-label",`Due date for task ${e.taskName}: ${e.dueDate}`),s.className="task-date",s.textContent=(e=>{const t=new Date,n=new Date(e.split("-").join(", "));switch(!0){case""===e:return"No due date";case N(n,t)<0:return"Due date passed";case 0===N(n,t):return"Today";case 1===N(n,t):return"Tomorrow";default:return function(e,t){return u(1,arguments),S(e,Date.now(),t)}(n)}})(e.dueDate);const l=document.createElement("div");l.setAttribute("data-task",e.taskName),l.setAttribute("data-group",t),l.setAttribute("data-index",n),l.className="task-details";const d=document.createElement("p");d.className="task-notes",d.textContent=e.notes;const c=document.createElement("button");c.setAttribute("type","button"),c.setAttribute("aria-label",`Edit task ${e.taskName}`),c.classList.add("edit-btn","focusable"),c.textContent="EDIT";const m=document.createElement("button");m.setAttribute("type","button"),m.setAttribute("aria-label",`Delete task ${e.taskName}`),m.classList.add("delete-btn","focusable"),m.textContent="DELETE",l.appendChild(d),l.appendChild(c),l.appendChild(m),a.appendChild(o),a.appendChild(r),a.appendChild(i),a.appendChild(s),a.appendChild(l),q.tasksList.appendChild(a)};return{loadGroupTasks:(t,n)=>{const a=Object.keys(t);switch((()=>{for(;q.tasksList.firstChild;)q.tasksList.removeChild(q.tasksList.firstChild)})(),n){case document.getElementById("important"):Object.values(t).forEach(((t,n)=>{for(let o=0;o<t.length;o++)"Important"===t[o].priority&&e(t[o],a[n],o)}));break;default:t[n.textContent].forEach(((t,a)=>{e(t,n.textContent,a)}))}if(0===q.tasksList.children.length){const e=document.createElement("h2");e.textContent="No tasks for this group!",q.tasksList.appendChild(e)}},updateHeader:e=>{q.taskHeader.textContent=e.textContent}}})(),B=(()=>{const e=document.getElementsByClassName("group-btn"),t=document.querySelector(".modal-box");return{defaultGroups:["Important","Next 7 Days","Later","Eventually"],groupButtons:e,nav:document.getElementById("main-nav"),modalBox:t,taskHeader:document.querySelector(".selected-group"),taskList:document.querySelector(".task-container")}})(),P=(()=>{const e=document.getElementById("important"),t=JSON.parse(localStorage.getItem("toDo-list"))||{Example:[{taskName:"Do the dishes",completed:!1,priority:"Normal",dueDate:"",notes:"Let the pans soak, put the plates in the dishwasher, wash the mugs by hand.\n\nWash pans after 30 minutes soaking."},{taskName:"Bring Muffin to vet",completed:!1,priority:"Important",dueDate:"2021-03-05",notes:"Pack her favorite toy so she stays calm."}]};return window.addEventListener("load",(n=>{T.loadGroupTasks(t,e),M(t)})),{masterList:t,saveToLocal:()=>{localStorage.setItem("toDo-list",JSON.stringify(list))}}})(),O=(()=>{const e=()=>{Array.from(document.getElementsByClassName("group-btn")).forEach((e=>{e.classList.remove("active")}))},t=e=>{e.classList.add("active")};return B.nav.addEventListener("click",(n=>{n.target.classList.contains("group-btn")&&(e(),t(n.target),T.updateHeader(n.target),T.loadGroupTasks(P.masterList,n.target))})),{checkName:e=>B.defaultGroups.indexOf(e)>=0||Object.keys(P.masterList).indexOf(e)>=0||e.match(/^\s{1,}$/)||""===e,create:e=>{P.masterList[e]=[],console.log(P.masterList)},update:(e,t)=>{delete Object.assign(P.masterList,{[t]:P.masterList[e]})[e],console.log(P.masterList)},remove:e=>{delete P.masterList[e],console.log(P.masterList)},setActive:t,setInactive:e}})(),W=(()=>{const e=e=>{P.masterList[e.dataset.group].splice(e.dataset.index,1),e.remove(),console.log(P.masterList)},t=t=>{switch(!0){case t.target.classList.contains("task-status"):(e=>{const t=e.dataset.group,n=e.dataset.index;null===e.children[1].getAttribute("style")?(P.masterList[t][n].completed=!0,e.children[1].style.backgroundImage="url(assets/images/icons/done-black-24dp.svg)"):(P.masterList[t][n].completed=!1,e.children[1].removeAttribute("style")),console.log(P.masterList)})(t.target.parentElement);break;case t.target.classList.contains("task-name"):t.target.parentElement.children[4].classList.toggle("expanded");break;case t.target.classList.contains("edit-btn"):r.render(t,Object.keys(P.masterList)),(e=>{const t=e.dataset.group,n=e.dataset.index;B.modalBox.dataset.indexRef=n,B.modalBox.dataset.groupRef=t,document.querySelector("#name-input").value=P.masterList[t][n].taskName,document.querySelector("#group-select").value=t,document.querySelector("#priority-select").value=P.masterList[t][n].priority,document.querySelector("#date-select").value=P.masterList[t][n].dueDate,document.querySelector("#notes-input").value=P.masterList[t][n].notes})(t.target.parentElement),o.onOpen();break;case t.target.classList.contains("delete-btn"):confirm(`Please click "OK" to confirm deletion of task \n            "${t.target.parentElement.dataset.task}".`)&&e(t.target.parentElement);break;default:return}};return document.querySelector(".add-task-btn").addEventListener("click",(e=>{0!==Object.keys(P.masterList).length?(r.render(e,Object.keys(P.masterList)),o.onOpen()):alert("No groups exist. Please create a group before adding a task.")})),B.taskList.addEventListener("click",t),B.taskList.addEventListener("keydown",(e=>{" "===e.key&&t(e)})),{checkName:e=>e.match(/^\s{1,}$/)||""===e,confirmMassRemove:()=>B.defaultGroups.indexOf(B.taskHeader.textContent)>=0?confirm('This will delete all completed tasks in every group.\n\nPlease click "OK" to confirm deletion.'):confirm(`This will delete all completed tasks in the ${B.taskHeader.textContent} group.\n\nPlease click "OK" to confirm deletion.`),create:(e,t,n,a,o)=>({taskName:e,priority:t,dueDate:n,notes:a,completed:o}),removeCompleted:e=>{if(B.defaultGroups.indexOf(e)>=0){const e=Object.keys(P.masterList);Object.values(P.masterList).forEach(((t,n)=>{for(let a=t.length-1;a>=0;a--)!0===t[a].completed&&P.masterList[e[n]].splice(a,1)}))}else P.masterList[e].forEach((t=>{for(let n=P.masterList[e].length-1;n>=0;n--)!0===t.completed&&P.masterList[e].splice(n,1)}))},removeSingle:e,update:()=>{const e=B.modalBox.getAttribute("data-group-ref"),t=B.modalBox.getAttribute("data-index-ref");P.masterList[e][t].taskName=document.querySelector("#name-input").value,P.masterList[e][t].priority=document.querySelector("#priority-select").value,P.masterList[e][t].dueDate=document.querySelector("#date-select").value,P.masterList[e][t].notes=document.querySelector("#notes-input").value}}})();B.modalBox.addEventListener("click",(e=>{const t=document.querySelector("#name-input");switch(e.target){case document.querySelector(".submit-group-btn"):case document.querySelector(".update-group-btn"):if(e.preventDefault(),O.checkName(t.value))return void alert("Group name cannot be blank and cannot already be taken.\n\nPlease enter a new name.");e.target.classList.contains("submit-group-btn")?(O.create(t.value),M(P.masterList)):(O.update(B.taskHeader.textContent,t.value),document.querySelector(".active").textContent=t.value,T.updateHeader(document.querySelector(".active"))),o.onClose();break;case document.querySelector(".delete-group-btn"):confirm(`This will delete the ${B.taskHeader.textContent} group, along with any tasks within it.\n\nPlease click "OK" to confirm deletion.`)&&(O.remove(B.taskHeader.textContent),o.onClose(),M(P.masterList));break;case document.querySelector(".delete-completed-btn"):W.confirmMassRemove()&&(W.removeCompleted(B.taskHeader.textContent),o.onClose(),console.log(P.masterList));break;case document.querySelector(".add-single-btn"):case document.querySelector(".add-many-btn"):const n=document.querySelector("#group-select");if(e.preventDefault(),W.checkName(t.value))return void alert("Task name cannot be blank.\n\nPlease enter a new name.");{const a=W.create(t.value,document.querySelector("#priority-select").value,document.querySelector("#date-select").value,document.querySelector("#notes-input").value,!1);P.masterList[n.value].push(a),e.target.classList.contains("add-many-btn")?(t.focus(),t.value="",n.selectedIndex=0,document.querySelector("#priority-select").value="Normal",document.querySelector("#date-select").value="",document.querySelector("#notes-input").value=""):o.onClose(),console.log(P.masterList)}break;case document.querySelector(".update-task-btn"):if(e.preventDefault(),W.checkName(t.value))return void alert("Task name cannot be blank.\n\nPlease enter a new name.");W.update(),o.onClose(),console.log(P.masterList);break;default:return}})),console.log(P.masterList);const j={menuContainer:document.querySelector("#main-nav"),menuOpenButton:document.querySelector(".menu-button"),menuCloseButton:document.querySelector(".menu-close-button")};(()=>{const e=()=>{document.documentElement.scrollWidth>763?(j.menuContainer.style.visibility="visible",j.menuContainer.style.left="0"):(j.menuContainer.style.visibility="hidden",j.menuContainer.style.left="-800px")};window.addEventListener("resize",e),window.addEventListener("load",e);const t=()=>{"hidden"===j.menuContainer.style.visibility?(j.menuContainer.style.visibility="visible",j.menuContainer.style.left="0",j.menuCloseButton.focus()):(j.menuContainer.style.left="-800px",setTimeout((()=>{j.menuContainer.style.visibility="hidden"}),600),j.menuOpenButton.focus())};j.menuOpenButton.addEventListener("click",t),j.menuCloseButton.addEventListener("click",t)})()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2l0ZS1zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kYWxzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb21wYXJlQXNjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluU2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvY2xvbmVPYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Fzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdERpc3RhbmNlU3RyaWN0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZkRheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcmVuZGVyLWNvbnRhaW5lcnMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9sb2dpYy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiRE9NIiwiYWNjZXNzaWJpbGl0eUNvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFuaW1hdGlvblN3aXRjaCIsImdpdGh1YkxvZ28iLCJ0aGVtZVN3aXRjaCIsInNldHRpbmdzIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImRvY3VtZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImFjY2Vzc2liaWxpdHlPcHRpb25zIiwiX3RvZ2dsZVRoZW1lIiwiZSIsIl9kYXJrVGhlbWUiLCJfbGlnaHRUaGVtZSIsInNldEF0dHJpYnV0ZSIsInN0eWxlIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImtleSIsInByZXZlbnREZWZhdWx0Iiwid2luZG93IiwiZ2V0SXRlbSIsIl90b2dnbGVBbmltYXRpb25zIiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwiYW5pbWF0aW9uc0VuYWJsZWQiLCJzY3JvbGxCZWhhdmlvciIsInRyYW5zaXRpb24iLCJ0ZXh0Q29udGVudCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaXRlbSIsImFkZEdyb3VwQnRuIiwiZGVmYXVsdEdyb3VwcyIsImdyb3VwQnV0dG9ucyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJncm91cE9wdGlvbkJ0biIsIm1vZGFsQm94IiwibW9kYWxDb250YWluZXIiLCJ0YXNrSGVhZGVyIiwiZ2VuZXJhbE1vZGFsIiwib25DbG9zZSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImRpc3BsYXkiLCJkYXRhc2V0IiwiaW5kZXhSZWYiLCJncm91cFJlZiIsImNyZWF0ZUNsb3NlQnRuIiwiY2xvc2VCdG4iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJvbk9wZW4iLCJmb2N1cyIsInRhc2tNb2RhbCIsIl9zZWxlY3RPcHRpb24iLCJ0YXJnZXQiLCJjb250YWlucyIsImxlbmd0aCIsImhlYWRpbmciLCJwYXJhMSIsInBhcmEyIiwiZGlzYWJsZUJ1dHRvbiIsImVuYWJsZUJ1dHRvbiIsIl9yZW5kZXIiLCJmb3JtIiwiZmllbGRzZXQiLCJsZWdlbmQiLCJkaXYiLCJtYWluQnRuIiwibmFtZUxhYmVsIiwibmFtZUlucHV0IiwiZGVsZXRlR3JvdXAiLCJkZWxldGVDb21wbGV0ZWQiLCJpbmRleE9mIiwib3BhY2l0eSIsIl9wcmlvcml0eUFycmF5IiwicmVuZGVyIiwiZ3JvdXBMaXN0IiwiY2xhc3NOYW1lIiwiZ3JvdXBMYWJlbCIsImdyb3VwU2VsZWN0IiwiaSIsImdyb3VwT3B0aW9uIiwicHJpb3JpdHlMYWJlbCIsInByaW9yaXR5U2VsZWN0IiwicHJpb3JpdHlPcHRpb24iLCJkYXRlTGFiZWwiLCJkYXRlSW5wdXQiLCJub3Rlc0xhYmVsIiwibm90ZXNJbnB1dCIsImluY2x1ZGVzIiwiYWRkT25lQnRuIiwiYWRkTWFueUJ0biIsImVkaXRCdG4iLCJNSUxMSVNFQ09ORFNfSU5fTUlOVVRFIiwiZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQiLCJkYXRlIiwiZ2V0VGltZSIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJkaXJ0eURhdGUiLCJEYXRlIiwiYmFzZVRpbWV6b25lT2Zmc2V0IiwiTWF0aCIsImNlaWwiLCJnZXRUaW1lem9uZU9mZnNldCIsInNldFNlY29uZHMiLCJtaWxsaXNlY29uZHNQYXJ0T2ZUaW1lem9uZU9mZnNldCIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJndW1lbnRzIiwiYXJnU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiY29uc29sZSIsIndhcm4iLCJFcnJvciIsInN0YWNrIiwiTmFOIiwiY29tcGFyZUFzYyIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0IiwiZGF0ZVJpZ2h0IiwiZGlmZiIsImRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyIsImRpZmZlcmVuY2VJblNlY29uZHMiLCJmbG9vciIsImNsb25lT2JqZWN0IiwiZGlydHlPYmplY3QiLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGlydHlPcHRpb25zIiwib3B0aW9ucyIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImNvbnRleHQiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwiZGlydHlTdHJpbmciLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwidmFsdWUiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJ0ZXN0IiwiZmluZEluZGV4Iiwib2JqZWN0IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwic2xpY2UiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsImNvdW50IiwicmVzdWx0IiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJsb2NhbGl6ZSIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsIl9kaXJ0eU9wdGlvbnMiLCJudW1iZXIiLCJOdW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwibW9udGgiLCJkYXkiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJpbmRleCIsIndlZWtTdGFydHNPbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsIk1JTlVURVNfSU5fREFZIiwiTUlOVVRFU19JTl9NT05USCIsIk1JTlVURVNfSU5fWUVBUiIsImZvcm1hdERpc3RhbmNlU3RyaWN0IiwiZGlydHlCYXNlRGF0ZSIsImxvY2FsZSIsIlJhbmdlRXJyb3IiLCJpc05hTiIsImxvY2FsaXplT3B0aW9ucyIsIkJvb2xlYW4iLCJyb3VuZGluZ01ldGhvZEZuIiwicm91bmRpbmdNZXRob2QiLCJyb3VuZCIsInVuaXQiLCJzZWNvbmRzIiwib2Zmc2V0SW5TZWNvbmRzIiwibWludXRlcyIsImhvdXJzIiwiZGF5cyIsIm1vbnRocyIsInllYXJzIiwic3RhcnRPZkRheSIsInNldEhvdXJzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsImRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyIsInN0YXJ0T2ZEYXlMZWZ0Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsInRpbWVzdGFtcFJpZ2h0IiwiY3VzdG9tR3JvdXBzIiwidGFza3NMaXN0IiwiZ3JvdXBDb250YWluZXIiLCJsaXN0IiwiX2NsZWFyIiwia2V5cyIsImdyb3VwIiwiYnV0dG9uIiwidGFza0NvbnRhaW5lciIsInRhc2siLCJ0YXNrSXRlbSIsInByaW9yaXR5Qm94IiwicHJpb3JpdHkiLCJpY29uIiwic3RhdHVzQm94IiwidGFza05hbWUiLCJjb21wbGV0ZWQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJuYW1lRmllbGQiLCJkYXRlRmllbGQiLCJkdWVEYXRlIiwibm93IiwibmV3RGF0ZSIsInNwbGl0Iiwiam9pbiIsImZvcm1hdERpc3RhbmNlVG9Ob3dTdHJpY3QiLCJfZm9ybWF0dGVkRGF0ZSIsImRldGFpbHMiLCJub3Rlc0ZpZWxkIiwibm90ZXMiLCJkZWxldGVCdG4iLCJsb2FkR3JvdXBUYXNrcyIsImtleUFycmF5IiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGlsZHJlbiIsImgyIiwidXBkYXRlSGVhZGVyIiwibmF2IiwidGFza0xpc3QiLCJ0b0RvIiwiX2FjdGl2ZU9uTG9hZCIsIm1hc3Rlckxpc3QiLCJKU09OIiwicGFyc2UiLCJFeGFtcGxlIiwic2F2ZVRvTG9jYWwiLCJzdHJpbmdpZnkiLCJncm91cHMiLCJzZXRJbmFjdGl2ZSIsInJlbW92ZSIsInNldEFjdGl2ZSIsImNoZWNrTmFtZSIsIm5hbWUiLCJjcmVhdGUiLCJsb2ciLCJ1cGRhdGUiLCJvbGROYW1lIiwibmV3TmFtZSIsImFzc2lnbiIsInRhc2tzIiwicmVtb3ZlU2luZ2xlIiwibm9kZSIsInNwbGljZSIsIl9jaGVja1Rhc2tFdmVudCIsImdyb3VwRGF0YSIsInRhc2tJbmRleCIsInJlbW92ZUF0dHJpYnV0ZSIsIl9jaGFuZ2VTdGF0dXMiLCJwYXJlbnRFbGVtZW50IiwidG9nZ2xlIiwiX2dldEluZm8iLCJjb25maXJtIiwiYWxlcnQiLCJjb25maXJtTWFzc1JlbW92ZSIsInJlbW92ZUNvbXBsZXRlZCIsInRhc2tSZWYiLCJuZXdUYXNrIiwicHVzaCIsInNlbGVjdGVkSW5kZXgiLCJtZW51Q29udGFpbmVyIiwibWVudU9wZW5CdXR0b24iLCJtZW51Q2xvc2VCdXR0b24iLCJfb25TY3JlZW5TaXplIiwic2Nyb2xsV2lkdGgiLCJ2aXNpYmlsaXR5IiwibGVmdCIsIl90b2dnbGVNZW51Iiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6InlCQUVBLE1BQU1BLEVBUUcsQ0FDTEMsdUJBUElDLFNBQVNDLGNBQWMsNEJBUTNCQyxnQkFOSUYsU0FBU0MsY0FBYyxxQkFPM0JFLFdBTmlCSCxTQUFTQyxjQUFjLGtCQU94Q0csWUFOa0JKLFNBQVNDLGNBQWMsa0JBVXZDSSxFQUNnQixLQUNsQkMsYUFBYUMsUUFDWCxRQUFTUCxTQUFTUSxnQkFBZ0JDLGFBQWEsVUFFakRILGFBQWFDLFFBQVEscUJBQ2pCVCxFQUFJSSxnQkFBZ0JPLGFBQWEsa0JBcURuQ0MsR0E3Q2lCLE1BQ3JCLE1BUU1DLEVBQWdCQyxJQUNtQyxVQUFuRFosU0FBU1EsZ0JBQWdCQyxhQUFhLFNBQ3hDSSxJQUVBQyxJQUVGVCxLQUdJUSxFQUFhLEtBQ2pCZixFQUFJTSxZQUFZVyxhQUFhLGVBQWdCLFNBQzdDZixTQUFTUSxnQkFBZ0JPLGFBQWEsUUFBUyxRQUMvQ2pCLEVBQUlNLFlBQVlZLE1BQU1DLG1CQUFxQix3QkFDM0NuQixFQUFJSyxXQUFXWSxhQUFhLE1BQ3hCLG1EQUdBRCxFQUFjLEtBQ2xCaEIsRUFBSU0sWUFBWVcsYUFBYSxlQUFnQixRQUM3Q2YsU0FB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QixTQUFVMlYsR0FDbEN4VixPQUFPSCxpQkFBaUIsT0FBUTJWLEdBRWhDLE1BQU1JLEVBQWMsS0FDeUIsV0FBdkMsRUFBSVAsY0FBYzFWLE1BQU0rVixZQUMxQixFQUFJTCxjQUFjMVYsTUFBTStWLFdBQWEsVUFDckMsRUFBSUwsY0FBYzFWLE1BQU1nVyxLQUFPLElBQy9CLEVBQUlKLGdCQUFnQm5ULFVBRXBCLEVBQUlpVCxjQUFjMVYsTUFBTWdXLEtBQU8sU0FDL0JFLFlBQVcsS0FDVCxFQUFJUixjQUFjMVYsTUFBTStWLFdBQWEsV0FDcEMsS0FDSCxFQUFJSixlQUFlbFQsVUFJdkIsRUFBSWtULGVBQWV6VixpQkFBaUIsUUFBUytWLEdBQzdDLEVBQUlMLGdCQUFnQjFWLGlCQUFpQixRQUFTK1YsSUE3QnpCLEciLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IERPTSA9ICgoKSA9PiB7XG4gIGNvbnN0IGFjY2Vzc2liaWxpdHlDb250YWluZXIgPSBcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhY2Nlc3NpYmlsaXR5LWNvbnRhaW5lclwiKTtcbiAgY29uc3QgYW5pbWF0aW9uU3dpdGNoID0gXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYW5pbWF0aW9uLXN3aXRjaFwiKTtcbiAgY29uc3QgZ2l0aHViTG9nbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG93ZXItbmF2IGltZ1wiKTtcbiAgY29uc3QgdGhlbWVTd2l0Y2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RoZW1lLXN3aXRjaFwiKTtcblxuICByZXR1cm4ge1xuICAgIGFjY2Vzc2liaWxpdHlDb250YWluZXIsXG4gICAgYW5pbWF0aW9uU3dpdGNoLFxuICAgIGdpdGh1YkxvZ28sXG4gICAgdGhlbWVTd2l0Y2hcbiAgfVxufSkoKTtcblxuY29uc3Qgc2V0dGluZ3MgPSAoKCkgPT4ge1xuICBjb25zdCBzYXZlVG9Mb2NhbCA9ICgpID0+IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgIFwidGhlbWVcIiwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcInRoZW1lXCIpKTtcblxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiYW5pbWF0aW9ucy1lbmFibGVkXCIsIFxuICAgICAgICBET00uYW5pbWF0aW9uU3dpdGNoLmdldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzYXZlVG9Mb2NhbFxuICB9O1xufSkoKTtcblxuY29uc3QgZGlzcGxheU9wdGlvbnMgPSAoKCkgPT4ge1xuICBjb25zdCBfb25Mb2FkID0gKCkgPT4ge1xuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRoZW1lXCIpID09PSBcImxpZ2h0XCIpIHtcbiAgICAgIF9saWdodFRoZW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9kYXJrVGhlbWUoKTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IF90b2dnbGVUaGVtZSA9IChlKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiKSA9PT0gXCJsaWdodFwiKSB7XG4gICAgICBfZGFya1RoZW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9saWdodFRoZW1lKCk7XG4gICAgfTtcbiAgICBzZXR0aW5ncy5zYXZlVG9Mb2NhbCgpO1xuICB9O1xuXG4gIGNvbnN0IF9kYXJrVGhlbWUgPSAoKSA9PiB7XG4gICAgRE9NLnRoZW1lU3dpdGNoLnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLCBcImZhbHNlXCIpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiLCBcImRhcmtcIik7XG4gICAgRE9NLnRoZW1lU3dpdGNoLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwiY2VudGVyIGJvdHRvbSAtMC44cmVtXCI7XG4gICAgRE9NLmdpdGh1YkxvZ28uc2V0QXR0cmlidXRlKFwic3JjXCIsXG4gICAgICAgIFwiYXNzZXRzL2ltYWdlcy9sb2dvcy9HaXRIdWItTWFyay1MaWdodC0zMnB4LnBuZ1wiKTtcbiAgfTtcblxuICBjb25zdCBfbGlnaHRUaGVtZSA9ICgpID0+IHtcbiAgICBET00udGhlbWVTd2l0Y2guc2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIsIFwidHJ1ZVwiKTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGhlbWVcIiwgXCJsaWdodFwiKTtcbiAgICBET00udGhlbWVTd2l0Y2guc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gXCJjZW50ZXIgdG9wIDJweFwiO1xuICAgIERPTS5naXRodWJMb2dvLnNldEF0dHJpYnV0ZShcInNyY1wiLFxuICAgIFwiYXNzZXRzL2ltYWdlcy9sb2dvcy9HaXRIdWItTWFyay0zMnB4LnBuZ1wiKTtcbiAgfTtcblxuICBET00udGhlbWVTd2l0Y2guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF90b2dnbGVUaGVtZSk7XG4gIERPTS50aGVtZVN3aXRjaC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgIGlmIChlLmtleSA9PT0gXCIgXCIpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIF90b2dnbGVUaGVtZSgpO1xuICAgIH07XG4gIH0pO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBfb25Mb2FkKTtcbn0pKCk7XG5cbmNvbnN0IGFjY2Vzc2liaWxpdHlPcHRpb25zID0gKCgpID0+IHtcbiAgY29uc3QgX29uTG9hZCA9ICgpID0+IHtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJhbmltYXRpb25zLWVuYWJsZWRcIikgPT09IFwiZmFsc2VcIikge1xuICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuaW1hdGlvbnNFbmFibGVkKCk7XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBfdG9nZ2xlQW5pbWF0aW9ucyA9ICgpID0+IHtcbiAgICBpZiAoRE9NLmFuaW1hdGlvblN3aXRjaC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIikgPT09IFwidHJ1ZVwiKSB7XG4gICAgICBhbmltYXRpb25zRGlzYWJsZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5pbWF0aW9uc0VuYWJsZWQoKTtcbiAgICB9O1xuICAgIHNldHRpbmdzLnNhdmVUb0xvY2FsKCk7XG4gIH07XG5cbiAgY29uc3QgYW5pbWF0aW9uc0VuYWJsZWQgPSAoKSA9PiB7XG4gICAgRE9NLmFuaW1hdGlvblN3aXRjaC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgXCJ0cnVlXCIpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwic21vb3RoXCI7XG4gICAgRE9NLmFjY2Vzc2liaWxpdHlDb250YWluZXIuc3R5bGUudHJhbnNpdGlvbiA9IFwidG9wIDAuNzVzIGVhc2UtaW4tb3V0XCI7XG4gICAgRE9NLmFuaW1hdGlvblN3aXRjaC50ZXh0Q29udGVudCA9IFwiQW5pbWF0aW9ucyBFbmFibGVkXCI7XG4gICAgRE9NLnRoZW1lU3dpdGNoLnN0eWxlLnRyYW5zaXRpb24gPSBcImJhY2tncm91bmQtcG9zaXRpb24gMC4zcyBlYXNlLWluXCI7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtYWluLW5hdlwiKS5zdHlsZS50cmFuc2l0aW9uID0gXCJsZWZ0IDAuNXNcIjtcbiAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubGFiZWwtYXJyb3dcIikpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpdGVtLnN0eWxlLnRyYW5zaXRpb24gPSBcInRyYW5zZm9ybSAwLjc1c1wiO1xuICAgIH0pO1xuICB9O1xuICAgICAgICBcbiAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gKCkgPT4ge1xuICAgIERPTS5hbmltYXRpb25Td2l0Y2guc2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIsIFwiZmFsc2VcIik7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJhdXRvXCI7XG4gICAgRE9NLmFuaW1hdGlvblN3aXRjaC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgXCJmYWxzZVwiKTtcbiAgICBET00uYW5pbWF0aW9uU3dpdGNoLnRleHRDb250ZW50ID0gXCJBbmltYXRpb25zIERpc2FibGVkXCI7XG4gICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFuaW1hdGVkXCIpKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5zdHlsZS50cmFuc2l0aW9uID0gXCJub25lXCI7XG4gICAgfSk7XG4gIH07XG5cbiAgRE9NLmFuaW1hdGlvblN3aXRjaC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3RvZ2dsZUFuaW1hdGlvbnMpO1xuICBET00uYW5pbWF0aW9uU3dpdGNoLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XG4gICAgaWYgKGUua2V5ID09PSBcIiBcIikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgX3RvZ2dsZUFuaW1hdGlvbnMoKTtcbiAgICB9O1xuICB9KTtcbiAgXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBfb25Mb2FkKTtcblxuICByZXR1cm4ge1xuICAgIGFuaW1hdGlvbnNFbmFibGVkLFxuICAgIGFuaW1hdGlvbnNEaXNhYmxlZFxuICB9XG59KSgpO1xuXG5leHBvcnQge2FjY2Vzc2liaWxpdHlPcHRpb25zLCBkaXNwbGF5T3B0aW9ucywgc2V0dGluZ3N9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFjY2Vzc2liaWxpdHlPcHRpb25zLCBzZXR0aW5ncyB9IGZyb20gXCIuL3NpdGUtc2V0dGluZ3NcIjtcblxuY29uc3QgRE9NID0gKCgpID0+IHtcbiAgY29uc3QgYWRkR3JvdXBCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC1ncm91cC1idG5cIik7XG4gIGNvbnN0IGRlZmF1bHRHcm91cHMgPSBbXCJJbXBvcnRhbnRcIiwgXCJOZXh0IDcgRGF5c1wiLCBcIkxhdGVyXCIsIFwiRXZlbnR1YWxseVwiXTtcbiAgY29uc3QgZ3JvdXBCdXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImdyb3VwLWJ0blwiKTtcbiAgY29uc3QgZ3JvdXBPcHRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmdyb3VwLW9wdGlvbi1idG5cIik7XG4gIGNvbnN0IG1vZGFsQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbC1ib3hcIik7XG4gIGNvbnN0IG1vZGFsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbC1jb250YWluZXJcIik7XG4gIGNvbnN0IHRhc2tIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlbGVjdGVkLWdyb3VwXCIpO1xuXG4gIHJldHVybiB7XG4gICAgYWRkR3JvdXBCdG4sXG4gICAgZGVmYXVsdEdyb3VwcyxcbiAgICBncm91cEJ1dHRvbnMsXG4gICAgZ3JvdXBPcHRpb25CdG4sXG4gICAgbW9kYWxCb3gsXG4gICAgbW9kYWxDb250YWluZXIsXG4gICAgdGFza0hlYWRlclxuICB9XG59KSgpO1xuXG5jb25zdCBnZW5lcmFsTW9kYWwgPSAoKCkgPT4ge1xuICBjb25zdCBvbkNsb3NlID0gKCkgPT4ge1xuICAgIHdoaWxlIChET00ubW9kYWxCb3guZmlyc3RDaGlsZCkge1xuICAgICAgRE9NLm1vZGFsQm94LnJlbW92ZUNoaWxkKERPTS5tb2RhbEJveC5maXJzdENoaWxkKVxuICAgIH07XG4gICAgRE9NLm1vZGFsQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBET00ubW9kYWxCb3guZGF0YXNldC5pbmRleFJlZiA9IFwiXCI7XG4gICAgRE9NLm1vZGFsQm94LmRhdGFzZXQuZ3JvdXBSZWYgPSBcIlwiO1xuICB9O1xuXG4gIGNvbnN0IG9uT3BlbiA9ICgpID0+IHtcbiAgICBET00ubW9kYWxDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtY2xvc2UtYnV0dG9uXCIpLmZvY3VzKCk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlQ2xvc2VCdG4gPSAoKSA9PiB7XG4gICAgY29uc3QgY2xvc2VCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGNsb3NlQnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgY2xvc2VCdG4uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIkNsb3NlIG1vZGFsXCIpO1xuICAgIGNsb3NlQnRuLmNsYXNzTGlzdC5hZGQoXCJtb2RhbC1jbG9zZS1idXR0b25cIiwgXCJjbG9zZS1idG5cIiwgXCJmb2N1c2FibGVcIik7XG4gICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGdlbmVyYWxNb2RhbC5vbkNsb3NlKTtcbiAgICBET00ubW9kYWxCb3guYXBwZW5kQ2hpbGQoY2xvc2VCdG4pO1xuICB9O1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgb25DbG9zZSgpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlQ2xvc2VCdG4sXG4gICAgb25DbG9zZSxcbiAgICBvbk9wZW5cbiAgfVxufSkoKTtcblxuY29uc3Qgd2FybmluZ01vZGFsID0gKCgpID0+IHtcbiAgY29uc3QgX3NlbGVjdE9wdGlvbiA9IChlKSA9PiB7XG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImRpc2FibGUtYnV0dG9uXCIpKSB7XG4gICAgICBhY2Nlc3NpYmlsaXR5T3B0aW9ucy5hbmltYXRpb25zRGlzYWJsZWQoKTtcbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImVuYWJsZS1idXR0b25cIikpIHtcbiAgICAgIGFjY2Vzc2liaWxpdHlPcHRpb25zLmFuaW1hdGlvbnNFbmFibGVkKCk7XG4gICAgfTtcbiAgICBzZXR0aW5ncy5zYXZlVG9Mb2NhbCgpO1xuICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gIH07XG5cbiAgY29uc3QgX3JlbmRlciA9ICgpID0+IHtcbiAgICBjb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICAgIGhlYWRpbmcudGV4dENvbnRlbnQgPSBcIlRoaXMgc2l0ZSB1c2VzIG1pbmltYWwgYW5pbWF0aW9uIGVmZmVjdHMuXCI7XG5cbiAgICBjb25zdCBwYXJhMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIHBhcmExLnRleHRDb250ZW50ID0gXCJFZmZlY3RzIGluY2x1ZGUgbW92aW5nIG1lbnVzIGFuZCBzbW9vdGggc2Nyb2xsaW5nLiBJZiB5b3Ugc3VmZmVyIGZyb20gYSB2ZXN0aWJ1bGFyIGRpc29yZGVyIG9yIG90aGVyd2lzZSBwcmVmZXIgbm8gYW5pbWF0aW9ucywgeW91IGNhbiB0dXJuIHRoZW0gb2ZmIGJ5IGNsaWNraW5nIHRoZSBmaXJzdCBidXR0b24gYmVsb3cuXCI7XG5cbiAgICBjb25zdCBwYXJhMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIHBhcmEyLnRleHRDb250ZW50PSBcIllvdSBjYW4gbGF0ZXIgY2hhbmdlIHRoaXMgc2V0dGluZyBpbiB0aGUgRGlzcGxheSAmIEFjY2Vzc2liaWxpdHkgdGFiIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UuXCI7XG5cbiAgICBjb25zdCBkaXNhYmxlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBkaXNhYmxlQnV0dG9uLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgZGlzYWJsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZS1idXR0b25cIiwgXCJmb2N1c2FibGVcIiwgXCJwcmltYXJ5LWJ0blwiKTtcbiAgICBkaXNhYmxlQnV0dG9uLnRleHRDb250ZW50ID0gXCJESVNBQkxFIEFOSU1BVElPTlNcIjtcbiAgICBkaXNhYmxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfc2VsZWN0T3B0aW9uKTtcblxuICAgIGNvbnN0IGVuYWJsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgZW5hYmxlQnV0dG9uLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgZW5hYmxlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJlbmFibGUtYnV0dG9uXCIsIFwiZm9jdXNhYmxlXCIsIFwic2Vjb25kYXJ5LWJ0blwiKTtcbiAgICBlbmFibGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkVOQUJMRSBBTklNQVRJT05TXCI7XG4gICAgZW5hYmxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfc2VsZWN0T3B0aW9uKTtcblxuICAgIERPTS5tb2RhbEJveC5hcHBlbmRDaGlsZChoZWFkaW5nKTtcbiAgICBET00ubW9kYWxCb3guYXBwZW5kQ2hpbGQocGFyYTEpO1xuICAgIERPTS5tb2RhbEJveC5hcHBlbmRDaGlsZChwYXJhMik7XG4gICAgRE9NLm1vZGFsQm94LmFwcGVuZENoaWxkKGRpc2FibGVCdXR0b24pO1xuICAgIERPTS5tb2RhbEJveC5hcHBlbmRDaGlsZChlbmFibGVCdXR0b24pO1xuXG4gICAgRE9NLm1vZGFsQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgfTtcblxuICBjb25zdCBfb25Mb2FkID0gKCkgPT4ge1xuICAgIGlmIChsb2NhbFN0b3JhZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICBfcmVuZGVyKCk7XG4gICAgfTtcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgX29uTG9hZCk7XG59KSgpO1xuXG5jb25zdCBncm91cE1vZGFsID0gKCgpID0+IHtcbiAgY29uc3QgX3JlbmRlciA9IChlKSA9PiB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICAgIGNvbnN0IGZpZWxkc2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuICAgIGNvbnN0IGxlZ2VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsZWdlbmRcIik7XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBtYWluQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG4gICAgY29uc3QgbmFtZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIG5hbWVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJuYW1lLWlucHV0XCIpO1xuICAgIG5hbWVMYWJlbC50ZXh0Q29udGVudCA9IFwiR3JvdXAgTmFtZVwiO1xuXG4gICAgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIG5hbWVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICBuYW1lSW5wdXQuc2V0QXR0cmlidXRlKFwicmVxdWlyZWRcIiwgXCJ0cnVlXCIpO1xuICAgIG5hbWVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm5hbWUtaW5wdXRcIik7XG4gICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICBuYW1lSW5wdXQuY2xhc3NMaXN0LmFkZChcImZvY3VzYWJsZVwiKTtcblxuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJhZGQtZ3JvdXAtYnRuXCIpKSB7XG4gICAgICBsZWdlbmQudGV4dENvbnRlbnQgPSBcIkFkZCBhIEdyb3VwXCI7XG4gICAgICBtYWluQnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gICAgICBtYWluQnRuLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiQUREIEdST1VQXCIpO1xuICAgICAgbWFpbkJ0bi5jbGFzc0xpc3QuYWRkKFwic3VibWl0LWdyb3VwLWJ0blwiLCBcInByaW1hcnktYnRuXCIsIFwiZm9jdXNhYmxlXCIsIFwic3VibWl0XCIpO1xuICAgICAgZGl2LmFwcGVuZENoaWxkKG1haW5CdG4pO1xuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZ3JvdXAtb3B0aW9uLWJ0blwiKSkge1xuICAgICAgbGVnZW5kLnRleHRDb250ZW50ID0gXCJHcm91cCBPcHRpb25zXCI7XG4gICAgICBtYWluQnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gICAgICBtYWluQnRuLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiVVBEQVRFXCIpO1xuICAgICAgbWFpbkJ0bi5jbGFzc0xpc3QuYWRkKFwidXBkYXRlLWdyb3VwLWJ0blwiLCBcInNlY29uZGFyeS1idG5cIiwgXCJmb2N1c2FibGVcIiwgXCJzdWJtaXRcIik7XG5cbiAgICAgIGNvbnN0IGRlbGV0ZUdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGRlbGV0ZUdyb3VwLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgICBkZWxldGVHcm91cC5jbGFzc0xpc3QuYWRkKFwiZGVsZXRlLWdyb3VwLWJ0blwiLCBcImRlbGV0ZS1idG5cIiwgXCJmb2N1c2FibGVcIik7XG4gICAgICBkZWxldGVHcm91cC50ZXh0Q29udGVudCA9IFwiREVMRVRFIEdST1VQXCI7XG5cbiAgICAgIGNvbnN0IGRlbGV0ZUNvbXBsZXRlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBkZWxldGVDb21wbGV0ZWQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICAgIGRlbGV0ZUNvbXBsZXRlZC5jbGFzc0xpc3QuYWRkKFwiZGVsZXRlLWNvbXBsZXRlZC1idG5cIiwgXCJkZWxldGUtYnRuXCIsIFwiZm9jdXNhYmxlXCIpO1xuICAgICAgZGVsZXRlQ29tcGxldGVkLnRleHRDb250ZW50ID0gXCJERUxFVEUgQ09NUExFVEVEIFRBU0tTXCI7XG5cbiAgICAgIGlmIChET00uZGVmYXVsdEdyb3Vwcy5pbmRleE9mKERPTS50YXNrSGVhZGVyLnRleHRDb250ZW50KSA+PSAwKSB7XG4gICAgICAgIG5hbWVMYWJlbC5zdHlsZS5vcGFjaXR5ID0gXCIwLjM4XCI7XG4gICAgICAgIG5hbWVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XG4gICAgICAgIG5hbWVJbnB1dC5zdHlsZS5vcGFjaXR5ID0gXCIwLjM4XCI7XG4gICAgICAgIG1haW5CdG4uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICBtYWluQnRuLnN0eWxlLm9wYWNpdHkgPSBcIjAuMzhcIjtcbiAgICAgICAgZGVsZXRlR3JvdXAuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICBkZWxldGVHcm91cC5zdHlsZS5vcGFjaXR5ID0gXCIwLjM4XCI7XG4gICAgICB9O1xuXG4gICAgICBkaXYuYXBwZW5kQ2hpbGQobWFpbkJ0bik7XG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoZGVsZXRlR3JvdXApO1xuICAgICAgZGl2LmFwcGVuZENoaWxkKGRlbGV0ZUNvbXBsZXRlZCk7XG4gICAgfTtcblxuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGxlZ2VuZCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQobmFtZUxhYmVsKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChuYW1lSW5wdXQpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGRpdik7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChmaWVsZHNldCk7XG4gICAgZ2VuZXJhbE1vZGFsLmNyZWF0ZUNsb3NlQnRuKCk7XG4gICAgRE9NLm1vZGFsQm94LmFwcGVuZENoaWxkKGZvcm0pO1xuICB9O1xuXG4gIERPTS5ncm91cE9wdGlvbkJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBfcmVuZGVyKGUpO1xuICAgIGdlbmVyYWxNb2RhbC5vbk9wZW4oKTtcbiAgfSk7XG5cbiAgRE9NLmFkZEdyb3VwQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIF9yZW5kZXIoZSk7XG4gICAgZ2VuZXJhbE1vZGFsLm9uT3BlbigpO1xuICB9KTtcbn0pKCk7XG5cbmNvbnN0IHRhc2tNb2RhbCA9ICgoKSA9PiB7XG4gIGNvbnN0IF9wcmlvcml0eUFycmF5ID0gW1wiTm9ybWFsXCIsIFwiSW1wb3J0YW50XCJdO1xuXG4gIC8vIHBhc3MgZ3JvdXAgbGlzdCBmcm9tIHRhc2sgbW9kdWxlIHBhdHRlcm4gaW4gbG9naWMuanMgZmlsZSBhcyBhcmd1bWVudFxuICBjb25zdCByZW5kZXIgPSAoZSwgZ3JvdXBMaXN0KSA9PiB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICAgIGNvbnN0IGZpZWxkc2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuICAgIGNvbnN0IGxlZ2VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsZWdlbmRcIik7XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgIGNvbnN0IG5hbWVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBuYW1lTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwibmFtZS1pbnB1dFwiKTtcbiAgICBuYW1lTGFiZWwudGV4dENvbnRlbnQgPSBcIlRhc2sgTmFtZSAocmVxdWlyZWQpXCI7XG5cbiAgICBjb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgIG5hbWVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm5hbWUtaW5wdXRcIik7XG4gICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIFwiRW50ZXIgYSB0YXNrIG5hbWVcIik7XG4gICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcInJlcXVpcmVkXCIsIFwidHJ1ZVwiKTtcbiAgICBuYW1lSW5wdXQuc2V0QXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIpO1xuICAgIG5hbWVJbnB1dC5jbGFzc05hbWUgPSBcImZvY3VzYWJsZVwiO1xuXG4gICAgY29uc3QgZ3JvdXBMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBncm91cExhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImdyb3VwLXNlbGVjdFwiKTtcbiAgICBncm91cExhYmVsLnRleHRDb250ZW50ID0gXCJHcm91cFwiO1xuXG4gICAgY29uc3QgZ3JvdXBTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICAgIGdyb3VwU2VsZWN0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZ3JvdXAtc2VsZWN0XCIpO1xuICAgIGdyb3VwU2VsZWN0LmNsYXNzTmFtZSA9IFwiZm9jdXNhYmxlXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGdyb3VwT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgIGdyb3VwT3B0aW9uLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGdyb3VwTGlzdFtpXSk7XG4gICAgICBncm91cE9wdGlvbi50ZXh0Q29udGVudCA9IGdyb3VwTGlzdFtpXTtcbiAgICAgIGdyb3VwU2VsZWN0LmFwcGVuZENoaWxkKGdyb3VwT3B0aW9uKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcHJpb3JpdHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICBwcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcInByaW9yaXR5LXNlbGVjdFwiKTtcbiAgICBwcmlvcml0eUxhYmVsLnRleHRDb250ZW50ID0gXCJQcmlvcml0eVwiO1xuXG4gICAgY29uc3QgcHJpb3JpdHlTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICAgIHByaW9yaXR5U2VsZWN0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwicHJpb3JpdHktc2VsZWN0XCIpO1xuICAgIHByaW9yaXR5U2VsZWN0LmNsYXNzTmFtZSA9IFwiZm9jdXNhYmxlXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfcHJpb3JpdHlBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcHJpb3JpdHlPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgcHJpb3JpdHlPcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgX3ByaW9yaXR5QXJyYXlbaV0pO1xuICAgICAgcHJpb3JpdHlPcHRpb24udGV4dENvbnRlbnQgPSBfcHJpb3JpdHlBcnJheVtpXTtcbiAgICAgIHByaW9yaXR5U2VsZWN0LmFwcGVuZENoaWxkKHByaW9yaXR5T3B0aW9uKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGRhdGVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJkYXRlLXNlbGVjdFwiKTtcbiAgICBkYXRlTGFiZWwudGV4dENvbnRlbnQgPSBcIkR1ZSBEYXRlIChvcHRpb25hbClcIjtcblxuICAgIGNvbnN0IGRhdGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBkYXRlSW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImRhdGVcIik7XG4gICAgZGF0ZUlucHV0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZGF0ZS1zZWxlY3RcIik7XG4gICAgZGF0ZUlucHV0LmNsYXNzTmFtZSA9IFwiZm9jdXNhYmxlXCI7XG5cbiAgICBjb25zdCBub3Rlc0xhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIG5vdGVzTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwibm90ZXMtaW5wdXRcIik7XG4gICAgbm90ZXNMYWJlbC50ZXh0Q29udGVudCA9IFwiQWRkaXRpb25hbCBOb3Rlc1wiO1xuXG4gICAgY29uc3Qgbm90ZXNJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICBub3Rlc0lucHV0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwibm90ZXMtaW5wdXRcIik7XG4gICAgbm90ZXNJbnB1dC5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCBcIkVudGVyIGFueSBhZGRpdGlvbmFsIG5vdGVzIGZvciB0aGUgdGFza1wiKTtcbiAgICBub3Rlc0lucHV0LmNsYXNzTmFtZSA9IFwiZm9jdXNhYmxlXCI7XG5cbiAgICBpZiAoZS50YXJnZXQudGV4dENvbnRlbnQuaW5jbHVkZXMoXCJBREQgVEFTS1wiKSkge1xuICAgICAgbGVnZW5kLnRleHRDb250ZW50ID0gXCJBZGQgYSBUYXNrXCI7XG5cbiAgICAgIGNvbnN0IGFkZE9uZUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIGFkZE9uZUJ0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwic3VibWl0XCIpO1xuICAgICAgYWRkT25lQnRuLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiQUREIE9ORVwiKTtcbiAgICAgIGFkZE9uZUJ0bi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiQWRkIHRhc2sgYW5kIGNsb3NlIG1vZGFsXCIpO1xuICAgICAgYWRkT25lQnRuLmNsYXNzTGlzdC5hZGQoXCJhZGQtc2luZ2xlLWJ0blwiLCBcInByaW1hcnktYnRuXCIsXCJzdWJtaXRcIiwgXCJmb2N1c2FibGVcIik7XG5cbiAgICAgIGNvbnN0IGFkZE1hbnlCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICBhZGRNYW55QnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gICAgICBhZGRNYW55QnRuLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiQUREIE1BTllcIik7XG4gICAgICBhZGRNYW55QnRuLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJBZGQgdGFzayBhbmQga2VlcCBtb2RhbCBvcGVuXCIpO1xuICAgICAgYWRkTWFueUJ0bi5jbGFzc0xpc3QuYWRkKFwiYWRkLW1hbnktYnRuXCIsIFwic2Vjb25kYXJ5LWJ0blwiLCBcInN1Ym1pdFwiLCBcImZvY3VzYWJsZVwiKTtcblxuICAgICAgZGl2LmFwcGVuZENoaWxkKGFkZE9uZUJ0bik7XG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoYWRkTWFueUJ0bik7XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldC50ZXh0Q29udGVudCA9PT0gKFwiRURJVFwiKSkge1xuICAgICAgbGVnZW5kLnRleHRDb250ZW50ID0gXCJFZGl0IFRhc2tcIjtcblxuICAgICAgY29uc3QgZWRpdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIGVkaXRCdG4uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInN1Ym1pdFwiKTtcbiAgICAgIGVkaXRCdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJVUERBVEVcIik7XG4gICAgICBlZGl0QnRuLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJVcGRhdGUgdGFzayBhbmQgY2xvc2UgbW9kYWxcIik7XG4gICAgICBlZGl0QnRuLmNsYXNzTGlzdC5hZGQoXCJ1cGRhdGUtdGFzay1idG5cIiwgXCJwcmltYXJ5LWJ0blwiLCBcImZvY3VzYWJsZVwiKTtcblxuICAgICAgZ3JvdXBTZWxlY3Quc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgZ3JvdXBMYWJlbC5zdHlsZS5vcGFjaXR5ID0gXCIwLjM4XCI7XG4gICAgICBncm91cFNlbGVjdC5zdHlsZS5vcGFjaXR5ID0gXCIwLjM4XCI7XG5cbiAgICAgIGRpdi5hcHBlbmRDaGlsZChlZGl0QnRuKTtcbiAgICB9O1xuXG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQobGVnZW5kKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChuYW1lTGFiZWwpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZ3JvdXBMYWJlbCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChncm91cFNlbGVjdCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChwcmlvcml0eUxhYmVsKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKHByaW9yaXR5U2VsZWN0KTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGRhdGVMYWJlbCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChkYXRlSW5wdXQpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQobm90ZXNMYWJlbCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQobm90ZXNJbnB1dCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKGZpZWxkc2V0KTtcbiAgICBnZW5lcmFsTW9kYWwuY3JlYXRlQ2xvc2VCdG4oKTtcbiAgICBET00ubW9kYWxCb3guYXBwZW5kQ2hpbGQoZm9ybSk7XG4gIH07XG5cbiAgcmV0dXJuIHtyZW5kZXJ9XG59KSgpO1xuXG5leHBvcnQgeyBnZW5lcmFsTW9kYWwsIGdyb3VwTW9kYWwsIHRhc2tNb2RhbCwgd2FybmluZ01vZGFsIH0iLCJ2YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xuXG5mdW5jdGlvbiBnZXREYXRlTWlsbGlzZWNvbmRzUGFydChkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAlIE1JTExJU0VDT05EU19JTl9NSU5VVEU7XG59XG4vKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGRpcnR5RGF0ZS5nZXRUaW1lKCkpO1xuICB2YXIgYmFzZVRpbWV6b25lT2Zmc2V0ID0gTWF0aC5jZWlsKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gIGRhdGUuc2V0U2Vjb25kcygwLCAwKTtcbiAgdmFyIGhhc05lZ2F0aXZlVVRDT2Zmc2V0ID0gYmFzZVRpbWV6b25lT2Zmc2V0ID4gMDtcbiAgdmFyIG1pbGxpc2Vjb25kc1BhcnRPZlRpbWV6b25lT2Zmc2V0ID0gaGFzTmVnYXRpdmVVVENPZmZzZXQgPyAoTUlMTElTRUNPTkRTX0lOX01JTlVURSArIGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpKSAlIE1JTExJU0VDT05EU19JTl9NSU5VVEUgOiBnZXREYXRlTWlsbGlzZWNvbmRzUGFydChkYXRlKTtcbiAgcmV0dXJuIGJhc2VUaW1lem9uZU9mZnNldCAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBtaWxsaXNlY29uZHNQYXJ0T2ZUaW1lem9uZU9mZnNldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tICcuLi90b0RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIGNvbXBhcmVBc2NcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29tcGFyZSB0aGUgdHdvIGRhdGVzIGFuZCByZXR1cm4gLTEsIDAgb3IgMS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIDEgaWYgdGhlIGZpcnN0IGRhdGUgaXMgYWZ0ZXIgdGhlIHNlY29uZCxcbiAqIC0xIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGJlZm9yZSB0aGUgc2Vjb25kIG9yIDAgaWYgZGF0ZXMgYXJlIGVxdWFsLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjb21wYXJlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY29tcGFyZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIHJlc3VsdCBvZiB0aGUgY29tcGFyaXNvblxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb21wYXJlIDExIEZlYnJ1YXJ5IDE5ODcgYW5kIDEwIEp1bHkgMTk4OTpcbiAqIHZhciByZXN1bHQgPSBjb21wYXJlQXNjKG5ldyBEYXRlKDE5ODcsIDEsIDExKSwgbmV3IERhdGUoMTk4OSwgNiwgMTApKVxuICogLy89PiAtMVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTb3J0IHRoZSBhcnJheSBvZiBkYXRlczpcbiAqIHZhciByZXN1bHQgPSBbXG4gKiAgIG5ldyBEYXRlKDE5OTUsIDYsIDIpLFxuICogICBuZXcgRGF0ZSgxOTg3LCAxLCAxMSksXG4gKiAgIG5ldyBEYXRlKDE5ODksIDYsIDEwKVxuICogXS5zb3J0KGNvbXBhcmVBc2MpXG4gKiAvLz0+IFtcbiAqIC8vICAgV2VkIEZlYiAxMSAxOTg3IDAwOjAwOjAwLFxuICogLy8gICBNb24gSnVsIDEwIDE5ODkgMDA6MDA6MDAsXG4gKiAvLyAgIFN1biBKdWwgMDIgMTk5NSAwMDowMDowMFxuICogLy8gXVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBhcmVBc2MoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciBkaWZmID0gZGF0ZUxlZnQuZ2V0VGltZSgpIC0gZGF0ZVJpZ2h0LmdldFRpbWUoKTtcblxuICBpZiAoZGlmZiA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoZGlmZiA+IDApIHtcbiAgICByZXR1cm4gMTsgLy8gUmV0dXJuIDAgaWYgZGlmZiBpcyAwOyByZXR1cm4gTmFOIGlmIGRpZmYgaXMgTmFOXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRpZmY7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgbWlsbGlzZWNvbmRzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxNCAxMjozMDoyMC42MDAgYW5kIDIgSnVseSAyMDE0IDEyOjMwOjIxLjcwMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDEyLCAzMCwgMjEsIDcwMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDEyLCAzMCwgMjAsIDYwMClcbiAqIClcbiAqIC8vPT4gMTEwMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgcmV0dXJuIGRhdGVMZWZ0LmdldFRpbWUoKSAtIGRhdGVSaWdodC5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyBmcm9tICcuLi9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJblNlY29uZHNcbiAqIEBjYXRlZ29yeSBTZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIHNlY29uZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgc2Vjb25kcyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTQgMTI6MzA6MDcuOTk5IGFuZCAyIEp1bHkgMjAxNCAxMjozMDoyMC4wMDA/XG4gKiB2YXIgcmVzdWx0ID0gZGlmZmVyZW5jZUluU2Vjb25kcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDEyLCAzMCwgNywgOTk5KVxuICogKVxuICogLy89PiAxMlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJblNlY29uZHMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkaWZmID0gZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSAvIDEwMDA7XG4gIHJldHVybiBkaWZmID4gMCA/IE1hdGguZmxvb3IoZGlmZikgOiBNYXRoLmNlaWwoZGlmZik7XG59IiwiaW1wb3J0IGFzc2lnbiBmcm9tICcuLi9hc3NpZ24vaW5kZXguanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xvbmVPYmplY3QoZGlydHlPYmplY3QpIHtcbiAgcmV0dXJuIGFzc2lnbih7fSwgZGlydHlPYmplY3QpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGRpcnR5T2JqZWN0KSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Fzc2lnbiByZXF1aXJlcyB0aGF0IGlucHV0IHBhcmFtZXRlciBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIGRpcnR5T2JqZWN0ID0gZGlydHlPYmplY3QgfHwge307XG5cbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gZGlydHlPYmplY3QpIHtcbiAgICBpZiAoZGlydHlPYmplY3QuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICB0YXJnZXRbcHJvcGVydHldID0gZGlydHlPYmplY3RbcHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDtcbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlTdHJpbmcsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoZGlydHlTdHJpbmcpO1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocGFyc2VQYXR0ZXJucykgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHZhbHVlID0gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKVxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5U3RyaW5nLCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGRpcnR5U3RyaW5nKTtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuXG4gICAgaWYgKCFwYXJzZVJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddIC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuICAvLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbiAgLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4gIC8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9kaXJ0eU9wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YDpcbiAgLy9cbiAgLy8gICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fVxuICAvLyAgIHZhciB1bml0ID0gU3RyaW5nKG9wdGlvbnMudW5pdClcbiAgLy9cbiAgLy8gd2hlcmUgYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCdcblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tICcuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IGNvbXBhcmVBc2MgZnJvbSAnLi4vY29tcGFyZUFzYy9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgZGlmZmVyZW5jZUluU2Vjb25kcyBmcm9tICcuLi9kaWZmZXJlbmNlSW5TZWNvbmRzL2luZGV4LmpzJztcbmltcG9ydCBjbG9uZU9iamVjdCBmcm9tICcuLi9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzJztcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gJy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbnZhciBNSU5VVEVTX0lOX0RBWSA9IDE0NDA7XG52YXIgTUlOVVRFU19JTl9NT05USCA9IDQzMjAwO1xudmFyIE1JTlVURVNfSU5fWUVBUiA9IDUyNTYwMDtcbi8qKlxuICogQG5hbWUgZm9ybWF0RGlzdGFuY2VTdHJpY3RcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyBpbiB3b3Jkcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMgaW4gd29yZHMsIHVzaW5nIHN0cmljdCB1bml0cy5cbiAqIFRoaXMgaXMgbGlrZSBgZm9ybWF0RGlzdGFuY2VgLCBidXQgZG9lcyBub3QgdXNlIGhlbHBlcnMgbGlrZSAnYWxtb3N0JywgJ292ZXInLFxuICogJ2xlc3MgdGhhbicgYW5kIHRoZSBsaWtlLlxuICpcbiAqIHwgRGlzdGFuY2UgYmV0d2VlbiBkYXRlcyB8IFJlc3VsdCAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgLi4uIDU5IHNlY3MgICAgICAgICAgfCBbMC4uNTldIHNlY29uZHMgICAgIHxcbiAqIHwgMSAuLi4gNTkgbWlucyAgICAgICAgICB8IFsxLi41OV0gbWludXRlcyAgICAgfFxuICogfCAxIC4uLiAyMyBocnMgICAgICAgICAgIHwgWzEuLjIzXSBob3VycyAgICAgICB8XG4gKiB8IDEgLi4uIDI5IGRheXMgICAgICAgICAgfCBbMS4uMjldIGRheXMgICAgICAgIHxcbiAqIHwgMSAuLi4gMTEgbW9udGhzICAgICAgICB8IFsxLi4xMV0gbW9udGhzICAgICAgfFxuICogfCAxIC4uLiBOIHllYXJzICAgICAgICAgIHwgWzEuLk5dICB5ZWFycyAgICAgICB8XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCBmcm9tIGBkaXN0YW5jZUluV29yZHNTdHJpY3RgIHRvIGBmb3JtYXREaXN0YW5jZVN0cmljdGBcbiAqICAgdG8gbWFrZSBpdHMgbmFtZSBjb25zaXN0ZW50IHdpdGggYGZvcm1hdGAgYW5kIGBmb3JtYXRSZWxhdGl2ZWAuXG4gKlxuICogLSBUaGUgb3JkZXIgb2YgYXJndW1lbnRzIGlzIHN3YXBwZWQgdG8gbWFrZSB0aGUgZnVuY3Rpb25cbiAqICAgY29uc2lzdGVudCB3aXRoIGBkaWZmZXJlbmNlSW4uLi5gIGZ1bmN0aW9ucy5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICpcbiAqICAgZGlzdGFuY2VJbldvcmRzU3RyaWN0KFxuICogICAgIG5ldyBEYXRlKDIwMTUsIDAsIDIpLFxuICogICAgIG5ldyBEYXRlKDIwMTQsIDYsIDIpXG4gKiAgICkgLy89PiAnNiBtb250aHMnXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKlxuICogICBmb3JtYXREaXN0YW5jZVN0cmljdChcbiAqICAgICBuZXcgRGF0ZSgyMDE0LCA2LCAyKSxcbiAqICAgICBuZXcgRGF0ZSgyMDE1LCAwLCAyKVxuICogICApIC8vPT4gJzYgbW9udGhzJ1xuICogICBgYGBcbiAqXG4gKiAtIGBwYXJ0aWFsTWV0aG9kYCBvcHRpb24gaXMgcmVuYW1lZCB0byBgcm91bmRpbmdNZXRob2RgLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKlxuICogICBkaXN0YW5jZUluV29yZHNTdHJpY3QoXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTAsIDMyLCAwKSxcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzMsIDEpLFxuICogICAgIHsgcGFydGlhbE1ldGhvZDogJ2NlaWwnIH1cbiAqICAgKSAvLz0+ICcyIG1pbnV0ZXMnXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKlxuICogICBmb3JtYXREaXN0YW5jZVN0cmljdChcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzMsIDEpLFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDEwLCAzMiwgMCksXG4gKiAgICAgeyByb3VuZGluZ01ldGhvZDogJ2NlaWwnIH1cbiAqICAgKSAvLz0+ICcyIG1pbnV0ZXMnXG4gKiAgIGBgYFxuICpcbiAqIC0gSWYgYHJvdW5kaW5nTWV0aG9kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCBub3cgZGVmYXVsdHMgdG8gYHJvdW5kYCBpbnN0ZWFkIG9mIGBmbG9vcmAuXG4gKlxuICogLSBgdW5pdGAgb3B0aW9uIG5vdyBhY2NlcHRzIG9uZSBvZiB0aGUgc3RyaW5nczpcbiAqICAgJ3NlY29uZCcsICdtaW51dGUnLCAnaG91cicsICdkYXknLCAnbW9udGgnIG9yICd5ZWFyJyBpbnN0ZWFkIG9mICdzJywgJ20nLCAnaCcsICdkJywgJ00nIG9yICdZJ1xuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKlxuICogICBkaXN0YW5jZUluV29yZHNTdHJpY3QoXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTAsIDMyLCAwKSxcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzMsIDEpLFxuICogICAgIHsgdW5pdDogJ20nIH1cbiAqICAgKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICpcbiAqICAgZm9ybWF0RGlzdGFuY2VTdHJpY3QoXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTAsIDMzLCAxKSxcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzIsIDApLFxuICogICAgIHsgdW5pdDogJ21pbnV0ZScgfVxuICogICApXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYmFzZURhdGUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5hZGRTdWZmaXg9ZmFsc2VdIC0gcmVzdWx0IGluZGljYXRlcyBpZiB0aGUgc2Vjb25kIGRhdGUgaXMgZWFybGllciBvciBsYXRlciB0aGFuIHRoZSBmaXJzdFxuICogQHBhcmFtIHsnc2Vjb25kJ3wnbWludXRlJ3wnaG91cid8J2RheSd8J21vbnRoJ3wneWVhcid9IFtvcHRpb25zLnVuaXRdIC0gaWYgc3BlY2lmaWVkLCB3aWxsIGZvcmNlIGEgdW5pdFxuICogQHBhcmFtIHsnZmxvb3InfCdjZWlsJ3wncm91bmQnfSBbb3B0aW9ucy5yb3VuZGluZ01ldGhvZD0ncm91bmQnXSAtIHdoaWNoIHdheSB0byByb3VuZCBwYXJ0aWFsIHVuaXRzXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBkaXN0YW5jZSBpbiB3b3Jkc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGJhc2VEYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLnJvdW5kaW5nTWV0aG9kYCBtdXN0IGJlICdmbG9vcicsICdjZWlsJyBvciAncm91bmQnXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy51bml0YCBtdXN0IGJlICdzZWNvbmQnLCAnbWludXRlJywgJ2hvdXInLCAnZGF5JywgJ21vbnRoJyBvciAneWVhcidcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXREaXN0YW5jZWAgcHJvcGVydHlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAyIEp1bHkgMjAxNCBhbmQgMSBKYW51YXJ5IDIwMTU/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VTdHJpY3QobmV3IERhdGUoMjAxNCwgNiwgMiksIG5ldyBEYXRlKDIwMTUsIDAsIDIpKVxuICogLy89PiAnNiBtb250aHMnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMSBKYW51YXJ5IDIwMTUgMDA6MDA6MTVcbiAqIC8vIGFuZCAxIEphbnVhcnkgMjAxNSAwMDowMDowMD9cbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVN0cmljdChcbiAqICAgbmV3IERhdGUoMjAxNSwgMCwgMSwgMCwgMCwgMTUpLFxuICogICBuZXcgRGF0ZSgyMDE1LCAwLCAxLCAwLCAwLCAwKVxuICogKVxuICogLy89PiAnMTUgc2Vjb25kcydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgZnJvbSAxIEphbnVhcnkgMjAxNlxuICogLy8gdG8gMSBKYW51YXJ5IDIwMTUsIHdpdGggYSBzdWZmaXg/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VTdHJpY3QobmV3IERhdGUoMjAxNSwgMCwgMSksIG5ldyBEYXRlKDIwMTYsIDAsIDEpLCB7XG4gKiAgIGFkZFN1ZmZpeDogdHJ1ZVxuICogfSlcbiAqIC8vPT4gJzEgeWVhciBhZ28nXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGZyb20gMSBKYW51YXJ5IDIwMTZcbiAqIC8vIHRvIDEgSmFudWFyeSAyMDE1LCBpbiBtaW51dGVzP1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlU3RyaWN0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBuZXcgRGF0ZSgyMDE1LCAwLCAxKSwge1xuICogICB1bml0OiAnbWludXRlJ1xuICogfSlcbiAqIC8vPT4gJzUyNTYwMCBtaW51dGVzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBmcm9tIDEgSmFudWFyeSAyMDE1XG4gKiAvLyB0byAyOCBKYW51YXJ5IDIwMTUsIGluIG1vbnRocywgcm91bmRlZCB1cD9cbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVN0cmljdChuZXcgRGF0ZSgyMDE1LCAwLCAyOCksIG5ldyBEYXRlKDIwMTUsIDAsIDEpLCB7XG4gKiAgIHVuaXQ6ICdtb250aCcsXG4gKiAgIHJvdW5kaW5nTWV0aG9kOiAnY2VpbCdcbiAqIH0pXG4gKiAvLz0+ICcxIG1vbnRoJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIDEgQXVndXN0IDIwMTYgYW5kIDEgSmFudWFyeSAyMDE1IGluIEVzcGVyYW50bz9cbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlU3RyaWN0KG5ldyBEYXRlKDIwMTYsIDcsIDEpLCBuZXcgRGF0ZSgyMDE1LCAwLCAxKSwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMSBqYXJvJ1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlU3RyaWN0KGRpcnR5RGF0ZSwgZGlydHlCYXNlRGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0RGlzdGFuY2UpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZS5mb3JtYXREaXN0YW5jZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIGNvbXBhcmlzb24gPSBjb21wYXJlQXNjKGRpcnR5RGF0ZSwgZGlydHlCYXNlRGF0ZSk7XG5cbiAgaWYgKGlzTmFOKGNvbXBhcmlzb24pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgdmFyIGxvY2FsaXplT3B0aW9ucyA9IGNsb25lT2JqZWN0KG9wdGlvbnMpO1xuICBsb2NhbGl6ZU9wdGlvbnMuYWRkU3VmZml4ID0gQm9vbGVhbihvcHRpb25zLmFkZFN1ZmZpeCk7XG4gIGxvY2FsaXplT3B0aW9ucy5jb21wYXJpc29uID0gY29tcGFyaXNvbjtcbiAgdmFyIGRhdGVMZWZ0O1xuICB2YXIgZGF0ZVJpZ2h0O1xuXG4gIGlmIChjb21wYXJpc29uID4gMCkge1xuICAgIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5QmFzZURhdGUpO1xuICAgIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB9IGVsc2Uge1xuICAgIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gICAgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5QmFzZURhdGUpO1xuICB9XG5cbiAgdmFyIHJvdW5kaW5nTWV0aG9kID0gb3B0aW9ucy5yb3VuZGluZ01ldGhvZCA9PSBudWxsID8gJ3JvdW5kJyA6IFN0cmluZyhvcHRpb25zLnJvdW5kaW5nTWV0aG9kKTtcbiAgdmFyIHJvdW5kaW5nTWV0aG9kRm47XG5cbiAgaWYgKHJvdW5kaW5nTWV0aG9kID09PSAnZmxvb3InKSB7XG4gICAgcm91bmRpbmdNZXRob2RGbiA9IE1hdGguZmxvb3I7XG4gIH0gZWxzZSBpZiAocm91bmRpbmdNZXRob2QgPT09ICdjZWlsJykge1xuICAgIHJvdW5kaW5nTWV0aG9kRm4gPSBNYXRoLmNlaWw7XG4gIH0gZWxzZSBpZiAocm91bmRpbmdNZXRob2QgPT09ICdyb3VuZCcpIHtcbiAgICByb3VuZGluZ01ldGhvZEZuID0gTWF0aC5yb3VuZDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInJvdW5kaW5nTWV0aG9kIG11c3QgYmUgJ2Zsb29yJywgJ2NlaWwnIG9yICdyb3VuZCdcIik7XG4gIH1cblxuICB2YXIgc2Vjb25kcyA9IGRpZmZlcmVuY2VJblNlY29uZHMoZGF0ZVJpZ2h0LCBkYXRlTGVmdCk7XG4gIHZhciBvZmZzZXRJblNlY29uZHMgPSAoZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlUmlnaHQpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlTGVmdCkpIC8gMTAwMDtcbiAgdmFyIG1pbnV0ZXMgPSByb3VuZGluZ01ldGhvZEZuKChzZWNvbmRzIC0gb2Zmc2V0SW5TZWNvbmRzKSAvIDYwKTtcbiAgdmFyIHVuaXQ7XG5cbiAgaWYgKG9wdGlvbnMudW5pdCA9PSBudWxsKSB7XG4gICAgaWYgKG1pbnV0ZXMgPCAxKSB7XG4gICAgICB1bml0ID0gJ3NlY29uZCc7XG4gICAgfSBlbHNlIGlmIChtaW51dGVzIDwgNjApIHtcbiAgICAgIHVuaXQgPSAnbWludXRlJztcbiAgICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX0RBWSkge1xuICAgICAgdW5pdCA9ICdob3VyJztcbiAgICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX01PTlRIKSB7XG4gICAgICB1bml0ID0gJ2RheSc7XG4gICAgfSBlbHNlIGlmIChtaW51dGVzIDwgTUlOVVRFU19JTl9ZRUFSKSB7XG4gICAgICB1bml0ID0gJ21vbnRoJztcbiAgICB9IGVsc2Uge1xuICAgICAgdW5pdCA9ICd5ZWFyJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdW5pdCA9IFN0cmluZyhvcHRpb25zLnVuaXQpO1xuICB9IC8vIDAgdXAgdG8gNjAgc2Vjb25kc1xuXG5cbiAgaWYgKHVuaXQgPT09ICdzZWNvbmQnKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneFNlY29uZHMnLCBzZWNvbmRzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxIHVwIHRvIDYwIG1pbnNcbiAgfSBlbHNlIGlmICh1bml0ID09PSAnbWludXRlJykge1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNaW51dGVzJywgbWludXRlcywgbG9jYWxpemVPcHRpb25zKTsgLy8gMSB1cCB0byAyNCBob3Vyc1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICdob3VyJykge1xuICAgIHZhciBob3VycyA9IHJvdW5kaW5nTWV0aG9kRm4obWludXRlcyAvIDYwKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4SG91cnMnLCBob3VycywgbG9jYWxpemVPcHRpb25zKTsgLy8gMSB1cCB0byAzMCBkYXlzXG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ2RheScpIHtcbiAgICB2YXIgZGF5cyA9IHJvdW5kaW5nTWV0aG9kRm4obWludXRlcyAvIE1JTlVURVNfSU5fREFZKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4RGF5cycsIGRheXMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEgdXAgdG8gMTIgbW9udGhzXG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ21vbnRoJykge1xuICAgIHZhciBtb250aHMgPSByb3VuZGluZ01ldGhvZEZuKG1pbnV0ZXMgLyBNSU5VVEVTX0lOX01PTlRIKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4TW9udGhzJywgbW9udGhzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxIHllYXIgdXAgdG8gbWF4IERhdGVcbiAgfSBlbHNlIGlmICh1bml0ID09PSAneWVhcicpIHtcbiAgICB2YXIgeWVhcnMgPSByb3VuZGluZ01ldGhvZEZuKG1pbnV0ZXMgLyBNSU5VVEVTX0lOX1lFQVIpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hZZWFycycsIHllYXJzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICB9XG5cbiAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ1bml0IG11c3QgYmUgJ3NlY29uZCcsICdtaW51dGUnLCAnaG91cicsICdkYXknLCAnbW9udGgnIG9yICd5ZWFyJ1wiKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tICcuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSAnLi4vc3RhcnRPZkRheS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7XG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy4gVGhpcyBtZWFucyB0aGF0IHRoZSB0aW1lcyBhcmUgcmVtb3ZlZFxuICogZnJvbSB0aGUgZGF0ZXMgYW5kIHRoZW4gdGhlIGRpZmZlcmVuY2UgaW4gZGF5cyBpcyBjYWxjdWxhdGVkLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY2XG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzo1OTowMCBhbmQgMyBKdWx5IDIwMTEgMDA6MDE6MDA/XG4gKiB2YXIgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAzLCAwLCAxKSxcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMiwgMjMsIDU5KVxuICogKVxuICogLy89PiAxXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgc3RhcnRPZkRheUxlZnQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgc3RhcnRPZkRheVJpZ2h0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciB0aW1lc3RhbXBMZWZ0ID0gc3RhcnRPZkRheUxlZnQuZ2V0VGltZSgpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhzdGFydE9mRGF5TGVmdCk7XG4gIHZhciB0aW1lc3RhbXBSaWdodCA9IHN0YXJ0T2ZEYXlSaWdodC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlSaWdodCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSBkYXkgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSBkYXkgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKCh0aW1lc3RhbXBMZWZ0IC0gdGltZXN0YW1wUmlnaHQpIC8gTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0IGZyb20gXCJkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0XCI7XG5pbXBvcnQgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIGZyb20gJ2RhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyc7XG5cbmNvbnN0IERPTSA9ICgoKSA9PiB7XG4gIGNvbnN0IGN1c3RvbUdyb3VwcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3VzdG9tLWdyb3Vwcy1jb250YWluZXJcIik7XG4gIGNvbnN0IHRhc2tIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlbGVjdGVkLWdyb3VwXCIpO1xuICBjb25zdCB0YXNrc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stY29udGFpbmVyXCIpO1xuXG4gIHJldHVybiB7XG4gICAgY3VzdG9tR3JvdXBzLFxuICAgIHRhc2tIZWFkZXIsXG4gICAgdGFza3NMaXN0XG4gIH1cbn0pKCk7XG5cbmNvbnN0IGdyb3VwQ29udGFpbmVyID0gKCgpID0+IHtcbiAgY29uc3QgX2NsZWFyID0gKCkgPT4ge1xuICAgIHdoaWxlIChET00uY3VzdG9tR3JvdXBzLmZpcnN0Q2hpbGQpIHtcbiAgICAgIERPTS5jdXN0b21Hcm91cHMucmVtb3ZlQ2hpbGQoRE9NLmN1c3RvbUdyb3Vwcy5maXJzdENoaWxkKTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlciA9IChsaXN0KSA9PiB7XG4gICAgX2NsZWFyKCk7XG4gICAgT2JqZWN0LmtleXMobGlzdCkuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBgR3JvdXAgbmFtZTogJHtncm91cH1gKTtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY3VzdG9tLWdyb3VwXCIsIFwiZm9jdXNhYmxlXCIsIFwiZ3JvdXAtYnRuXCIpO1xuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gZ3JvdXA7XG4gICAgICBET00uY3VzdG9tR3JvdXBzLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtyZW5kZXJ9XG59KSgpO1xuXG5jb25zdCB0YXNrQ29udGFpbmVyID0gKCgpID0+IHtcbiAgY29uc3QgX2NsZWFyID0gKCkgPT4ge1xuICAgIHdoaWxlIChET00udGFza3NMaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgIERPTS50YXNrc0xpc3QucmVtb3ZlQ2hpbGQoRE9NLnRhc2tzTGlzdC5maXJzdENoaWxkKTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IF9mb3JtYXR0ZWREYXRlID0gKGRhdGUpID0+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZSgoZGF0ZSkuc3BsaXQoXCItXCIpLmpvaW4oXCIsIFwiKSk7XG4gIFxuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSBkYXRlID09PSBcIlwiOlxuICAgICAgICByZXR1cm4gXCJObyBkdWUgZGF0ZVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKG5ld0RhdGUsIG5vdykgPCAwOlxuICAgICAgICByZXR1cm4gXCJEdWUgZGF0ZSBwYXNzZWRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhuZXdEYXRlLCBub3cpID09PSAwOlxuICAgICAgICByZXR1cm4gXCJUb2RheVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKG5ld0RhdGUsIG5vdykgPT09IDE6XG4gICAgICAgIHJldHVybiBcIlRvbW9ycm93XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdERpc3RhbmNlVG9Ob3dTdHJpY3QobmV3RGF0ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgX3JlbmRlciA9ICh0YXNrLCBncm91cCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCB0YXNrSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIpO1xuICAgIHRhc2tJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtZ3JvdXBcIiwgZ3JvdXApO1xuICAgIHRhc2tJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIiwgaW5kZXgpO1xuICAgIHRhc2tJdGVtLmNsYXNzTmFtZSA9IFwidGFzay1pdGVtXCI7XG5cbiAgICBjb25zdCBwcmlvcml0eUJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHByaW9yaXR5Qm94LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgYCR7dGFzay5wcmlvcml0eX0gdGFza2ApO1xuICAgIHByaW9yaXR5Qm94LmNsYXNzTmFtZSA9IFwidGFzay1wcmlvcml0eVwiXG4gICAgaWYgKHRhc2sucHJpb3JpdHkgPT09IFwiSW1wb3J0YW50XCIpIHtcbiAgICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgIGljb24uY2xhc3NOYW1lID0gXCJtYXRlcmlhbC1pY29uc1wiO1xuICAgICAgaWNvbi50ZXh0Q29udGVudCA9IFwicHJpb3JpdHlfaGlnaFwiO1xuICAgICAgcHJpb3JpdHlCb3guYXBwZW5kQ2hpbGQoaWNvbik7XG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHN0YXR1c0JveC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiY2hlY2tib3hcIik7XG4gICAgc3RhdHVzQm94LnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLCBcImZhbHNlXCIpO1xuICAgIHN0YXR1c0JveC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgc3RhdHVzQm94LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGFzay50YXNrTmFtZSk7XG4gICAgc3RhdHVzQm94LmNsYXNzTGlzdC5hZGQoXCJ0YXNrLXN0YXR1c1wiLCBcImZvY3VzYWJsZVwiKTtcbiAgICBpZiAodGFzay5jb21wbGV0ZWQpIHtcbiAgICAgIHN0YXR1c0JveC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBcbiAgICAgIFwidXJsKGFzc2V0cy9pbWFnZXMvaWNvbnMvZG9uZS1ibGFjay0yNGRwLnN2ZylcIjtcbiAgICB9O1xuXG4gICAgY29uc3QgbmFtZUZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgbmFtZUZpZWxkLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJidXR0b25cIik7XG4gICAgbmFtZUZpZWxkLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICBuYW1lRmllbGQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBgRGV0YWlscyBmb3IgJHt0YXNrLnRhc2tOYW1lfWApO1xuICAgIG5hbWVGaWVsZC5jbGFzc0xpc3QuYWRkKFwidGFzay1uYW1lXCIsIFwiZm9jdXNhYmxlXCIpO1xuICAgIG5hbWVGaWVsZC50ZXh0Q29udGVudCA9IHRhc2sudGFza05hbWU7XG5cbiAgICBjb25zdCBkYXRlRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBkYXRlRmllbGQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcbiAgICAgICAgYER1ZSBkYXRlIGZvciB0YXNrICR7dGFzay50YXNrTmFtZX06ICR7dGFzay5kdWVEYXRlfWApO1xuICAgIGRhdGVGaWVsZC5jbGFzc05hbWUgPSBcInRhc2stZGF0ZVwiO1xuICAgIGRhdGVGaWVsZC50ZXh0Q29udGVudCA9IF9mb3JtYXR0ZWREYXRlKHRhc2suZHVlRGF0ZSk7XG5cbiAgICBjb25zdCBkZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkZXRhaWxzLnNldEF0dHJpYnV0ZShcImRhdGEtdGFza1wiLCB0YXNrLnRhc2tOYW1lKTtcbiAgICBkZXRhaWxzLnNldEF0dHJpYnV0ZShcImRhdGEtZ3JvdXBcIiwgZ3JvdXApO1xuICAgIGRldGFpbHMuc2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiLCBpbmRleCk7XG4gICAgZGV0YWlscy5jbGFzc05hbWUgPSBcInRhc2stZGV0YWlsc1wiO1xuXG4gICAgY29uc3Qgbm90ZXNGaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIG5vdGVzRmllbGQuY2xhc3NOYW1lID0gXCJ0YXNrLW5vdGVzXCI7XG4gICAgbm90ZXNGaWVsZC50ZXh0Q29udGVudCA9IHRhc2subm90ZXM7XG5cbiAgICBjb25zdCBlZGl0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBlZGl0QnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgZWRpdEJ0bi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGBFZGl0IHRhc2sgJHt0YXNrLnRhc2tOYW1lfWApO1xuICAgIGVkaXRCdG4uY2xhc3NMaXN0LmFkZChcImVkaXQtYnRuXCIsIFwiZm9jdXNhYmxlXCIpO1xuICAgIGVkaXRCdG4udGV4dENvbnRlbnQgPSBcIkVESVRcIjtcblxuICAgIGNvbnN0IGRlbGV0ZUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgZGVsZXRlQnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgZGVsZXRlQnRuLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgYERlbGV0ZSB0YXNrICR7dGFzay50YXNrTmFtZX1gKTtcbiAgICBkZWxldGVCdG4uY2xhc3NMaXN0LmFkZChcImRlbGV0ZS1idG5cIiwgXCJmb2N1c2FibGVcIik7XG4gICAgZGVsZXRlQnRuLnRleHRDb250ZW50ID0gXCJERUxFVEVcIjtcblxuICAgIGRldGFpbHMuYXBwZW5kQ2hpbGQobm90ZXNGaWVsZCk7XG4gICAgZGV0YWlscy5hcHBlbmRDaGlsZChlZGl0QnRuKTtcbiAgICBkZXRhaWxzLmFwcGVuZENoaWxkKGRlbGV0ZUJ0bik7XG4gICAgdGFza0l0ZW0uYXBwZW5kQ2hpbGQocHJpb3JpdHlCb3gpO1xuICAgIHRhc2tJdGVtLmFwcGVuZENoaWxkKHN0YXR1c0JveCk7XG4gICAgdGFza0l0ZW0uYXBwZW5kQ2hpbGQobmFtZUZpZWxkKTtcbiAgICB0YXNrSXRlbS5hcHBlbmRDaGlsZChkYXRlRmllbGQpO1xuICAgIHRhc2tJdGVtLmFwcGVuZENoaWxkKGRldGFpbHMpO1xuICAgIERPTS50YXNrc0xpc3QuYXBwZW5kQ2hpbGQodGFza0l0ZW0pO1xuICB9O1xuXG4gIGNvbnN0IGxvYWRHcm91cFRhc2tzID0gKGxpc3QsIHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IGtleUFycmF5ID0gT2JqZWN0LmtleXMobGlzdCk7XG4gICAgX2NsZWFyKCk7XG4gICAgc3dpdGNoICh0YXJnZXQpIHtcbiAgICAgIGNhc2UgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbXBvcnRhbnRcIik6XG4gICAgICAgIE9iamVjdC52YWx1ZXMobGlzdCkuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpdGVtW2ldLnByaW9yaXR5ID09PSBcIkltcG9ydGFudFwiKSB7XG4gICAgICAgICAgICAgIF9yZW5kZXIoaXRlbVtpXSwga2V5QXJyYXlbaW5kZXhdLCBpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGlzdFt0YXJnZXQudGV4dENvbnRlbnRdLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgX3JlbmRlcihpdGVtLCB0YXJnZXQudGV4dENvbnRlbnQsIGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH07XG4gICAgaWYgKERPTS50YXNrc0xpc3QuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCBoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgIGgyLnRleHRDb250ZW50ID0gXCJObyB0YXNrcyBmb3IgdGhpcyBncm91cCFcIjtcbiAgICAgIERPTS50YXNrc0xpc3QuYXBwZW5kQ2hpbGQoaDIpO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlSGVhZGVyID0gKHRhcmdldCkgPT4ge1xuICAgIERPTS50YXNrSGVhZGVyLnRleHRDb250ZW50ID0gdGFyZ2V0LnRleHRDb250ZW50O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbG9hZEdyb3VwVGFza3MsXG4gICAgdXBkYXRlSGVhZGVyXG4gIH1cbn0pKCk7XG5cbmV4cG9ydCB7IGdyb3VwQ29udGFpbmVyLCB0YXNrQ29udGFpbmVyIH0iLCJpbXBvcnQgZGlzdGFuY2VJblN0cmljdFdvcmRzIGZyb20gJy4uL2Zvcm1hdERpc3RhbmNlU3RyaWN0L2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZSBhbmQgbm93IGluIHdvcmRzLlxuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMgaW4gd29yZHMsIHVzaW5nIHN0cmljdCB1bml0cy5cbiAqIFRoaXMgaXMgbGlrZSBgZm9ybWF0RGlzdGFuY2VgLCBidXQgZG9lcyBub3QgdXNlIGhlbHBlcnMgbGlrZSAnYWxtb3N0JywgJ292ZXInLFxuICogJ2xlc3MgdGhhbicgYW5kIHRoZSBsaWtlLlxuICpcbiAqIHwgRGlzdGFuY2UgYmV0d2VlbiBkYXRlcyB8IFJlc3VsdCAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgLi4uIDU5IHNlY3MgICAgICAgICAgfCBbMC4uNTldIHNlY29uZHMgICAgIHxcbiAqIHwgMSAuLi4gNTkgbWlucyAgICAgICAgICB8IFsxLi41OV0gbWludXRlcyAgICAgfFxuICogfCAxIC4uLiAyMyBocnMgICAgICAgICAgIHwgWzEuLjIzXSBob3VycyAgICAgICB8XG4gKiB8IDEgLi4uIDI5IGRheXMgICAgICAgICAgfCBbMS4uMjldIGRheXMgICAgICAgIHxcbiAqIHwgMSAuLi4gMTEgbW9udGhzICAgICAgICB8IFsxLi4xMV0gbW9udGhzICAgICAgfFxuICogfCAxIC4uLiBOIHllYXJzICAgICAgICAgIHwgWzEuLk5dICB5ZWFycyAgICAgICB8XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYWRkU3VmZml4PWZhbHNlXSAtIHJlc3VsdCBpbmRpY2F0ZXMgaWYgdGhlIHNlY29uZCBkYXRlIGlzIGVhcmxpZXIgb3IgbGF0ZXIgdGhhbiB0aGUgZmlyc3RcbiAqIEBwYXJhbSB7J3NlY29uZCd8J21pbnV0ZSd8J2hvdXInfCdkYXknfCdtb250aCd8J3llYXInfSBbb3B0aW9ucy51bml0XSAtIGlmIHNwZWNpZmllZCwgd2lsbCBmb3JjZSBhIHVuaXRcbiAqIEBwYXJhbSB7J2Zsb29yJ3wnY2VpbCd8J3JvdW5kJ30gW29wdGlvbnMucm91bmRpbmdNZXRob2Q9J3JvdW5kJ10gLSB3aGljaCB3YXkgdG8gcm91bmQgcGFydGlhbCB1bml0c1xuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZGlzdGFuY2UgaW4gd29yZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdERpc3RhbmNlYCBwcm9wZXJ0eVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAxIEphbnVhcnkgMjAxNSwgd2hhdCBpcyB0aGUgZGlzdGFuY2UgdG8gMiBKdWx5IDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VUb05vd1N0cmljdChcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMilcbiAqIClcbiAqIC8vPT4gJzYgbW9udGhzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiBub3cgaXMgMSBKYW51YXJ5IDIwMTUgMDA6MDA6MDAsXG4gKiAvLyB3aGF0IGlzIHRoZSBkaXN0YW5jZSB0byAxIEphbnVhcnkgMjAxNSAwMDowMDoxNSwgaW5jbHVkaW5nIHNlY29uZHM/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VUb05vd1N0cmljdChcbiAqICAgbmV3IERhdGUoMjAxNSwgMCwgMSwgMCwgMCwgMTUpXG4gKiApXG4gKiAvLz0+ICcyMCBzZWNvbmRzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAxIEphbnVhcnkgMjAxNSxcbiAqIC8vIHdoYXQgaXMgdGhlIGRpc3RhbmNlIHRvIDEgSmFudWFyeSAyMDE2LCB3aXRoIGEgc3VmZml4P1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlVG9Ob3dTdHJpY3QoXG4gKiAgIG5ldyBEYXRlKDIwMTYsIDAsIDEpLFxuICogICB7YWRkU3VmZml4OiB0cnVlfVxuICogKVxuICogLy89PiAnaW4gMSB5ZWFyJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAyOCBKYW51YXJ5IDIwMTUsXG4gKiAvLyB3aGF0IGlzIHRoZSBkaXN0YW5jZSB0byAxIEphbnVhcnkgMjAxNSwgaW4gbW9udGhzLCByb3VuZGVkIHVwPz9cbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0KG5ldyBEYXRlKDIwMTUsIDAsIDEpLCB7XG4gKiAgIHVuaXQ6ICdtb250aCcsXG4gKiAgIHJvdW5kaW5nTWV0aG9kOiAnY2VpbCdcbiAqIH0pXG4gKiAvLz0+ICcxIG1vbnRoJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAxIEphbnVhcnkgMjAxNSxcbiAqIC8vIHdoYXQgaXMgdGhlIGRpc3RhbmNlIHRvIDEgQXVndXN0IDIwMTYgaW4gRXNwZXJhbnRvP1xuICogdmFyIGVvTG9jYWxlID0gcmVxdWlyZSgnZGF0ZS1mbnMvbG9jYWxlL2VvJylcbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0KFxuICogICBuZXcgRGF0ZSgyMDE2LCA3LCAxKSxcbiAqICAge2xvY2FsZTogZW9Mb2NhbGV9XG4gKiApXG4gKiAvLz0+ICcxIGphcm8nXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2VUb05vd1N0cmljdChkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGRpc3RhbmNlSW5TdHJpY3RXb3JkcyhkaXJ0eURhdGUsIERhdGUubm93KCksIGRpcnR5T3B0aW9ucyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGdlbmVyYWxNb2RhbCwgdGFza01vZGFsIH0gZnJvbSBcIi4vbW9kYWxzXCI7XG5pbXBvcnQgeyBncm91cENvbnRhaW5lciwgdGFza0NvbnRhaW5lciB9IGZyb20gXCIuL3JlbmRlci1jb250YWluZXJzXCI7XG5cbmNvbnN0IERPTSA9ICgoKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRHcm91cHMgPSBbXCJJbXBvcnRhbnRcIiwgXCJOZXh0IDcgRGF5c1wiLCBcIkxhdGVyXCIsIFwiRXZlbnR1YWxseVwiXTtcbiAgY29uc3QgZ3JvdXBCdXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImdyb3VwLWJ0blwiKTtcbiAgY29uc3QgbW9kYWxCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWJveFwiKTtcbiAgY29uc3QgbmF2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluLW5hdlwiKTtcbiAgY29uc3QgdGFza0hlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VsZWN0ZWQtZ3JvdXBcIik7XG4gIGNvbnN0IHRhc2tMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50YXNrLWNvbnRhaW5lclwiKTtcblxuICByZXR1cm4ge1xuICAgIGRlZmF1bHRHcm91cHMsXG4gICAgZ3JvdXBCdXR0b25zLFxuICAgIG5hdixcbiAgICBtb2RhbEJveCxcbiAgICB0YXNrSGVhZGVyLFxuICAgIHRhc2tMaXN0XG4gIH1cbn0pKCk7XG5cbmNvbnN0IHRvRG8gPSAoKCkgPT4ge1xuICBjb25zdCBfYWN0aXZlT25Mb2FkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbXBvcnRhbnRcIik7XG5cbiAgY29uc3QgbWFzdGVyTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b0RvLWxpc3RcIikpIHx8IFxuICAgIHtcbiAgICAgIEV4YW1wbGU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRhc2tOYW1lOiBcIkRvIHRoZSBkaXNoZXNcIixcbiAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgIHByaW9yaXR5OiBcIk5vcm1hbFwiLFxuICAgICAgICAgIGR1ZURhdGU6IFwiXCIsXG4gICAgICAgICAgbm90ZXM6XG4gICAgICAgICAgICBcIkxldCB0aGUgcGFucyBzb2FrLCBwdXQgdGhlIHBsYXRlcyBpbiB0aGUgZGlzaHdhc2hlciwgd2FzaCB0aGUgbXVncyBieSBoYW5kLlxcblxcbldhc2ggcGFucyBhZnRlciAzMCBtaW51dGVzIHNvYWtpbmcuXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0YXNrTmFtZTogXCJCcmluZyBNdWZmaW4gdG8gdmV0XCIsXG4gICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICBwcmlvcml0eTogXCJJbXBvcnRhbnRcIixcbiAgICAgICAgICBkdWVEYXRlOiBcIjIwMjEtMDMtMDVcIixcbiAgICAgICAgICBub3RlczogXCJQYWNrIGhlciBmYXZvcml0ZSB0b3kgc28gc2hlIHN0YXlzIGNhbG0uXCIsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG5cbiAgY29uc3Qgc2F2ZVRvTG9jYWwgPSAoKSA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0b0RvLWxpc3RcIiwgSlNPTi5zdHJpbmdpZnkobGlzdCkpO1xuICB9O1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoZSkgPT4ge1xuICAgIHRhc2tDb250YWluZXIubG9hZEdyb3VwVGFza3MobWFzdGVyTGlzdCwgX2FjdGl2ZU9uTG9hZCk7XG4gICAgZ3JvdXBDb250YWluZXIucmVuZGVyKG1hc3Rlckxpc3QpO1xuICB9KTtcblxuICByZXR1cm4geyBcbiAgICBtYXN0ZXJMaXN0LFxuICAgIHNhdmVUb0xvY2FsXG4gIH1cbn0pKCk7XG5cbmNvbnN0IGdyb3VwcyA9ICgoKSA9PiB7XG4gIGNvbnN0IGNyZWF0ZSA9IChuYW1lKSA9PiB7XG4gICAgdG9Eby5tYXN0ZXJMaXN0W25hbWVdID0gW107XG4gICAgY29uc29sZS5sb2codG9Eby5tYXN0ZXJMaXN0KTtcbiAgfTtcblxuICBjb25zdCB1cGRhdGUgPSAob2xkTmFtZSwgbmV3TmFtZSkgPT4ge1xuICAgIGRlbGV0ZSBPYmplY3QuYXNzaWduKHRvRG8ubWFzdGVyTGlzdCwge1tuZXdOYW1lXTogdG9Eby5tYXN0ZXJMaXN0W29sZE5hbWVdfSlbb2xkTmFtZV07XG4gICAgY29uc29sZS5sb2codG9Eby5tYXN0ZXJMaXN0KTtcbiAgfTtcblxuICBjb25zdCBjaGVja05hbWUgPSAobmFtZSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBET00uZGVmYXVsdEdyb3Vwcy5pbmRleE9mKG5hbWUpID49IDAgfHxcbiAgICAgIE9iamVjdC5rZXlzKHRvRG8ubWFzdGVyTGlzdCkuaW5kZXhPZihuYW1lKSA+PSAwIHx8XG4gICAgICBuYW1lLm1hdGNoKC9eXFxzezEsfSQvKSB8fFxuICAgICAgbmFtZSA9PT0gXCJcIlxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgcmVtb3ZlID0gKG5hbWUpID0+IHtcbiAgICBkZWxldGUgdG9Eby5tYXN0ZXJMaXN0W25hbWVdO1xuICAgIGNvbnNvbGUubG9nKHRvRG8ubWFzdGVyTGlzdCk7XG4gIH07XG5cbiAgY29uc3Qgc2V0SW5hY3RpdmUgPSAoKSA9PiB7XG4gICAgQXJyYXkuZnJvbShkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZ3JvdXAtYnRuXCIpKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBzZXRBY3RpdmUgPSAodGFyZ2V0KSA9PiB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gIH07XG5cbiAgRE9NLm5hdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZ3JvdXAtYnRuXCIpKSB7XG4gICAgICBzZXRJbmFjdGl2ZSgpO1xuICAgICAgc2V0QWN0aXZlKGUudGFyZ2V0KTtcbiAgICAgIHRhc2tDb250YWluZXIudXBkYXRlSGVhZGVyKGUudGFyZ2V0KTtcbiAgICAgIHRhc2tDb250YWluZXIubG9hZEdyb3VwVGFza3ModG9Eby5tYXN0ZXJMaXN0LCBlLnRhcmdldCk7XG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjaGVja05hbWUsXG4gICAgY3JlYXRlLFxuICAgIHVwZGF0ZSxcbiAgICByZW1vdmUsXG4gICAgc2V0QWN0aXZlLFxuICAgIHNldEluYWN0aXZlXG4gIH1cbn0pKCk7XG5cbmNvbnN0IHRhc2tzID0gKCgpID0+IHtcbiAgY29uc3QgY3JlYXRlID0gKHRhc2tOYW1lLCBwcmlvcml0eSwgZHVlRGF0ZSwgbm90ZXMsIGNvbXBsZXRlZCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0YXNrTmFtZSxcbiAgICAgIHByaW9yaXR5LFxuICAgICAgZHVlRGF0ZSxcbiAgICAgIG5vdGVzLFxuICAgICAgY29tcGxldGVkXG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCBncm91cFJlZiA9IERPTS5tb2RhbEJveC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWdyb3VwLXJlZlwiKTtcbiAgICBjb25zdCB0YXNrUmVmID0gRE9NLm1vZGFsQm94LmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXgtcmVmXCIpO1xuXG4gICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwUmVmXVt0YXNrUmVmXS50YXNrTmFtZSA9IFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hbWUtaW5wdXRcIikudmFsdWU7XG4gICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwUmVmXVt0YXNrUmVmXS5wcmlvcml0eSA9IFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByaW9yaXR5LXNlbGVjdFwiKS52YWx1ZTtcbiAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBSZWZdW3Rhc2tSZWZdLmR1ZURhdGUgPSBcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkYXRlLXNlbGVjdFwiKS52YWx1ZTtcbiAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBSZWZdW3Rhc2tSZWZdLm5vdGVzID0gXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZXMtaW5wdXRcIikudmFsdWU7XG4gIH07XG5cbiAgY29uc3QgY2hlY2tOYW1lID0gKG5hbWUpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgbmFtZS5tYXRjaCgvXlxcc3sxLH0kLykgfHxcbiAgICAgIG5hbWUgPT09IFwiXCJcbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZVNpbmdsZSA9IChub2RlKSA9PiB7XG4gICAgdG9Eby5tYXN0ZXJMaXN0W25vZGUuZGF0YXNldC5ncm91cF0uc3BsaWNlKG5vZGUuZGF0YXNldC5pbmRleCwgMSk7XG4gICAgbm9kZS5yZW1vdmUoKTtcbiAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUNvbXBsZXRlZCA9IChncm91cCkgPT4ge1xuICAgIGlmIChET00uZGVmYXVsdEdyb3Vwcy5pbmRleE9mKGdyb3VwKSA+PSAwKSB7XG4gICAgICBjb25zdCBrZXlBcnJheSA9IE9iamVjdC5rZXlzKHRvRG8ubWFzdGVyTGlzdCk7XG4gICAgICBPYmplY3QudmFsdWVzKHRvRG8ubWFzdGVyTGlzdCkuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IChpdGVtLmxlbmd0aCAtIDEpOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChpdGVtW2ldLmNvbXBsZXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2tleUFycmF5W2luZGV4XV0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwXS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAodG9Eby5tYXN0ZXJMaXN0W2dyb3VwXS5sZW5ndGggLSAxKTsgaSA+PSAwIDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uY29tcGxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBdLnNwbGljZShpLCAxKVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IGNvbmZpcm1NYXNzUmVtb3ZlID0gKCkgPT4ge1xuICAgIGlmIChET00uZGVmYXVsdEdyb3Vwcy5pbmRleE9mKERPTS50YXNrSGVhZGVyLnRleHRDb250ZW50KSA+PSAwKSB7XG4gICAgICByZXR1cm4gY29uZmlybShgVGhpcyB3aWxsIGRlbGV0ZSBhbGwgY29tcGxldGVkIHRhc2tzIGluIGV2ZXJ5IGdyb3VwLlxcblxcblBsZWFzZSBjbGljayBcIk9LXCIgdG8gY29uZmlybSBkZWxldGlvbi5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbmZpcm0oYFRoaXMgd2lsbCBkZWxldGUgYWxsIGNvbXBsZXRlZCB0YXNrcyBpbiB0aGUgJHtET00udGFza0hlYWRlci50ZXh0Q29udGVudH0gZ3JvdXAuXFxuXFxuUGxlYXNlIGNsaWNrIFwiT0tcIiB0byBjb25maXJtIGRlbGV0aW9uLmApO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgX2NoYW5nZVN0YXR1cyA9IChub2RlKSA9PiB7XG4gICAgY29uc3QgZ3JvdXBEYXRhID0gbm9kZS5kYXRhc2V0Lmdyb3VwO1xuICAgIGNvbnN0IHRhc2tJbmRleCA9IG5vZGUuZGF0YXNldC5pbmRleDtcblxuICAgIGlmIChub2RlLmNoaWxkcmVuWzFdLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpID09PSBudWxsKSB7XG4gICAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBEYXRhXVt0YXNrSW5kZXhdLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICBub2RlLmNoaWxkcmVuWzFdLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFxuICAgICAgICAgIFwidXJsKGFzc2V0cy9pbWFnZXMvaWNvbnMvZG9uZS1ibGFjay0yNGRwLnN2ZylcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgIG5vZGUuY2hpbGRyZW5bMV0ucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICB9O1xuXG4gIGNvbnN0IF9nZXRJbmZvID0gKG5vZGUpID0+IHtcbiAgICBjb25zdCBncm91cERhdGEgPSBub2RlLmRhdGFzZXQuZ3JvdXA7XG4gICAgY29uc3QgdGFza0luZGV4ID0gbm9kZS5kYXRhc2V0LmluZGV4O1xuICAgIC8vIHN0b3JlIHJlZmVyZW5jZSB0byBncm91cCBhbmQgaW5kZXggb2YgdGFzayBiZWluZyB1cGRhdGVkXG4gICAgRE9NLm1vZGFsQm94LmRhdGFzZXQuaW5kZXhSZWYgPSB0YXNrSW5kZXg7XG4gICAgRE9NLm1vZGFsQm94LmRhdGFzZXQuZ3JvdXBSZWYgPSBncm91cERhdGE7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hbWUtaW5wdXRcIikudmFsdWUgPSBcbiAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS50YXNrTmFtZTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dyb3VwLXNlbGVjdFwiKS52YWx1ZSA9IGdyb3VwRGF0YTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByaW9yaXR5LXNlbGVjdFwiKS52YWx1ZSA9IFxuICAgICAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBEYXRhXVt0YXNrSW5kZXhdLnByaW9yaXR5O1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGF0ZS1zZWxlY3RcIikudmFsdWUgPSBcbiAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS5kdWVEYXRlO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZXMtaW5wdXRcIikudmFsdWUgPSBcbiAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS5ub3RlcztcbiAgfTtcblxuICBjb25zdCBfY2hlY2tUYXNrRXZlbnQgPSAoZSkgPT4ge1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YXNrLXN0YXR1c1wiKTpcbiAgICAgICAgX2NoYW5nZVN0YXR1cyhlLnRhcmdldC5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgLy8gdG9Eby5zYXZlVG9Mb2NhbCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFzay1uYW1lXCIpOlxuICAgICAgICAvLyB0b2dnbGUncyB0YXNrIGl0ZW0ncyBkZXRhaWxzIHNlY3Rpb25cbiAgICAgICAgZS50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbls0XS5jbGFzc0xpc3QudG9nZ2xlKFwiZXhwYW5kZWRcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJlZGl0LWJ0blwiKTpcbiAgICAgICAgdGFza01vZGFsLnJlbmRlcihlLCBPYmplY3Qua2V5cyh0b0RvLm1hc3Rlckxpc3QpKTtcbiAgICAgICAgX2dldEluZm8oZS50YXJnZXQucGFyZW50RWxlbWVudCk7XG4gICAgICAgIGdlbmVyYWxNb2RhbC5vbk9wZW4oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImRlbGV0ZS1idG5cIik6XG4gICAgICAgIGlmIChjb25maXJtKGBQbGVhc2UgY2xpY2sgXCJPS1wiIHRvIGNvbmZpcm0gZGVsZXRpb24gb2YgdGFzayBcbiAgICAgICAgICAgIFwiJHtlLnRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQudGFza31cIi5gKSkge1xuICAgICAgICAgIHJlbW92ZVNpbmdsZShlLnRhcmdldC5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICAvLyB0b0RvLnNhdmVUb0xvY2FsKCk7XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH07XG4gIH1cblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC10YXNrLWJ0blwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBpZiAoT2JqZWN0LmtleXModG9Eby5tYXN0ZXJMaXN0KS5sZW5ndGggPT09IDApIHtcbiAgICAgIGFsZXJ0KFwiTm8gZ3JvdXBzIGV4aXN0LiBQbGVhc2UgY3JlYXRlIGEgZ3JvdXAgYmVmb3JlIGFkZGluZyBhIHRhc2suXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXNrTW9kYWwucmVuZGVyKGUsIE9iamVjdC5rZXlzKHRvRG8ubWFzdGVyTGlzdCkpO1xuICAgICAgZ2VuZXJhbE1vZGFsLm9uT3BlbigpO1xuICAgIH07XG4gIH0pO1xuXG4gIERPTS50YXNrTGlzdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX2NoZWNrVGFza0V2ZW50KTtcbiAgRE9NLnRhc2tMaXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XG4gICAgaWYgKGUua2V5ID09PSBcIiBcIikgX2NoZWNrVGFza0V2ZW50KGUpO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGNoZWNrTmFtZSxcbiAgICBjb25maXJtTWFzc1JlbW92ZSxcbiAgICBjcmVhdGUsXG4gICAgcmVtb3ZlQ29tcGxldGVkLFxuICAgIHJlbW92ZVNpbmdsZSxcbiAgICB1cGRhdGVcbiAgfVxufSkoKTtcblxuY29uc3QgbW9kYWxFdmVudHMgPSAoKCkgPT4ge1xuICBET00ubW9kYWxCb3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lLWlucHV0XCIpO1xuXG4gICAgc3dpdGNoIChlLnRhcmdldCkge1xuICAgICAgY2FzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN1Ym1pdC1ncm91cC1idG5cIik6XG4gICAgICBjYXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudXBkYXRlLWdyb3VwLWJ0blwiKTpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoZ3JvdXBzLmNoZWNrTmFtZShuYW1lSW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgYWxlcnQoXCJHcm91cCBuYW1lIGNhbm5vdCBiZSBibGFuayBhbmQgY2Fubm90IGFscmVhZHkgYmUgdGFrZW4uXFxuXFxuUGxlYXNlIGVudGVyIGEgbmV3IG5hbWUuXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic3VibWl0LWdyb3VwLWJ0blwiKSkge1xuICAgICAgICAgICAgZ3JvdXBzLmNyZWF0ZShuYW1lSW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgZ3JvdXBDb250YWluZXIucmVuZGVyKHRvRG8ubWFzdGVyTGlzdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdyb3Vwcy51cGRhdGUoRE9NLnRhc2tIZWFkZXIudGV4dENvbnRlbnQsIG5hbWVJbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFjdGl2ZVwiKS50ZXh0Q29udGVudCA9IG5hbWVJbnB1dC52YWx1ZTtcbiAgICAgICAgICAgIHRhc2tDb250YWluZXIudXBkYXRlSGVhZGVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWN0aXZlXCIpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAgIC8vIHRvRG8uc2F2ZVRvTG9jYWwoKTtcbiAgICAgICAgICBnZW5lcmFsTW9kYWwub25DbG9zZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kZWxldGUtZ3JvdXAtYnRuXCIpOlxuICAgICAgICBpZiAoY29uZmlybShgVGhpcyB3aWxsIGRlbGV0ZSB0aGUgJHtET00udGFza0hlYWRlci50ZXh0Q29udGVudH0gZ3JvdXAsIGFsb25nIHdpdGggYW55IHRhc2tzIHdpdGhpbiBpdC5cXG5cXG5QbGVhc2UgY2xpY2sgXCJPS1wiIHRvIGNvbmZpcm0gZGVsZXRpb24uYCkpIHtcbiAgICAgICAgICBncm91cHMucmVtb3ZlKERPTS50YXNrSGVhZGVyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAvLyB0b0RvLnNhdmVUb0xvY2FsKCk7XG4gICAgICAgICAgZ2VuZXJhbE1vZGFsLm9uQ2xvc2UoKTtcbiAgICAgICAgICBncm91cENvbnRhaW5lci5yZW5kZXIodG9Eby5tYXN0ZXJMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGVsZXRlLWNvbXBsZXRlZC1idG5cIik6XG4gICAgICAgIGlmICh0YXNrcy5jb25maXJtTWFzc1JlbW92ZSgpKSB7XG4gICAgICAgICAgdGFza3MucmVtb3ZlQ29tcGxldGVkKERPTS50YXNrSGVhZGVyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAvLyB0b0RvLnNhdmVUb0xvY2FsKCk7XG4gICAgICAgICAgZ2VuZXJhbE1vZGFsLm9uQ2xvc2UoKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtc2luZ2xlLWJ0blwiKTpcbiAgICAgIGNhc2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtbWFueS1idG5cIik6XG4gICAgICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNncm91cC1zZWxlY3RcIik7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRhc2tzLmNoZWNrTmFtZShuYW1lSW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgYWxlcnQoXCJUYXNrIG5hbWUgY2Fubm90IGJlIGJsYW5rLlxcblxcblBsZWFzZSBlbnRlciBhIG5ldyBuYW1lLlwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV3VGFzayA9IHRhc2tzLmNyZWF0ZShcbiAgICAgICAgICAgIG5hbWVJbnB1dC52YWx1ZSxcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJpb3JpdHktc2VsZWN0XCIpLnZhbHVlLFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkYXRlLXNlbGVjdFwiKS52YWx1ZSxcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZXMtaW5wdXRcIikudmFsdWUsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICk7XG4gICAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwLnZhbHVlXS5wdXNoKG5ld1Rhc2spO1xuICAgICAgICAgIC8vIHRvRG8uc2F2ZVRvTG9jYWwoKTtcbiAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWRkLW1hbnktYnRuXCIpKSB7XG4gICAgICAgICAgICBuYW1lSW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgIG5hbWVJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICBncm91cC5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJpb3JpdHktc2VsZWN0XCIpLnZhbHVlID0gXCJOb3JtYWxcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGF0ZS1zZWxlY3RcIikudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNub3Rlcy1pbnB1dFwiKS52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi51cGRhdGUtdGFzay1idG5cIik6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRhc2tzLmNoZWNrTmFtZShuYW1lSW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgYWxlcnQoXCJUYXNrIG5hbWUgY2Fubm90IGJlIGJsYW5rLlxcblxcblBsZWFzZSBlbnRlciBhIG5ldyBuYW1lLlwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFza3MudXBkYXRlKCk7XG4gICAgICAgICAgLy8gdG9Eby5zYXZlVG9Mb2NhbCgpO1xuICAgICAgICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gICAgICAgICAgY29uc29sZS5sb2codG9Eby5tYXN0ZXJMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgfSk7XG59KSgpO1xuXG5leHBvcnQgeyBncm91cHMsIG1vZGFsRXZlbnRzLCB0YXNrcywgdG9EbyB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IHsgYWNjZXNzaWJpbGl0eU9wdGlvbnMsIGRpc3BsYXlPcHRpb25zIH0gZnJvbSBcIi4vc2l0ZS1zZXR0aW5nc1wiO1xuaW1wb3J0IHsgZ3JvdXBNb2RhbCwgd2FybmluZ01vZGFsIH0gZnJvbSBcIi4vbW9kYWxzXCI7XG5pbXBvcnQgeyBncm91cHMsIG1vZGFsRXZlbnRzLCB0YXNrcywgdG9EbyB9IGZyb20gXCIuL2xvZ2ljXCI7XG5pbXBvcnQgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIGZyb20gJ2RhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cydcbmltcG9ydCBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0IGZyb20gXCJkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0XCI7XG5cbmNvbnNvbGUubG9nKHRvRG8ubWFzdGVyTGlzdCk7XG5cbmNvbnN0IERPTSA9ICgoKSA9PiB7XG4gIGNvbnN0IG1lbnVDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW4tbmF2XCIpO1xuICBjb25zdCBtZW51T3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudS1idXR0b25cIik7XG4gIGNvbnN0IG1lbnVDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudS1jbG9zZS1idXR0b25cIik7XG4gIFxuICByZXR1cm4ge1xuICAgIG1lbnVDb250YWluZXIsXG4gICAgbWVudU9wZW5CdXR0b24sXG4gICAgbWVudUNsb3NlQnV0dG9uXG4gIH1cbn0pKCk7XG5cbmNvbnN0IG1lbnVWaXNpYmlsaXR5ID0gKCgpID0+IHtcbiAgY29uc3QgX29uU2NyZWVuU2l6ZSA9ICgpID0+IHtcbiAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoID4gNzYzKSB7XG4gICAgICBET00ubWVudUNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gICAgICBET00ubWVudUNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIERPTS5tZW51Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgRE9NLm1lbnVDb250YWluZXIuc3R5bGUubGVmdCA9IFwiLTgwMHB4XCI7XG4gICAgfTtcbiAgfTtcbiAgXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIF9vblNjcmVlblNpemUpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgX29uU2NyZWVuU2l6ZSk7XG5cbiAgY29uc3QgX3RvZ2dsZU1lbnUgPSAoKSA9PiB7XG4gICAgaWYgKERPTS5tZW51Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPT09IFwiaGlkZGVuXCIpIHtcbiAgICAgIERPTS5tZW51Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICAgIERPTS5tZW51Q29udGFpbmVyLnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgIERPTS5tZW51Q2xvc2VCdXR0b24uZm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NLm1lbnVDb250YWluZXIuc3R5bGUubGVmdCA9IFwiLTgwMHB4XCI7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgRE9NLm1lbnVDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCJcbiAgICAgIH0sIDYwMCk7XG4gICAgICBET00ubWVudU9wZW5CdXR0b24uZm9jdXMoKTtcbiAgICB9O1xuICB9O1xuXG4gIERPTS5tZW51T3BlbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3RvZ2dsZU1lbnUpO1xuICBET00ubWVudUNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfdG9nZ2xlTWVudSk7XG59KSgpOyJdLCJzb3VyY2VSb290IjoiIn0=