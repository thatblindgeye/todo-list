!function(){"use strict";const e={accessibilityContainer:document.querySelector("#accessibility-container"),animationSwitch:document.querySelector("#animation-switch"),githubLogo:document.querySelector("#lower-nav img"),themeSwitch:document.querySelector("#theme-switch")},t=()=>{localStorage.setItem("theme",document.documentElement.getAttribute("theme")),localStorage.setItem("animations-enabled",e.animationSwitch.getAttribute("aria-checked"))},n=((()=>{const n=e=>{"light"===document.documentElement.getAttribute("theme")?a():o(),t()},a=()=>{e.themeSwitch.setAttribute("aria-checked","false"),document.documentElement.setAttribute("theme","dark"),e.themeSwitch.style.backgroundPosition="center bottom -0.8rem",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-Light-32px.png")},o=()=>{e.themeSwitch.setAttribute("aria-checked","true"),document.documentElement.setAttribute("theme","light"),e.themeSwitch.style.backgroundPosition="center top 2px",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-32px.png")};e.themeSwitch.addEventListener("click",n),e.themeSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"light"===localStorage.getItem("theme")?o():a()}))})(),(()=>{const n=()=>{"true"===e.animationSwitch.getAttribute("aria-checked")?o():a(),t()},a=()=>{e.animationSwitch.setAttribute("aria-checked","true"),document.documentElement.style.scrollBehavior="smooth",e.accessibilityContainer.style.transition="top 0.75s ease-in-out",e.animationSwitch.textContent="Animations Enabled",e.themeSwitch.style.transition="background-position 0.3s ease-in",document.querySelector("#main-nav").style.transition="left 0.5s",Array.from(document.querySelectorAll(".label-arrow")).forEach((e=>{e.style.transition="transform 0.75s"}))},o=()=>{e.animationSwitch.setAttribute("aria-checked","false"),document.documentElement.style.scrollBehavior="auto",e.animationSwitch.setAttribute("aria-checked","false"),e.animationSwitch.textContent="Animations Disabled",Array.from(document.querySelectorAll(".animated")).forEach((e=>{e.style.transition="none"}))};return e.animationSwitch.addEventListener("click",n),e.animationSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"false"===localStorage.getItem("animations-enabled")?o():a()})),{animationsEnabled:a,animationsDisabled:o}})()),a={addGroupBtn:document.querySelector(".add-group-btn"),defaultGroups:["Important","Next 7 Days","Later","Eventually"],groupButtons:document.getElementsByClassName("group-btn"),groupOptionBtn:document.querySelector(".group-option-btn"),modalBox:document.querySelector(".modal-box"),modalContainer:document.querySelector(".modal-container"),selectedGroup:document.querySelector(".selected-group")},o=(()=>{const e=()=>{for(;a.modalBox.firstChild;)a.modalBox.removeChild(a.modalBox.firstChild);a.modalContainer.style.display="none",a.modalBox.dataset.indexRef="",a.modalBox.dataset.groupRef=""};return window.addEventListener("keydown",(t=>{"Escape"===t.key&&e()})),{createCloseBtn:()=>{const e=document.createElement("button");e.setAttribute("type","button"),e.setAttribute("aria-label","Close modal"),e.classList.add("modal-close-button","close-btn","focusable"),e.addEventListener("click",o.onClose),a.modalBox.appendChild(e)},onClose:e,onOpen:()=>{a.modalContainer.style.display="flex",document.querySelector(".modal-close-button").focus()}}})(),r=((()=>{const e=e=>{e.target.classList.contains("disable-button")?n.animationsDisabled():e.target.classList.contains("enable-button")&&n.animationsEnabled(),t(),o.onClose()};window.addEventListener("load",(()=>{0===localStorage.length&&(()=>{const t=document.createElement("h1");t.textContent="This site uses minimal animation effects.";const n=document.createElement("p");n.textContent="Effects include moving menus and smooth scrolling. If you suffer from a vestibular disorder or otherwise prefer no animations, you can turn them off by clicking the first button below.";const o=document.createElement("p");o.textContent="You can later change this setting in the Display & Accessibility tab at the top of the page.";const r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("disable-button","focusable","primary-btn"),r.textContent="DISABLE ANIMATIONS",r.addEventListener("click",e);const i=document.createElement("button");i.setAttribute("type","button"),i.classList.add("enable-button","focusable","secondary-btn"),i.textContent="ENABLE ANIMATIONS",i.addEventListener("click",e),a.modalBox.appendChild(t),a.modalBox.appendChild(n),a.modalBox.appendChild(o),a.modalBox.appendChild(r),a.modalBox.appendChild(i),a.modalContainer.style.display="flex"})()}))})(),(()=>{const e=e=>{const t=document.createElement("form"),n=document.createElement("fieldset"),r=document.createElement("legend"),i=document.createElement("div"),s=document.createElement("input"),u=document.createElement("label");u.setAttribute("for","name-input"),u.textContent="Group Name";const l=document.createElement("input");if(l.setAttribute("type","text"),l.setAttribute("required","true"),l.setAttribute("id","name-input"),l.setAttribute("autocomplete","off"),l.classList.add("focusable"),e.target.classList.contains("add-group-btn"))r.textContent="Add a Group",s.setAttribute("type","submit"),s.setAttribute("value","ADD GROUP"),s.classList.add("submit-group-btn","primary-btn","focusable","submit"),i.appendChild(s);else if(e.target.classList.contains("group-option-btn")){r.textContent="Group Options",s.setAttribute("type","submit"),s.setAttribute("value","UPDATE"),s.classList.add("update-group-btn","secondary-btn","focusable","submit");const e=document.createElement("button");e.setAttribute("type","button"),e.classList.add("delete-group-btn","delete-btn","focusable"),e.textContent="DELETE GROUP";const t=document.createElement("button");t.setAttribute("type","button"),t.classList.add("delete-completed-btn","delete-btn","focusable"),t.textContent="DELETE COMPLETED TASKS",a.defaultGroups.indexOf(a.selectedGroup.textContent)>=0&&(u.style.opacity="0.38",l.setAttribute("disabled","true"),l.style.opacity="0.38",s.setAttribute("disabled","true"),s.style.opacity="0.38",e.setAttribute("disabled","true"),e.style.opacity="0.38"),i.appendChild(s),i.appendChild(e),i.appendChild(t)}n.appendChild(r),n.appendChild(u),n.appendChild(l),n.appendChild(i),t.appendChild(n),o.createCloseBtn(),a.modalBox.appendChild(t)};a.groupOptionBtn.addEventListener("click",(t=>{e(t),o.onOpen()})),a.addGroupBtn.addEventListener("click",(t=>{e(t),o.onOpen()}))})(),(()=>{const e=["Normal","Importan"];return{render:(t,n)=>{const r=document.createElement("form"),i=document.createElement("fieldset"),s=document.createElement("legend"),u=document.createElement("div"),l=document.createElement("label");l.setAttribute("for","name-input"),l.textContent="Task Name (required)";const d=document.createElement("input");d.setAttribute("type","text"),d.setAttribute("id","name-input"),d.setAttribute("placeholder","Enter a task name"),d.setAttribute("required","true"),d.setAttribute("autocomplete","off"),d.className="focusable";const c=document.createElement("label");c.setAttribute("for","group-select"),c.textContent="Group";const m=document.createElement("select");m.setAttribute("id","group-select"),m.className="focusable";for(let e=0;e<n.length;e++){const t=document.createElement("option");t.setAttribute("value",n[e]),t.textContent=n[e],m.appendChild(t)}const h=document.createElement("label");h.setAttribute("for","priority-select"),h.textContent="Priority";const p=document.createElement("select");p.setAttribute("id","priority-select"),p.className="focusable";for(let t=0;t<e.length;t++){const n=document.createElement("option");n.setAttribute("value",e[t]),n.textContent=e[t],p.appendChild(n)}const b=document.createElement("label");b.setAttribute("for","date-select"),b.textContent="Due Date (optional)";const f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("id","date-select"),f.className="focusable";const g=document.createElement("label");g.setAttribute("for","notes-input"),g.textContent="Additional Notes";const y=document.createElement("textarea");if(y.setAttribute("id","notes-input"),y.setAttribute("placeholder","Enter any additional notes for the task"),y.className="focusable",t.target.textContent.includes("ADD TASK")){s.textContent="Add a Task";const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","ADD ONE"),e.setAttribute("aria-label","Add task and close modal"),e.classList.add("add-single-btn","primary-btn","submit","focusable");const t=document.createElement("input");t.setAttribute("type","submit"),t.setAttribute("value","ADD MANY"),t.setAttribute("aria-label","Add task and keep modal open"),t.classList.add("add-many-btn","secondary-btn","submit","focusable"),u.appendChild(e),u.appendChild(t)}else if("EDIT"===t.target.textContent){s.textContent="Edit Task";const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","UPDATE"),e.setAttribute("aria-label","Update task and close modal"),e.classList.add("update-task-btn","primary-btn","focusable"),m.setAttribute("disabled","true"),c.style.opacity="0.38",m.style.opacity="0.38",u.appendChild(e)}i.appendChild(s),i.appendChild(l),i.appendChild(d),i.appendChild(c),i.appendChild(document.createElement("br")),i.appendChild(m),i.appendChild(document.createElement("br")),i.appendChild(h),i.appendChild(document.createElement("br")),i.appendChild(p),i.appendChild(document.createElement("br")),i.appendChild(b),i.appendChild(document.createElement("br")),i.appendChild(f),i.appendChild(document.createElement("br")),i.appendChild(g),i.appendChild(y),i.appendChild(u),r.appendChild(i),o.createCloseBtn(),a.modalBox.appendChild(r)}}})()),i={customGroups:document.querySelector(".custom-groups-container"),selectedGroup:document.querySelector(".selected-group"),tasksList:document.querySelector(".task-container")},s={render:e=>{(()=>{for(;i.customGroups.firstChild;)i.customGroups.removeChild(i.customGroups.firstChild)})(),Object.keys(e).forEach((e=>{const t=document.createElement("button");t.setAttribute("type","button"),t.setAttribute("aria-label",`Group name: ${e}`),t.classList.add("custom-group","focusable","group-btn"),t.textContent=e,i.customGroups.appendChild(t)}))}},u=e=>{i.selectedGroup.textContent=e.textContent},l=(()=>{const e=document.getElementById("main-nav");return{defaultGroups:["Important","Next 7 Days","Later","Eventually"],groupButtons:document.getElementsByClassName("group-btn"),nav:e,modalBox:document.querySelector(".modal-box"),selectedGroup:document.querySelector(".selected-group"),taskItems:document.getElementsByClassName("task-item")}})(),d=(()=>{const e=JSON.parse(localStorage.getItem("toDo-list"))||{Example:[{taskName:"Do the dishes",completed:!1,priority:"Normal",dueDate:"",notes:"Let the pans soak, put the plates in the dishwasher, wash the mugs by hand.\n\nWash pans after 30 minutes soaking."},{taskName:"Bring Muffin to vet",completed:!1,priority:"Important",dueDate:"2021-03-05",notes:"Pack her favorite toy so she stays calm."}]};return window.addEventListener("load",(t=>{s.render(e)})),{masterList:e,saveToLocal:()=>{localStorage.setItem("toDo-list",JSON.stringify(list))}}})(),c=(()=>{const e=()=>{Array.from(l.groupButtons).forEach((e=>{e.classList.remove("active")}))},t=e=>{e.classList.add("active")};return l.nav.addEventListener("click",(n=>{n.target.classList.contains("group-btn")&&(e(),t(n.target),u(n.target))})),{checkName:e=>l.defaultGroups.indexOf(e)>=0||Object.keys(d.masterList).indexOf(e)>=0||e.match(/^\s{1,}$/)||""===e,create:e=>{d.masterList[e]=[],console.log(d.masterList)},update:(e,t)=>{delete Object.assign(d.masterList,{[t]:d.masterList[e]})[e],console.log(d.masterList)},remove:e=>{delete d.masterList[e],console.log(d.masterList)},setActive:t,setInactive:e}})(),m=(()=>{const e=e=>{d.masterList[e.dataset.group].splice(e.dataset.index,1),e.remove(),console.log(d.masterList)},t=e=>{const t=e.dataset.group,n=e.dataset.index;null===e.children[1].getAttribute("style")?(d.masterList[t][n].completed=!0,e.children[1].style.backgroundImage="url(assets/images/icons/done-black-24dp.svg)"):(d.masterList[t][n].completed=!1,e.children[1].removeAttribute("style")),console.log(d.masterList)};return document.querySelector(".add-task-btn").addEventListener("click",(e=>{0!==Object.keys(d.masterList).length?(r.render(e,Object.keys(d.masterList)),o.onOpen()):alert("No groups exist. Please create a group before adding a task.")})),Array.from(l.taskItems).forEach((n=>{n.addEventListener("click",(n=>{switch(n.target){case n.currentTarget.children[1]:t(n.currentTarget);break;case n.currentTarget.children[2]:n.currentTarget.children[4].classList.toggle("expanded");break;case n.currentTarget.children[4].children[1]:r.render(n,Object.keys(d.masterList)),(e=>{const t=e.dataset.group,n=e.dataset.index;l.modalBox.dataset.indexRef=n,l.modalBox.dataset.groupRef=t,document.querySelector("#name-input").value=d.masterList[t][n].taskName,document.querySelector("#group-select").value=t,document.querySelector("#priority-select").value=d.masterList[t][n].priority,document.querySelector("#date-select").value=d.masterList[t][n].dueDate,document.querySelector("#notes-input").value=d.masterList[t][n].notes})(n.currentTarget),o.onOpen();break;case n.currentTarget.children[4].children[2]:confirm(`Please click "OK" to confirm deletion of task "${n.currentTarget.children[2].textContent}".`)&&e(n.currentTarget);break;default:return}}))})),Array.from(l.taskItems).forEach((e=>{e.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),e.target===e.currentTarget.children[1]?t(e.currentTarget):e.target===e.currentTarget.children[2]&&e.currentTarget.children[4].classList.toggle("expanded"))}))})),{confirmMassRemove:()=>l.defaultGroups.indexOf(l.selectedGroup.textContent)>=0?confirm('This will delete all completed tasks in every group.\n\nPlease click "OK" to confirm deletion.'):confirm(`This will delete all completed tasks in the ${l.selectedGroup.textContent} group.\n\nPlease click "OK" to confirm deletion.`),create:(e,t,n,a,o)=>({taskName:e,priority:t,dueDate:n,notes:a,completed:o}),update:()=>{const e=l.modalBox.getAttribute("data-group-ref"),t=l.modalBox.getAttribute("data-index-ref");d.masterList[e][t].taskName=document.querySelector("#name-input").value,d.masterList[e][t].priority=document.querySelector("#priority-select").value,d.masterList[e][t].dueDate=document.querySelector("#date-select").value,d.masterList[e][t].notes=document.querySelector("#notes-input").value},removeCompleted:e=>{if(l.defaultGroups.indexOf(e)>=0){const e=Object.keys(d.masterList);Object.values(d.masterList).forEach(((t,n)=>{for(let a=t.length-1;a>=0;a--)!0===t[a].completed&&d.masterList[e[n]].splice(a,1)}))}else d.masterList[e].forEach((t=>{for(let n=d.masterList[e].length-1;n>=0;n--)!0===t.completed&&d.masterList[e].splice(n,1)}))},removeSingle:e,checkName:e=>e.match(/^\s{1,}$/)||""===e}})();l.modalBox.addEventListener("click",(e=>{const t=document.querySelector("#name-input");switch(e.target){case document.querySelector(".submit-group-btn"):case document.querySelector(".update-group-btn"):if(e.preventDefault(),c.checkName(t.value))return void alert("Group name cannot be blank and cannot already be taken.\n\nPlease enter a new name.");e.target.classList.contains("submit-group-btn")?(c.create(t.value),s.render(d.masterList)):(c.update(l.selectedGroup.textContent,t.value),document.querySelector(".active").textContent=t.value,u(document.querySelector(".active"))),o.onClose();break;case document.querySelector(".delete-group-btn"):confirm(`This will delete the ${l.selectedGroup.textContent} group, along with any tasks within it.\n\nPlease click "OK" to confirm deletion.`)&&(c.remove(l.selectedGroup.textContent),o.onClose(),s.render(d.masterList));break;case document.querySelector(".delete-completed-btn"):m.confirmMassRemove()&&(m.removeCompleted(l.selectedGroup.textContent),o.onClose(),console.log(d.masterList));break;case document.querySelector(".add-single-btn"):case document.querySelector(".add-many-btn"):const n=document.querySelector("#group-select");if(e.preventDefault(),m.checkName(t.value))return void alert("Task name cannot be blank.\n\nPlease enter a new name.");{const a=m.create(t.value,document.querySelector("#priority-select").value,document.querySelector("#date-select").value,document.querySelector("#notes-input").value,!1);d.masterList[n.value].push(a),e.target.classList.contains("add-many-btn")?(t.focus(),t.value="",n.selectedIndex=0,document.querySelector("#priority-select").value="Normal",document.querySelector("#date-select").value="",document.querySelector("#notes-input").value=""):o.onClose(),console.log(d.masterList)}break;case document.querySelector(".update-task-btn"):if(e.preventDefault(),m.checkName(t.value))return void alert("Task name cannot be blank.\n\nPlease enter a new name.");m.update(),o.onClose(),console.log(d.masterList);break;default:return}}));var h=6e4;function p(e){return e.getTime()%h}function b(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var a=n>0?(h+p(t))%h:p(t);return n*h+a}function f(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function g(e){f(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function y(e){f(1,arguments);var t=g(e);return t.setHours(0,0,0,0),t}var v=864e5;function C(e,t){f(2,arguments);var n=y(e),a=y(t),o=n.getTime()-b(n),r=a.getTime()-b(a);return Math.round((o-r)/v)}function w(e,t){f(2,arguments);var n=g(e),a=g(t),o=n.getTime()-a.getTime();return o<0?-1:o>0?1:o}function k(e,t){f(2,arguments);var n=g(e),a=g(t);return n.getTime()-a.getTime()}function E(e,t){f(2,arguments);var n=k(e,t)/1e3;return n>0?Math.floor(n):Math.ceil(n)}function S(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})t.hasOwnProperty(n)&&(e[n]=t[n]);return e}({},e)}var A={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function x(e){return function(t){var n=t||{},a=n.width?String(n.width):e.defaultWidth;return e.formats[a]||e.formats[e.defaultWidth]}}var L={date:x({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:x({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:x({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},D={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function q(e){return function(t,n){var a,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var s=e.defaultWidth,u=o.width?String(o.width):e.defaultWidth;a=e.values[u]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function M(e){return function(t,n){var a=String(t),o=n||{},r=o.width,i=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],s=a.match(i);if(!s)return null;var u,l=s[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth];return u="[object Array]"===Object.prototype.toString.call(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(l))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(l))return n}(d),u=e.valueCallback?e.valueCallback(u):u,{value:u=o.valueCallback?o.valueCallback(u):u,rest:a.slice(l.length)}}}var T,B={code:"en-US",formatDistance:function(e,t,n){var a;return n=n||{},a="string"==typeof A[e]?A[e]:1===t?A[e].one:A[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:L,formatRelative:function(e,t,n,a){return D[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:q({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:q({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:q({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:q({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:q({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),a=t||{},o=n.match(T.matchPattern);if(!o)return null;var r=o[0],i=n.match(T.parsePattern);if(!i)return null;var s=T.valueCallback?T.valueCallback(i[0]):i[0];return{value:s=a.valueCallback?a.valueCallback(s):s,rest:n.slice(r.length)}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}},P=1440,N=43200,O=525600;function W(e,t,n){f(2,arguments);var a=n||{},o=a.locale||B;if(!o.formatDistance)throw new RangeError("locale must contain localize.formatDistance property");var r=w(e,t);if(isNaN(r))throw new RangeError("Invalid time value");var i,s,u=S(a);u.addSuffix=Boolean(a.addSuffix),u.comparison=r,r>0?(i=g(t),s=g(e)):(i=g(e),s=g(t));var l,d=null==a.roundingMethod?"round":String(a.roundingMethod);if("floor"===d)l=Math.floor;else if("ceil"===d)l=Math.ceil;else{if("round"!==d)throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");l=Math.round}var c,m=E(s,i),h=(b(s)-b(i))/1e3,p=l((m-h)/60);if("second"===(c=null==a.unit?p<1?"second":p<60?"minute":p<P?"hour":p<N?"day":p<O?"month":"year":String(a.unit)))return o.formatDistance("xSeconds",m,u);if("minute"===c)return o.formatDistance("xMinutes",p,u);if("hour"===c){var y=l(p/60);return o.formatDistance("xHours",y,u)}if("day"===c){var v=l(p/P);return o.formatDistance("xDays",v,u)}if("month"===c){var C=l(p/N);return o.formatDistance("xMonths",C,u)}if("year"===c){var k=l(p/O);return o.formatDistance("xYears",k,u)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}console.log(d.masterList),console.log((e=>{const t=new Date,n=new Date(e.split("-").join(", "));switch(!0){case C(n,t)<0:return"Due date passed";case 0===C(n,t):return"Today";case 1===C(n,t):return"Tomorrow";default:return function(e,t){return f(1,arguments),W(e,Date.now(),t)}(n)}})("2021-02-28"));const G={menuContainer:document.querySelector("#main-nav"),menuOpenButton:document.querySelector(".menu-button"),menuCloseButton:document.querySelector(".menu-close-button")};(()=>{const e=()=>{document.documentElement.scrollWidth>763?(G.menuContainer.style.visibility="visible",G.menuContainer.style.left="0"):(G.menuContainer.style.visibility="hidden",G.menuContainer.style.left="-800px")};window.addEventListener("resize",e),window.addEventListener("load",e);const t=()=>{"hidden"===G.menuContainer.style.visibility?(G.menuContainer.style.visibility="visible",G.menuContainer.style.left="0",G.menuCloseButton.focus()):(G.menuContainer.style.left="-800px",setTimeout((()=>{G.menuContainer.style.visibility="hidden"}),600),G.menuOpenButton.focus())};G.menuOpenButton.addEventListener("click",t),G.menuCloseButton.addEventListener("click",t)})()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,