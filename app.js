!function(){"use strict";const e={accessibilityContainer:document.querySelector("#accessibility-container"),animationSwitch:document.querySelector("#animation-switch"),githubLogo:document.querySelector("#lower-nav img"),themeSwitch:document.querySelector("#theme-switch")},t=()=>{localStorage.setItem("theme",document.documentElement.getAttribute("theme")),localStorage.setItem("animations-enabled",e.animationSwitch.getAttribute("aria-checked"))},n=((()=>{const n=e=>{"light"===document.documentElement.getAttribute("theme")?a():o(),t()},a=()=>{e.themeSwitch.setAttribute("aria-checked","false"),document.documentElement.setAttribute("theme","dark"),e.themeSwitch.style.backgroundPosition="center bottom -0.8rem",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-Light-32px.png")},o=()=>{e.themeSwitch.setAttribute("aria-checked","true"),document.documentElement.setAttribute("theme","light"),e.themeSwitch.style.backgroundPosition="center top 2px",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-32px.png")};e.themeSwitch.addEventListener("click",n),e.themeSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"light"===localStorage.getItem("theme")?o():a()}))})(),(()=>{const n=()=>{"true"===e.animationSwitch.getAttribute("aria-checked")?o():a(),t()},a=()=>{e.animationSwitch.setAttribute("aria-checked","true"),document.documentElement.style.scrollBehavior="smooth",e.accessibilityContainer.style.transition="top 0.75s ease-in-out",e.animationSwitch.textContent="Animations Enabled",e.themeSwitch.style.transition="background-position 0.3s ease-in",document.querySelector("#main-nav").style.transition="left 0.5s",Array.from(document.querySelectorAll(".label-arrow")).forEach((e=>{e.style.transition="transform 0.75s"}))},o=()=>{e.animationSwitch.setAttribute("aria-checked","false"),document.documentElement.style.scrollBehavior="auto",e.animationSwitch.setAttribute("aria-checked","false"),e.animationSwitch.textContent="Animations Disabled",Array.from(document.querySelectorAll(".animated")).forEach((e=>{e.style.transition="none"}))};return e.animationSwitch.addEventListener("click",n),e.animationSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"false"===localStorage.getItem("animations-enabled")?o():a()})),{animationsEnabled:a,animationsDisabled:o}})()),a={modalBox:document.querySelector(".modal-box"),modalContainer:document.querySelector(".modal-container")},o=(()=>{const e=()=>{for(;a.modalBox.firstChild;)a.modalBox.removeChild(a.modalBox.firstChild);a.modalContainer.style.display="none",a.modalBox.dataset.indexRef="",a.modalBox.dataset.groupRef=""};return window.addEventListener("keydown",(t=>{"Escape"===t.key&&e()})),{createCloseBtn:()=>{const e=document.createElement("button");e.setAttribute("type","button"),e.setAttribute("aria-label","Close modal"),e.classList.add("modal-close-button","close-btn","focusable"),e.addEventListener("click",o.onClose),a.modalBox.appendChild(e)},onClose:e,onOpen:()=>{a.modalContainer.style.display="flex",document.querySelector(".modal-close-button").focus()}}})(),r=((()=>{const e=e=>{e.target.classList.contains("disable-button")?n.animationsDisabled():e.target.classList.contains("enable-button")&&n.animationsEnabled(),t(),o.onClose()};window.addEventListener("load",(()=>{0===localStorage.length&&(()=>{const t=document.createElement("h1");t.textContent="This site uses minimal animation effects.";const n=document.createElement("p");n.textContent="Effects include moving menus and smooth scrolling. If you suffer from a vestibular disorder or otherwise prefer no animations, you can turn them off by clicking the first button below.";const o=document.createElement("p");o.textContent="You can later change this setting in the Display & Accessibility tab at the top of the page.";const r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("disable-button","focusable","primary-btn"),r.textContent="DISABLE ANIMATIONS",r.addEventListener("click",e);const i=document.createElement("button");i.setAttribute("type","button"),i.classList.add("enable-button","focusable","secondary-btn"),i.textContent="ENABLE ANIMATIONS",i.addEventListener("click",e),a.modalBox.appendChild(t),a.modalBox.appendChild(n),a.modalBox.appendChild(o),a.modalBox.appendChild(r),a.modalBox.appendChild(i),a.modalContainer.style.display="flex"})()}))})(),(()=>{const e=["Important","Next 7 Days","Later","Eventually"],t=document.querySelector(".selected-group"),n=n=>{const r=document.createElement("form"),i=document.createElement("fieldset"),s=document.createElement("legend"),l=document.createElement("div"),d=document.createElement("input"),u=document.createElement("label");u.setAttribute("for","name-input"),u.textContent="Group Name";const c=document.createElement("input");if(c.setAttribute("type","text"),c.setAttribute("required","true"),c.setAttribute("id","name-input"),c.setAttribute("autocomplete","off"),c.classList.add("focusable"),n.target.classList.contains("add-group-btn"))s.textContent="Add a Group",d.setAttribute("type","submit"),d.setAttribute("value","ADD GROUP"),d.classList.add("submit-group-btn","primary-btn","focusable","submit"),l.appendChild(d);else if(n.target.classList.contains("group-option-btn")){s.textContent="Group Options",d.setAttribute("type","submit"),d.setAttribute("value","UPDATE"),d.classList.add("update-group-btn","secondary-btn","focusable","submit");const n=document.createElement("button");n.setAttribute("type","button"),n.classList.add("delete-group-btn","delete-btn","focusable"),n.textContent="DELETE GROUP";const a=document.createElement("button");a.setAttribute("type","button"),a.classList.add("delete-completed-btn","delete-btn","focusable"),a.textContent="DELETE COMPLETED TASKS",e.indexOf(t.textContent)>=0&&(u.style.opacity="0.38",c.setAttribute("disabled","true"),c.style.opacity="0.38",d.setAttribute("disabled","true"),d.style.opacity="0.38",n.setAttribute("disabled","true"),n.style.opacity="0.38"),l.appendChild(d),l.appendChild(n),l.appendChild(a)}i.appendChild(s),i.appendChild(u),i.appendChild(c),i.appendChild(l),r.appendChild(i),o.createCloseBtn(),a.modalBox.appendChild(r)};document.querySelector(".group-option-btn").addEventListener("click",(e=>{n(e),o.onOpen()})),document.querySelector(".add-group-btn").addEventListener("click",(e=>{n(e),o.onOpen()}))})(),(()=>{const e=["Normal","Important"];return{render:(t,n)=>{const r=document.createElement("form"),i=document.createElement("fieldset"),s=document.createElement("legend"),l=document.createElement("div"),d=document.createElement("label");d.setAttribute("for","name-input"),d.textContent="Task Name (required)";const u=document.createElement("input");u.setAttribute("type","text"),u.setAttribute("id","name-input"),u.setAttribute("placeholder","Enter a task name"),u.setAttribute("required","true"),u.setAttribute("autocomplete","off"),u.className="focusable";const c=document.createElement("label");c.setAttribute("for","group-select"),c.textContent="Group";const m=document.createElement("select");m.setAttribute("id","group-select"),m.className="focusable";for(let e=0;e<n.length;e++){const t=document.createElement("option");t.setAttribute("value",n[e]),t.textContent=n[e],m.appendChild(t)}const p=document.createElement("label");p.setAttribute("for","priority-select"),p.textContent="Priority";const h=document.createElement("select");h.setAttribute("id","priority-select"),h.className="focusable";for(let t=0;t<e.length;t++){const n=document.createElement("option");n.setAttribute("value",e[t]),n.textContent=e[t],h.appendChild(n)}const b=document.createElement("label");b.setAttribute("for","date-select"),b.textContent="Due Date (optional)";const f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("id","date-select"),f.className="focusable";const g=document.createElement("label");g.setAttribute("for","notes-input"),g.textContent="Additional Notes";const y=document.createElement("textarea");if(y.setAttribute("id","notes-input"),y.setAttribute("placeholder","Enter any additional notes for the task"),y.className="focusable",t.target.textContent.includes("ADD TASK")){s.textContent="Add a Task";const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","ADD ONE"),e.setAttribute("aria-label","Add task and close modal"),e.classList.add("add-single-btn","primary-btn","submit","focusable");const t=document.createElement("input");t.setAttribute("type","submit"),t.setAttribute("value","ADD MANY"),t.setAttribute("aria-label","Add task and keep modal open"),t.classList.add("add-many-btn","secondary-btn","submit","focusable"),l.appendChild(e),l.appendChild(t)}else if("EDIT"===t.target.textContent){s.textContent="Edit Task";const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","UPDATE"),e.setAttribute("aria-label","Update task and close modal"),e.classList.add("update-task-btn","primary-btn","focusable"),m.setAttribute("disabled","true"),c.style.opacity="0.38",m.style.opacity="0.38",l.appendChild(e)}i.appendChild(s),i.appendChild(d),i.appendChild(u),i.appendChild(c),i.appendChild(document.createElement("br")),i.appendChild(m),i.appendChild(document.createElement("br")),i.appendChild(p),i.appendChild(document.createElement("br")),i.appendChild(h),i.appendChild(document.createElement("br")),i.appendChild(b),i.appendChild(document.createElement("br")),i.appendChild(f),i.appendChild(document.createElement("br")),i.appendChild(g),i.appendChild(y),i.appendChild(l),r.appendChild(i),o.createCloseBtn(),a.modalBox.appendChild(r)}}})());var i=6e4;function s(e){return e.getTime()%i}function l(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var a=n>0?(i+s(t))%i:s(t);return n*i+a}function d(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function u(e){d(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function c(e,t){d(2,arguments);var n=u(e),a=u(t),o=n.getTime()-a.getTime();return o<0?-1:o>0?1:o}function m(e,t){d(2,arguments);var n=u(e),a=u(t);return n.getTime()-a.getTime()}function p(e,t){d(2,arguments);var n=m(e,t)/1e3;return n>0?Math.floor(n):Math.ceil(n)}function h(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})t.hasOwnProperty(n)&&(e[n]=t[n]);return e}({},e)}var b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function f(e){return function(t){var n=t||{},a=n.width?String(n.width):e.defaultWidth;return e.formats[a]||e.formats[e.defaultWidth]}}var g={date:f({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:f({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:f({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function v(e){return function(t,n){var a,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):r;a=e.formattingValues[i]||e.formattingValues[r]}else{var s=e.defaultWidth,l=o.width?String(o.width):e.defaultWidth;a=e.values[l]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function k(e){return function(t,n){var a=String(t),o=n||{},r=o.width,i=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],s=a.match(i);if(!s)return null;var l,d=s[0],u=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth];return l="[object Array]"===Object.prototype.toString.call(u)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(u):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(u),l=e.valueCallback?e.valueCallback(l):l,{value:l=o.valueCallback?o.valueCallback(l):l,rest:a.slice(d.length)}}}var E,C={code:"en-US",formatDistance:function(e,t,n){var a;return n=n||{},a="string"==typeof b[e]?b[e]:1===t?b[e].one:b[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:g,formatRelative:function(e,t,n,a){return y[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:v({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:v({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:v({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:v({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:v({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(E={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),a=t||{},o=n.match(E.matchPattern);if(!o)return null;var r=o[0],i=n.match(E.parsePattern);if(!i)return null;var s=E.valueCallback?E.valueCallback(i[0]):i[0];return{value:s=a.valueCallback?a.valueCallback(s):s,rest:n.slice(r.length)}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}},w=1440,A=43200,x=525600;function S(e,t,n){d(2,arguments);var a=n||{},o=a.locale||C;if(!o.formatDistance)throw new RangeError("locale must contain localize.formatDistance property");var r=c(e,t);if(isNaN(r))throw new RangeError("Invalid time value");var i,s,m=h(a);m.addSuffix=Boolean(a.addSuffix),m.comparison=r,r>0?(i=u(t),s=u(e)):(i=u(e),s=u(t));var b,f=null==a.roundingMethod?"round":String(a.roundingMethod);if("floor"===f)b=Math.floor;else if("ceil"===f)b=Math.ceil;else{if("round"!==f)throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");b=Math.round}var g,y=p(s,i),v=(l(s)-l(i))/1e3,k=b((y-v)/60);if("second"===(g=null==a.unit?k<1?"second":k<60?"minute":k<w?"hour":k<A?"day":k<x?"month":"year":String(a.unit)))return o.formatDistance("xSeconds",y,m);if("minute"===g)return o.formatDistance("xMinutes",k,m);if("hour"===g){var E=b(k/60);return o.formatDistance("xHours",E,m)}if("day"===g){var S=b(k/w);return o.formatDistance("xDays",S,m)}if("month"===g){var L=b(k/A);return o.formatDistance("xMonths",L,m)}if("year"===g){var D=b(k/x);return o.formatDistance("xYears",D,m)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}function L(e){d(1,arguments);var t=u(e);return t.setHours(0,0,0,0),t}var D=864e5;function q(e,t){d(2,arguments);var n=L(e),a=L(t),o=n.getTime()-l(n),r=a.getTime()-l(a);return Math.round((o-r)/D)}const N=(()=>{const e=document.querySelector(".custom-groups-container");return{render:t=>{(()=>{for(;e.firstChild;)e.removeChild(e.firstChild)})(),Object.keys(t).forEach((t=>{const n=document.createElement("button");n.setAttribute("type","button"),n.setAttribute("aria-label",`Group name: ${t}`),n.classList.add("custom-group","focusable","group-btn"),n.textContent=t,e.appendChild(n)}))}}})(),M=(()=>{const e=document.querySelector(".selected-group"),t=document.querySelector(".task-container"),n=e=>{const t=new Date;return q(new Date(e.split("-").join(", ")),t)},a=(e,n,a)=>{const o=document.createElement("section");o.setAttribute("data-group",n),o.setAttribute("data-index",a),o.className="task-item";const r=document.createElement("span");if(r.setAttribute("aria-label",`${e.priority} task`),r.className="task-priority","Important"===e.priority){const e=document.createElement("span");e.className="material-icons",e.textContent="priority_high",r.appendChild(e)}const i=document.createElement("span");i.setAttribute("role","checkbox"),i.setAttribute("aria-checked","false"),i.setAttribute("tabindex","0"),i.setAttribute("aria-label",e.taskName),i.classList.add("task-status","focusable"),e.completed&&(i.style.backgroundImage="url(assets/images/icons/done-black-24dp.svg)");const s=document.createElement("span");s.setAttribute("role","button"),s.setAttribute("tabindex","0"),s.setAttribute("aria-label",`Details for ${e.taskName}`),s.classList.add("task-name","focusable"),s.textContent=e.taskName;const l=document.createElement("span");l.setAttribute("aria-label",`Due date for task ${e.taskName}: ${e.dueDate}`),l.className="task-date",l.textContent=(e=>{const t=new Date,n=new Date(e.split("-").join(", "));switch(!0){case""===e:return"No due date";case q(n,t)<0:return"Due date passed";case 0===q(n,t):return"Today";case 1===q(n,t):return"Tomorrow";case q(n,t)<=29:return q(n,t)+" days";default:return function(e,t){return d(1,arguments),S(e,Date.now(),t)}(n)}})(e.dueDate);const u=document.createElement("div");u.setAttribute("data-task",e.taskName),u.setAttribute("data-group",n),u.setAttribute("data-index",a),u.className="task-details";const c=document.createElement("p");c.className="task-notes",c.textContent=e.notes;const m=document.createElement("button");m.setAttribute("type","button"),m.setAttribute("aria-label",`Edit task ${e.taskName}`),m.classList.add("edit-btn","focusable"),m.textContent="EDIT";const p=document.createElement("button");p.setAttribute("type","button"),p.setAttribute("aria-label",`Delete task ${e.taskName}`),p.classList.add("delete-btn","focusable"),p.textContent="DELETE",u.appendChild(c),u.appendChild(m),u.appendChild(p),o.appendChild(r),o.appendChild(i),o.appendChild(s),o.appendChild(l),o.appendChild(u),t.appendChild(o)};return{loadGroupTasks:(e,o)=>{const r=Object.keys(e);switch((()=>{for(;t.firstChild;)t.removeChild(t.firstChild)})(),o){case document.getElementById("important"):Object.values(e).forEach(((e,t)=>{for(let n=0;n<e.length;n++)"Important"===e[n].priority&&a(e[n],r[t],n)}));break;case document.getElementById("next-7-days"):Object.values(e).forEach(((e,t)=>{for(let o=0;o<e.length;o++)n(e[o].dueDate)<=7&&a(e[o],r[t],o)}));break;case document.getElementById("later"):Object.values(e).forEach(((e,t)=>{for(let o=0;o<e.length;o++)n(e[o].dueDate)>7&&a(e[o],r[t],o)}));break;case document.getElementById("eventually"):Object.values(e).forEach(((e,t)=>{for(let n=0;n<e.length;n++)""===e[n].dueDate&&a(e[n],r[t],n)}));break;default:e[o.textContent].forEach(((e,t)=>{a(e,o.textContent,t)}))}if(0===t.children.length){const e=document.createElement("h2");e.textContent="No tasks for this group!",t.appendChild(e)}},updateHeader:t=>{e.textContent=t.textContent}}})(),T={defaultGroups:["Important","Next 7 Days","Later","Eventually"],modalBox:document.querySelector(".modal-box"),taskHeader:document.querySelector(".selected-group")},P=(()=>{const e=document.getElementById("important"),t=JSON.parse(localStorage.getItem("toDo-list"))||{Example:[{taskName:"Do the dishes",completed:!1,priority:"Normal",dueDate:"",notes:"Let the pans soak, put the plates in the dishwasher, wash the mugs by hand.\n\nWash pans after 30 minutes soaking."},{taskName:"Bring Muffin to vet",completed:!1,priority:"Important",dueDate:"2021-12-01",notes:"Pack her favorite toy so she stays calm."}]};return window.addEventListener("load",(n=>{M.loadGroupTasks(t,e),N.render(t)})),{masterList:t,saveToLocal:()=>{localStorage.setItem("toDo-list",JSON.stringify(list))}}})(),O=(()=>{const e=()=>{Array.from(document.getElementsByClassName("group-btn")).forEach((e=>{e.classList.remove("active")}))},t=e=>{e.classList.add("active")};return document.getElementById("main-nav").addEventListener("click",(n=>{n.target.classList.contains("group-btn")&&(e(),t(n.target),M.updateHeader(n.target),M.loadGroupTasks(P.masterList,n.target))})),{checkName:e=>T.defaultGroups.indexOf(e)>=0||Object.keys(P.masterList).indexOf(e)>=0||e.match(/^\s{1,}$/)||""===e,create:e=>{P.masterList[e]=[],console.log(P.masterList)},update:(e,t)=>{delete Object.assign(P.masterList,{[t]:P.masterList[e]})[e],console.log(P.masterList)},remove:e=>{delete P.masterList[e],console.log(P.masterList)},setActive:t,setInactive:e}})(),B=(()=>{const e=document.querySelector(".task-container"),t=e=>{switch(!0){case e.target.classList.contains("task-status"):(e=>{const t=e.dataset.group,n=e.dataset.index;null===e.children[1].getAttribute("style")?(P.masterList[t][n].completed=!0,e.children[1].style.backgroundImage="url(assets/images/icons/done-black-24dp.svg)"):(P.masterList[t][n].completed=!1,e.children[1].removeAttribute("style")),console.log(P.masterList)})(e.target.parentElement);break;case e.target.classList.contains("task-name"):e.target.parentElement.children[4].classList.toggle("expanded");break;case e.target.classList.contains("edit-btn"):r.render(e,Object.keys(P.masterList)),(e=>{const t=e.dataset.group,n=e.dataset.index;T.modalBox.dataset.indexRef=n,T.modalBox.dataset.groupRef=t,document.querySelector("#name-input").value=P.masterList[t][n].taskName,document.querySelector("#group-select").value=t,document.querySelector("#priority-select").value=P.masterList[t][n].priority,document.querySelector("#date-select").value=P.masterList[t][n].dueDate,document.querySelector("#notes-input").value=P.masterList[t][n].notes})(e.target.parentElement),o.onOpen();break;case e.target.classList.contains("delete-btn"):confirm(`Please click "OK" to confirm deletion of task \n            "${e.target.parentElement.dataset.task}".`)&&n(e.target.parentElement);break;default:return}},n=e=>{P.masterList[e.dataset.group].splice(e.dataset.index,1),e.remove(),console.log(P.masterList)};return document.querySelector(".add-task-btn").addEventListener("click",(e=>{0!==Object.keys(P.masterList).length?(r.render(e,Object.keys(P.masterList)),o.onOpen()):alert("No groups exist. Please create a group before adding a task.")})),e.addEventListener("click",t),e.addEventListener("keydown",(e=>{" "===e.key&&t(e)})),{checkName:e=>e.match(/^\s{1,}$/)||""===e,confirmMassRemove:()=>T.defaultGroups.indexOf(T.taskHeader.textContent)>=0?confirm('This will delete all completed tasks in every group. \n\nPlease click "OK" to confirm deletion.'):confirm(`This will delete all completed tasks in the ${T.taskHeader.textContent} group.\n\nPlease click "OK" to confirm deletion.`),create:(e,t,n,a,o)=>({taskName:e,priority:t,dueDate:n,notes:a,completed:o}),removeCompleted:e=>{if(T.defaultGroups.indexOf(e)>=0){const e=Object.keys(P.masterList);Object.values(P.masterList).forEach(((t,n)=>{for(let a=t.length-1;a>=0;a--)!0===t[a].completed&&P.masterList[e[n]].splice(a,1)}))}else P.masterList[e].forEach((t=>{for(let n=P.masterList[e].length-1;n>=0;n--)!0===t.completed&&P.masterList[e].splice(n,1)}))},removeSingle:n,update:()=>{const e=T.modalBox.getAttribute("data-group-ref"),t=T.modalBox.getAttribute("data-index-ref");P.masterList[e][t].taskName=document.querySelector("#name-input").value,P.masterList[e][t].priority=document.querySelector("#priority-select").value,P.masterList[e][t].dueDate=document.querySelector("#date-select").value,P.masterList[e][t].notes=document.querySelector("#notes-input").value}}})();T.modalBox.addEventListener("click",(e=>{const t=document.querySelector("#name-input"),n=document.querySelector("#group-select");switch(e.target){case document.querySelector(".submit-group-btn"):case document.querySelector(".update-group-btn"):if(e.preventDefault(),O.checkName(t.value))return void alert("Group name cannot be blank and cannot already be taken.\n\nPlease enter a new name.");e.target.classList.contains("submit-group-btn")?(O.create(t.value),N.render(P.masterList)):(O.update(T.taskHeader.textContent,t.value),document.querySelector(".active").textContent=t.value,M.updateHeader(document.querySelector(".active"))),o.onClose();break;case document.querySelector(".delete-group-btn"):confirm(`This will delete the ${T.taskHeader.textContent} group, along with any tasks within it.\n\nPlease click "OK" to confirm deletion.`)&&(O.remove(T.taskHeader.textContent),o.onClose(),N.render(P.masterList));break;case document.querySelector(".delete-completed-btn"):B.confirmMassRemove()&&(B.removeCompleted(T.taskHeader.textContent),o.onClose(),console.log(P.masterList));break;case document.querySelector(".add-single-btn"):case document.querySelector(".add-many-btn"):if(e.preventDefault(),B.checkName(t.value))return void alert("Task name cannot be blank.\n\nPlease enter a new name.");{const a=B.create(t.value,document.querySelector("#priority-select").value,document.querySelector("#date-select").value,document.querySelector("#notes-input").value,!1);P.masterList[n.value].push(a),e.target.classList.contains("add-many-btn")?(t.focus(),t.value="",n.selectedIndex=0,document.querySelector("#priority-select").selectedIndex=0,document.querySelector("#date-select").value="",document.querySelector("#notes-input").value=""):o.onClose(),console.log(P.masterList)}break;case document.querySelector(".update-task-btn"):if(e.preventDefault(),B.checkName(t.value))return void alert("Task name cannot be blank.\n\nPlease enter a new name.");B.update(),o.onClose(),console.log(P.masterList);break;default:return}})),console.log(P.masterList),(()=>{const e=document.querySelector("#main-nav"),t=document.querySelector(".menu-button"),n=document.querySelector(".menu-close-button"),a=()=>{document.documentElement.scrollWidth>763?(e.style.visibility="visible",e.style.left="0"):(e.style.visibility="hidden",e.style.left="-800px")};window.addEventListener("resize",a),window.addEventListener("load",a);const o=()=>{"hidden"===e.style.visibility?(e.style.visibility="visible",e.style.left="0",n.focus()):(e.style.left="-800px",setTimeout((()=>{e.style.visibility="hidden"}),600),t.focus())};t.addEventListener("click",o),n.addEventListener("click",o)})()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2l0ZS1zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kYWxzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb21wYXJlQXNjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluU2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvY2xvbmVPYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Fzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdERpc3RhbmNlU3RyaWN0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZkRheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcmVuZGVyLWNvbnRhaW5lcnMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9sb2dpYy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiRE9NIiwiYWNjZXNzaWJpbGl0eUNvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFuaW1hdGlvblN3aXRjaCIsImdpdGh1YkxvZ28iLCJ0aGVtZVN3aXRjaCIsInNldHRpbmdzIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImRvY3VtZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImFjY2Vzc2liaWxpdHlPcHRpb25zIiwiX3RvZ2dsZVRoZW1lIiwiZSIsIl9kYXJrVGhlbWUiLCJfbGlnaHRUaGVtZSIsInNldEF0dHJpYnV0ZSIsInN0eWxlIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImtleSIsInByZXZlbnREZWZhdWx0Iiwid2luZG93IiwiZ2V0SXRlbSIsIl90b2dnbGVBbmltYXRpb25zIiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwiYW5pbWF0aW9uc0VuYWJsZWQiLCJzY3JvbGxCZWhhdmlvciIsInRyYW5zaXRpb24iLCJ0ZXh0Q29udGVudCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaXRlbSIsIm1vZGFsQm94IiwibW9kYWxDb250YWluZXIiLCJnZW5lcmFsTW9kYWwiLCJvbkNsb3NlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiZGlzcGxheSIsImRhdGFzZXQiLCJpbmRleFJlZiIsImdyb3VwUmVmIiwiY3JlYXRlQ2xvc2VCdG4iLCJjbG9zZUJ0biIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsIm9uT3BlbiIsImZvY3VzIiwidGFza01vZGFsIiwiX3NlbGVjdE9wdGlvbiIsInRhcmdldCIsImNvbnRhaW5zIiwibGVuZ3RoIiwiaGVhZGluZyIsInBhcmExIiwicGFyYTIiLCJkaXNhYmxlQnV0dG9uIiwiZW5hYmxlQnV0dG9uIiwiX3JlbmRlciIsIl9kZWZhdWx0R3JvdXBzIiwiX3Rhc2tIZWFkZXIiLCJmb3JtIiwiZmllbGRzZXQiLCJsZWdlbmQiLCJkaXYiLCJtYWluQnRuIiwibmFtZUxhYmVsIiwibmFtZUlucHV0IiwiZGVsZXRlR3JvdXAiLCJkZWxldGVDb21wbGV0ZWQiLCJpbmRleE9mIiwib3BhY2l0eSIsIl9wcmlvcml0eUFycmF5IiwicmVuZGVyIiwiZ3JvdXBMaXN0IiwiY2xhc3NOYW1lIiwiZ3JvdXBMYWJlbCIsImdyb3VwU2VsZWN0IiwiaSIsImdyb3VwT3B0aW9uIiwicHJpb3JpdHlMYWJlbCIsInByaW9yaXR5U2VsZWN0IiwicHJpb3JpdHlPcHRpb24iLCJkYXRlTGFiZWwiLCJkYXRlSW5wdXQiLCJub3Rlc0xhYmVsIiwibm90ZXNJbnB1dCIsImluY2x1ZGVzIiwiYWRkT25lQnRuIiwiYWRkTWFueUJ0biIsImVkaXRCdG4iLCJNSUxMSVNFQ09ORFNfSU5fTUlOVVRFIiwiZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQiLCJkYXRlIiwiZ2V0VGltZSIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJkaXJ0eURhdGUiLCJEYXRlIiwiYmFzZVRpbWV6b25lT2Zmc2V0IiwiTWF0aCIsImNlaWwiLCJnZXRUaW1lem9uZU9mZnNldCIsInNldFNlY29uZHMiLCJtaWxsaXNlY29uZHNQYXJ0T2ZUaW1lem9uZU9mZnNldCIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJndW1lbnRzIiwiYXJnU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiY29uc29sZSIsIndhcm4iLCJFcnJvciIsInN0YWNrIiwiTmFOIiwiY29tcGFyZUFzYyIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0IiwiZGF0ZVJpZ2h0IiwiZGlmZiIsImRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyIsImRpZmZlcmVuY2VJblNlY29uZHMiLCJmbG9vciIsImNsb25lT2JqZWN0IiwiZGlydHlPYmplY3QiLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGlydHlPcHRpb25zIiwib3B0aW9ucyIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImNvbnRleHQiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwiZGlydHlTdHJpbmciLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwidmFsdWUiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJ0ZXN0IiwiZmluZEluZGV4Iiwib2JqZWN0IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwic2xpY2UiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsImNvdW50IiwicmVzdWx0IiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJsb2NhbGl6ZSIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsIl9kaXJ0eU9wdGlvbnMiLCJudW1iZXIiLCJOdW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwibW9udGgiLCJkYXkiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJpbmRleCIsIndlZWtTdGFydHNPbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsIk1JTlVURVNfSU5fREFZIiwiTUlOVVRFU19JTl9NT05USCIsIk1JTlVURVNfSU5fWUVBUiIsImZvcm1hdERpc3RhbmNlU3RyaWN0IiwiZGlydHlCYXNlRGF0ZSIsImxvY2FsZSIsIlJhbmdlRXJyb3IiLCJpc05hTiIsImxvY2FsaXplT3B0aW9ucyIsIkJvb2xlYW4iLCJyb3VuZGluZ01ldGhvZEZuIiwicm91bmRpbmdNZXRob2QiLCJyb3VuZCIsInVuaXQiLCJzZWNvbmRzIiwib2Zmc2V0SW5TZWNvbmRzIiwibWludXRlcyIsImhvdXJzIiwiZGF5cyIsIm1vbnRocyIsInllYXJzIiwic3RhcnRPZkRheSIsInNldEhvdXJzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsImRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyIsInN0YXJ0T2ZEYXlMZWZ0Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsInRpbWVzdGFtcFJpZ2h0IiwiZ3JvdXBDb250YWluZXIiLCJfY3VzdG9tR3JvdXBzIiwibGlzdCIsIl9jbGVhciIsImtleXMiLCJncm91cCIsImJ1dHRvbiIsInRhc2tDb250YWluZXIiLCJfdGFza3NMaXN0IiwiX2NoZWNrRGF0ZSIsIm5vdyIsInNwbGl0Iiwiam9pbiIsInRhc2siLCJ0YXNrSXRlbSIsInByaW9yaXR5Qm94IiwicHJpb3JpdHkiLCJpY29uIiwic3RhdHVzQm94IiwidGFza05hbWUiLCJjb21wbGV0ZWQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJuYW1lRmllbGQiLCJkYXRlRmllbGQiLCJkdWVEYXRlIiwibmV3RGF0ZSIsImZvcm1hdERpc3RhbmNlVG9Ob3dTdHJpY3QiLCJfZm9ybWF0dGVkRGF0ZSIsImRldGFpbHMiLCJub3Rlc0ZpZWxkIiwibm90ZXMiLCJkZWxldGVCdG4iLCJsb2FkR3JvdXBUYXNrcyIsImtleUFycmF5IiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGlsZHJlbiIsImgyIiwidXBkYXRlSGVhZGVyIiwiZGVmYXVsdEdyb3VwcyIsInRhc2tIZWFkZXIiLCJ0b0RvIiwiX2FjdGl2ZU9uTG9hZCIsIm1hc3Rlckxpc3QiLCJKU09OIiwicGFyc2UiLCJFeGFtcGxlIiwic2F2ZVRvTG9jYWwiLCJzdHJpbmdpZnkiLCJncm91cHMiLCJzZXRJbmFjdGl2ZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJyZW1vdmUiLCJzZXRBY3RpdmUiLCJjaGVja05hbWUiLCJuYW1lIiwiY3JlYXRlIiwibG9nIiwidXBkYXRlIiwib2xkTmFtZSIsIm5ld05hbWUiLCJhc3NpZ24iLCJ0YXNrcyIsIl90YXNrTGlzdCIsIl9jaGVja1Rhc2tFdmVudCIsIm5vZGUiLCJncm91cERhdGEiLCJ0YXNrSW5kZXgiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfY2hhbmdlU3RhdHVzIiwicGFyZW50RWxlbWVudCIsInRvZ2dsZSIsIl9nZXRJbmZvIiwiY29uZmlybSIsInJlbW92ZVNpbmdsZSIsInNwbGljZSIsImFsZXJ0IiwiY29uZmlybU1hc3NSZW1vdmUiLCJyZW1vdmVDb21wbGV0ZWQiLCJ0YXNrUmVmIiwibmV3VGFzayIsInB1c2giLCJzZWxlY3RlZEluZGV4IiwibWVudUNvbnRhaW5lciIsIm1lbnVPcGVuQnV0dG9uIiwibWVudUNsb3NlQnV0dG9uIiwiX29uU2NyZWVuU2l6ZSIsInNjcm9sbFdpZHRoIiwidmlzaWJpbGl0eSIsImxlZnQiLCJfdG9nZ2xlTWVudSIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJ5QkFFQSxNQUFNQSxFQVFHLENBQ0xDLHVCQVBJQyxTQUFTQyxjQUFjLDRCQVEzQkMsZ0JBTklGLFNBQVNDLGNBQWMscUJBTzNCRSxXQU5pQkgsU0FBU0MsY0FBYyxrQkFPeENHLFlBTmtCSixTQUFTQyxjQUFjLGtCQVV2Q0ksRUFDZ0IsS0FDbEJDLGFBQWFDLFFBQ1gsUUFBU1AsU0FBU1EsZ0JBQWdCQyxhQUFhLFVBRWpESCxhQUFhQyxRQUFRLHFCQUNqQlQsRUFBSUksZ0JBQWdCTyxhQUFhLGtCQXFEbkNDLEdBN0NpQixNQUNyQixNQVFNQyxFQUFnQkMsSUFDbUMsVUFBbkRaLFNBQVNRLGdCQUFnQkMsYUFBYSxTQUN4Q0ksSUFFQUMsSUFFRlQsS0FHSVEsRUFBYSxLQUNqQmYsRUFBSU0sWUFBWVcsYUFBYSxlQUFnQixTQUM3Q2YsU0FBU1EsZ0JBQWdCTyxhQUFhLFFBQVMsUUFDL0NqQixFQUFJTSxZQUFZWSxNQUFNQyxtQkFBcUIsd0JBQzNDbkIsRUFBSUssV0FBV1ksYUFBYSxNQUN4QixtREFHQUQsRUFBYyxLQUNsQmhCLEVBQUlNLFlBQVlXLGFBQWEsZUFBZ0IsUUFDN0NmLFNBQVNRLGdC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WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgRE9NID0gKCgpID0+IHtcbiAgY29uc3QgYWNjZXNzaWJpbGl0eUNvbnRhaW5lciA9IFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FjY2Vzc2liaWxpdHktY29udGFpbmVyXCIpO1xuICBjb25zdCBhbmltYXRpb25Td2l0Y2ggPSBcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhbmltYXRpb24tc3dpdGNoXCIpO1xuICBjb25zdCBnaXRodWJMb2dvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsb3dlci1uYXYgaW1nXCIpO1xuICBjb25zdCB0aGVtZVN3aXRjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGhlbWUtc3dpdGNoXCIpO1xuXG4gIHJldHVybiB7XG4gICAgYWNjZXNzaWJpbGl0eUNvbnRhaW5lcixcbiAgICBhbmltYXRpb25Td2l0Y2gsXG4gICAgZ2l0aHViTG9nbyxcbiAgICB0aGVtZVN3aXRjaFxuICB9XG59KSgpO1xuXG5jb25zdCBzZXR0aW5ncyA9ICgoKSA9PiB7XG4gIGNvbnN0IHNhdmVUb0xvY2FsID0gKCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgXCJ0aGVtZVwiLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGhlbWVcIikpO1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJhbmltYXRpb25zLWVuYWJsZWRcIiwgXG4gICAgICAgIERPTS5hbmltYXRpb25Td2l0Y2guZ2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIpKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNhdmVUb0xvY2FsXG4gIH07XG59KSgpO1xuXG5jb25zdCBkaXNwbGF5T3B0aW9ucyA9ICgoKSA9PiB7XG4gIGNvbnN0IF9vbkxvYWQgPSAoKSA9PiB7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidGhlbWVcIikgPT09IFwibGlnaHRcIikge1xuICAgICAgX2xpZ2h0VGhlbWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2RhcmtUaGVtZSgpO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgX3RvZ2dsZVRoZW1lID0gKGUpID0+IHtcbiAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcInRoZW1lXCIpID09PSBcImxpZ2h0XCIpIHtcbiAgICAgIF9kYXJrVGhlbWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2xpZ2h0VGhlbWUoKTtcbiAgICB9O1xuICAgIHNldHRpbmdzLnNhdmVUb0xvY2FsKCk7XG4gIH07XG5cbiAgY29uc3QgX2RhcmtUaGVtZSA9ICgpID0+IHtcbiAgICBET00udGhlbWVTd2l0Y2guc2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIsIFwiZmFsc2VcIik7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcInRoZW1lXCIsIFwiZGFya1wiKTtcbiAgICBET00udGhlbWVTd2l0Y2guc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gXCJjZW50ZXIgYm90dG9tIC0wLjhyZW1cIjtcbiAgICBET00uZ2l0aHViTG9nby5zZXRBdHRyaWJ1dGUoXCJzcmNcIixcbiAgICAgICAgXCJhc3NldHMvaW1hZ2VzL2xvZ29zL0dpdEh1Yi1NYXJrLUxpZ2h0LTMycHgucG5nXCIpO1xuICB9O1xuXG4gIGNvbnN0IF9saWdodFRoZW1lID0gKCkgPT4ge1xuICAgIERPTS50aGVtZVN3aXRjaC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgXCJ0cnVlXCIpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiLCBcImxpZ2h0XCIpO1xuICAgIERPTS50aGVtZVN3aXRjaC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBcImNlbnRlciB0b3AgMnB4XCI7XG4gICAgRE9NLmdpdGh1YkxvZ28uc2V0QXR0cmlidXRlKFwic3JjXCIsXG4gICAgXCJhc3NldHMvaW1hZ2VzL2xvZ29zL0dpdEh1Yi1NYXJrLTMycHgucG5nXCIpO1xuICB9O1xuXG4gIERPTS50aGVtZVN3aXRjaC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3RvZ2dsZVRoZW1lKTtcbiAgRE9NLnRoZW1lU3dpdGNoLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XG4gICAgaWYgKGUua2V5ID09PSBcIiBcIikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgX3RvZ2dsZVRoZW1lKCk7XG4gICAgfTtcbiAgfSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIF9vbkxvYWQpO1xufSkoKTtcblxuY29uc3QgYWNjZXNzaWJpbGl0eU9wdGlvbnMgPSAoKCkgPT4ge1xuICBjb25zdCBfb25Mb2FkID0gKCkgPT4ge1xuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImFuaW1hdGlvbnMtZW5hYmxlZFwiKSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICBhbmltYXRpb25zRGlzYWJsZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5pbWF0aW9uc0VuYWJsZWQoKTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IF90b2dnbGVBbmltYXRpb25zID0gKCkgPT4ge1xuICAgIGlmIChET00uYW5pbWF0aW9uU3dpdGNoLmdldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiKSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmltYXRpb25zRW5hYmxlZCgpO1xuICAgIH07XG4gICAgc2V0dGluZ3Muc2F2ZVRvTG9jYWwoKTtcbiAgfTtcblxuICBjb25zdCBhbmltYXRpb25zRW5hYmxlZCA9ICgpID0+IHtcbiAgICBET00uYW5pbWF0aW9uU3dpdGNoLnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLCBcInRydWVcIik7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJzbW9vdGhcIjtcbiAgICBET00uYWNjZXNzaWJpbGl0eUNvbnRhaW5lci5zdHlsZS50cmFuc2l0aW9uID0gXCJ0b3AgMC43NXMgZWFzZS1pbi1vdXRcIjtcbiAgICBET00uYW5pbWF0aW9uU3dpdGNoLnRleHRDb250ZW50ID0gXCJBbmltYXRpb25zIEVuYWJsZWRcIjtcbiAgICBET00udGhlbWVTd2l0Y2guc3R5bGUudHJhbnNpdGlvbiA9IFwiYmFja2dyb3VuZC1wb3NpdGlvbiAwLjNzIGVhc2UtaW5cIjtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW4tbmF2XCIpLnN0eWxlLnRyYW5zaXRpb24gPSBcImxlZnQgMC41c1wiO1xuICAgIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5sYWJlbC1hcnJvd1wiKSkuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0uc3R5bGUudHJhbnNpdGlvbiA9IFwidHJhbnNmb3JtIDAuNzVzXCI7XG4gICAgfSk7XG4gIH07XG4gICAgICAgIFxuICBjb25zdCBhbmltYXRpb25zRGlzYWJsZWQgPSAoKSA9PiB7XG4gICAgRE9NLmFuaW1hdGlvblN3aXRjaC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgXCJmYWxzZVwiKTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIjtcbiAgICBET00uYW5pbWF0aW9uU3dpdGNoLnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLCBcImZhbHNlXCIpO1xuICAgIERPTS5hbmltYXRpb25Td2l0Y2gudGV4dENvbnRlbnQgPSBcIkFuaW1hdGlvbnMgRGlzYWJsZWRcIjtcbiAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYW5pbWF0ZWRcIikpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpdGVtLnN0eWxlLnRyYW5zaXRpb24gPSBcIm5vbmVcIjtcbiAgICB9KTtcbiAgfTtcblxuICBET00uYW5pbWF0aW9uU3dpdGNoLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfdG9nZ2xlQW5pbWF0aW9ucyk7XG4gIERPTS5hbmltYXRpb25Td2l0Y2guYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICBpZiAoZS5rZXkgPT09IFwiIFwiKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBfdG9nZ2xlQW5pbWF0aW9ucygpO1xuICAgIH07XG4gIH0pO1xuICBcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIF9vbkxvYWQpO1xuXG4gIHJldHVybiB7XG4gICAgYW5pbWF0aW9uc0VuYWJsZWQsXG4gICAgYW5pbWF0aW9uc0Rpc2FibGVkXG4gIH1cbn0pKCk7XG5cbmV4cG9ydCB7YWNjZXNzaWJpbGl0eU9wdGlvbnMsIGRpc3BsYXlPcHRpb25zLCBzZXR0aW5nc30iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYWNjZXNzaWJpbGl0eU9wdGlvbnMsIHNldHRpbmdzIH0gZnJvbSBcIi4vc2l0ZS1zZXR0aW5nc1wiO1xuXG5jb25zdCBET00gPSAoKCkgPT4ge1xuICBjb25zdCBtb2RhbEJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtYm94XCIpO1xuICBjb25zdCBtb2RhbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtY29udGFpbmVyXCIpO1xuXG4gIHJldHVybiB7XG4gICAgbW9kYWxCb3gsXG4gICAgbW9kYWxDb250YWluZXJcbiAgfVxufSkoKTtcblxuY29uc3QgZ2VuZXJhbE1vZGFsID0gKCgpID0+IHtcbiAgY29uc3Qgb25DbG9zZSA9ICgpID0+IHtcbiAgICB3aGlsZSAoRE9NLm1vZGFsQm94LmZpcnN0Q2hpbGQpIHtcbiAgICAgIERPTS5tb2RhbEJveC5yZW1vdmVDaGlsZChET00ubW9kYWxCb3guZmlyc3RDaGlsZClcbiAgICB9O1xuICAgIERPTS5tb2RhbENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgRE9NLm1vZGFsQm94LmRhdGFzZXQuaW5kZXhSZWYgPSBcIlwiO1xuICAgIERPTS5tb2RhbEJveC5kYXRhc2V0Lmdyb3VwUmVmID0gXCJcIjtcbiAgfTtcblxuICBjb25zdCBvbk9wZW4gPSAoKSA9PiB7XG4gICAgRE9NLm1vZGFsQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWNsb3NlLWJ1dHRvblwiKS5mb2N1cygpO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZUNsb3NlQnRuID0gKCkgPT4ge1xuICAgIGNvbnN0IGNsb3NlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjbG9zZUJ0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIGNsb3NlQnRuLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJDbG9zZSBtb2RhbFwiKTtcbiAgICBjbG9zZUJ0bi5jbGFzc0xpc3QuYWRkKFwibW9kYWwtY2xvc2UtYnV0dG9uXCIsIFwiY2xvc2UtYnRuXCIsIFwiZm9jdXNhYmxlXCIpO1xuICAgIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBnZW5lcmFsTW9kYWwub25DbG9zZSk7XG4gICAgRE9NLm1vZGFsQm94LmFwcGVuZENoaWxkKGNsb3NlQnRuKTtcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZUNsb3NlQnRuLFxuICAgIG9uQ2xvc2UsXG4gICAgb25PcGVuXG4gIH1cbn0pKCk7XG5cbmNvbnN0IHdhcm5pbmdNb2RhbCA9ICgoKSA9PiB7XG4gIGNvbnN0IF9zZWxlY3RPcHRpb24gPSAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlLWJ1dHRvblwiKSkge1xuICAgICAgYWNjZXNzaWJpbGl0eU9wdGlvbnMuYW5pbWF0aW9uc0Rpc2FibGVkKCk7XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJlbmFibGUtYnV0dG9uXCIpKSB7XG4gICAgICBhY2Nlc3NpYmlsaXR5T3B0aW9ucy5hbmltYXRpb25zRW5hYmxlZCgpO1xuICAgIH07XG4gICAgc2V0dGluZ3Muc2F2ZVRvTG9jYWwoKTtcbiAgICBnZW5lcmFsTW9kYWwub25DbG9zZSgpO1xuICB9O1xuXG4gIGNvbnN0IF9yZW5kZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgaGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICBoZWFkaW5nLnRleHRDb250ZW50ID0gXCJUaGlzIHNpdGUgdXNlcyBtaW5pbWFsIGFuaW1hdGlvbiBlZmZlY3RzLlwiO1xuXG4gICAgY29uc3QgcGFyYTEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBwYXJhMS50ZXh0Q29udGVudCA9IFwiRWZmZWN0cyBpbmNsdWRlIG1vdmluZyBtZW51cyBhbmQgc21vb3RoIHNjcm9sbGluZy4gSWYgeW91IHN1ZmZlciBmcm9tIGEgdmVzdGlidWxhciBkaXNvcmRlciBvciBvdGhlcndpc2UgcHJlZmVyIG5vIGFuaW1hdGlvbnMsIHlvdSBjYW4gdHVybiB0aGVtIG9mZiBieSBjbGlja2luZyB0aGUgZmlyc3QgYnV0dG9uIGJlbG93LlwiO1xuXG4gICAgY29uc3QgcGFyYTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBwYXJhMi50ZXh0Q29udGVudD0gXCJZb3UgY2FuIGxhdGVyIGNoYW5nZSB0aGlzIHNldHRpbmcgaW4gdGhlIERpc3BsYXkgJiBBY2Nlc3NpYmlsaXR5IHRhYiBhdCB0aGUgdG9wIG9mIHRoZSBwYWdlLlwiO1xuXG4gICAgY29uc3QgZGlzYWJsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgZGlzYWJsZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIGRpc2FibGVCdXR0b24uY2xhc3NMaXN0LmFkZChcImRpc2FibGUtYnV0dG9uXCIsIFwiZm9jdXNhYmxlXCIsIFwicHJpbWFyeS1idG5cIik7XG4gICAgZGlzYWJsZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiRElTQUJMRSBBTklNQVRJT05TXCI7XG4gICAgZGlzYWJsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3NlbGVjdE9wdGlvbik7XG5cbiAgICBjb25zdCBlbmFibGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGVuYWJsZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIGVuYWJsZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZW5hYmxlLWJ1dHRvblwiLCBcImZvY3VzYWJsZVwiLCBcInNlY29uZGFyeS1idG5cIik7XG4gICAgZW5hYmxlQnV0dG9uLnRleHRDb250ZW50ID0gXCJFTkFCTEUgQU5JTUFUSU9OU1wiO1xuICAgIGVuYWJsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3NlbGVjdE9wdGlvbik7XG5cbiAgICBET00ubW9kYWxCb3guYXBwZW5kQ2hpbGQoaGVhZGluZyk7XG4gICAgRE9NLm1vZGFsQm94LmFwcGVuZENoaWxkKHBhcmExKTtcbiAgICBET00ubW9kYWxCb3guYXBwZW5kQ2hpbGQocGFyYTIpO1xuICAgIERPTS5tb2RhbEJveC5hcHBlbmRDaGlsZChkaXNhYmxlQnV0dG9uKTtcbiAgICBET00ubW9kYWxCb3guYXBwZW5kQ2hpbGQoZW5hYmxlQnV0dG9uKTtcblxuICAgIERPTS5tb2RhbENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gIH07XG5cbiAgY29uc3QgX29uTG9hZCA9ICgpID0+IHtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgX3JlbmRlcigpO1xuICAgIH07XG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIF9vbkxvYWQpO1xufSkoKTtcblxuY29uc3QgZ3JvdXBNb2RhbCA9ICgoKSA9PiB7XG4gIGNvbnN0IF9kZWZhdWx0R3JvdXBzID0gW1wiSW1wb3J0YW50XCIsIFwiTmV4dCA3IERheXNcIiwgXCJMYXRlclwiLCBcIkV2ZW50dWFsbHlcIl07XG4gIGNvbnN0IF90YXNrSGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZWxlY3RlZC1ncm91cFwiKTtcblxuICBjb25zdCBfcmVuZGVyID0gKGUpID0+IHtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gICAgY29uc3QgZmllbGRzZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG4gICAgY29uc3QgbGVnZW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxlZ2VuZFwiKTtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnN0IG1haW5CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cbiAgICBjb25zdCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgbmFtZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcIm5hbWUtaW5wdXRcIik7XG4gICAgbmFtZUxhYmVsLnRleHRDb250ZW50ID0gXCJHcm91cCBOYW1lXCI7XG5cbiAgICBjb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgIG5hbWVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJyZXF1aXJlZFwiLCBcInRydWVcIik7XG4gICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwibmFtZS1pbnB1dFwiKTtcbiAgICBuYW1lSW5wdXQuc2V0QXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIpO1xuICAgIG5hbWVJbnB1dC5jbGFzc0xpc3QuYWRkKFwiZm9jdXNhYmxlXCIpO1xuXG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFkZC1ncm91cC1idG5cIikpIHtcbiAgICAgIGxlZ2VuZC50ZXh0Q29udGVudCA9IFwiQWRkIGEgR3JvdXBcIjtcbiAgICAgIG1haW5CdG4uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInN1Ym1pdFwiKTtcbiAgICAgIG1haW5CdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJBREQgR1JPVVBcIik7XG4gICAgICBtYWluQnRuLmNsYXNzTGlzdC5hZGQoXCJzdWJtaXQtZ3JvdXAtYnRuXCIsIFwicHJpbWFyeS1idG5cIiwgXCJmb2N1c2FibGVcIiwgXCJzdWJtaXRcIik7XG4gICAgICBkaXYuYXBwZW5kQ2hpbGQobWFpbkJ0bik7XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJncm91cC1vcHRpb24tYnRuXCIpKSB7XG4gICAgICBsZWdlbmQudGV4dENvbnRlbnQgPSBcIkdyb3VwIE9wdGlvbnNcIjtcbiAgICAgIG1haW5CdG4uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInN1Ym1pdFwiKTtcbiAgICAgIG1haW5CdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJVUERBVEVcIik7XG4gICAgICBtYWluQnRuLmNsYXNzTGlzdC5hZGQoXCJ1cGRhdGUtZ3JvdXAtYnRuXCIsIFwic2Vjb25kYXJ5LWJ0blwiLCBcImZvY3VzYWJsZVwiLCBcInN1Ym1pdFwiKTtcblxuICAgICAgY29uc3QgZGVsZXRlR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgZGVsZXRlR3JvdXAuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICAgIGRlbGV0ZUdyb3VwLmNsYXNzTGlzdC5hZGQoXCJkZWxldGUtZ3JvdXAtYnRuXCIsIFwiZGVsZXRlLWJ0blwiLCBcImZvY3VzYWJsZVwiKTtcbiAgICAgIGRlbGV0ZUdyb3VwLnRleHRDb250ZW50ID0gXCJERUxFVEUgR1JPVVBcIjtcblxuICAgICAgY29uc3QgZGVsZXRlQ29tcGxldGVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGRlbGV0ZUNvbXBsZXRlZC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgICAgZGVsZXRlQ29tcGxldGVkLmNsYXNzTGlzdC5hZGQoXCJkZWxldGUtY29tcGxldGVkLWJ0blwiLCBcImRlbGV0ZS1idG5cIiwgXCJmb2N1c2FibGVcIik7XG4gICAgICBkZWxldGVDb21wbGV0ZWQudGV4dENvbnRlbnQgPSBcIkRFTEVURSBDT01QTEVURUQgVEFTS1NcIjtcblxuICAgICAgaWYgKF9kZWZhdWx0R3JvdXBzLmluZGV4T2YoX3Rhc2tIZWFkZXIudGV4dENvbnRlbnQpID49IDApIHtcbiAgICAgICAgbmFtZUxhYmVsLnN0eWxlLm9wYWNpdHkgPSBcIjAuMzhcIjtcbiAgICAgICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgbmFtZUlucHV0LnN0eWxlLm9wYWNpdHkgPSBcIjAuMzhcIjtcbiAgICAgICAgbWFpbkJ0bi5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XG4gICAgICAgIG1haW5CdG4uc3R5bGUub3BhY2l0eSA9IFwiMC4zOFwiO1xuICAgICAgICBkZWxldGVHcm91cC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XG4gICAgICAgIGRlbGV0ZUdyb3VwLnN0eWxlLm9wYWNpdHkgPSBcIjAuMzhcIjtcbiAgICAgIH07XG5cbiAgICAgIGRpdi5hcHBlbmRDaGlsZChtYWluQnRuKTtcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChkZWxldGVHcm91cCk7XG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoZGVsZXRlQ29tcGxldGVkKTtcbiAgICB9O1xuXG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQobGVnZW5kKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChuYW1lTGFiZWwpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKGZpZWxkc2V0KTtcbiAgICBnZW5lcmFsTW9kYWwuY3JlYXRlQ2xvc2VCdG4oKTtcbiAgICBET00ubW9kYWxCb3guYXBwZW5kQ2hpbGQoZm9ybSk7XG4gIH07XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ncm91cC1vcHRpb24tYnRuXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIF9yZW5kZXIoZSk7XG4gICAgZ2VuZXJhbE1vZGFsLm9uT3BlbigpO1xuICB9KTtcblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC1ncm91cC1idG5cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgX3JlbmRlcihlKTtcbiAgICBnZW5lcmFsTW9kYWwub25PcGVuKCk7XG4gIH0pO1xufSkoKTtcblxuY29uc3QgdGFza01vZGFsID0gKCgpID0+IHtcbiAgY29uc3QgX3ByaW9yaXR5QXJyYXkgPSBbXCJOb3JtYWxcIiwgXCJJbXBvcnRhbnRcIl07XG5cbiAgLy8gcGFzcyBncm91cCBsaXN0IGZyb20gdGFzayBtb2R1bGUgcGF0dGVybiBpbiBsb2dpYy5qcyBmaWxlIGFzIGFyZ3VtZW50XG4gIGNvbnN0IHJlbmRlciA9IChlLCBncm91cExpc3QpID0+IHtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gICAgY29uc3QgZmllbGRzZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG4gICAgY29uc3QgbGVnZW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxlZ2VuZFwiKTtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgY29uc3QgbmFtZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIG5hbWVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJuYW1lLWlucHV0XCIpO1xuICAgIG5hbWVMYWJlbC50ZXh0Q29udGVudCA9IFwiVGFzayBOYW1lIChyZXF1aXJlZClcIjtcblxuICAgIGNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBuYW1lSW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgbmFtZUlucHV0LnNldEF0dHJpYnV0ZShcImlkXCIsIFwibmFtZS1pbnB1dFwiKTtcbiAgICBuYW1lSW5wdXQuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgXCJFbnRlciBhIHRhc2sgbmFtZVwiKTtcbiAgICBuYW1lSW5wdXQuc2V0QXR0cmlidXRlKFwicmVxdWlyZWRcIiwgXCJ0cnVlXCIpO1xuICAgIG5hbWVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIik7XG4gICAgbmFtZUlucHV0LmNsYXNzTmFtZSA9IFwiZm9jdXNhYmxlXCI7XG5cbiAgICBjb25zdCBncm91cExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGdyb3VwTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwiZ3JvdXAtc2VsZWN0XCIpO1xuICAgIGdyb3VwTGFiZWwudGV4dENvbnRlbnQgPSBcIkdyb3VwXCI7XG5cbiAgICBjb25zdCBncm91cFNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgZ3JvdXBTZWxlY3Quc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJncm91cC1zZWxlY3RcIik7XG4gICAgZ3JvdXBTZWxlY3QuY2xhc3NOYW1lID0gXCJmb2N1c2FibGVcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZ3JvdXBPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgZ3JvdXBPcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgZ3JvdXBMaXN0W2ldKTtcbiAgICAgIGdyb3VwT3B0aW9uLnRleHRDb250ZW50ID0gZ3JvdXBMaXN0W2ldO1xuICAgICAgZ3JvdXBTZWxlY3QuYXBwZW5kQ2hpbGQoZ3JvdXBPcHRpb24pO1xuICAgIH07XG5cbiAgICBjb25zdCBwcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIHByaW9yaXR5TGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwicHJpb3JpdHktc2VsZWN0XCIpO1xuICAgIHByaW9yaXR5TGFiZWwudGV4dENvbnRlbnQgPSBcIlByaW9yaXR5XCI7XG5cbiAgICBjb25zdCBwcmlvcml0eVNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgcHJpb3JpdHlTZWxlY3Quc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJwcmlvcml0eS1zZWxlY3RcIik7XG4gICAgcHJpb3JpdHlTZWxlY3QuY2xhc3NOYW1lID0gXCJmb2N1c2FibGVcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9wcmlvcml0eUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBwcmlvcml0eU9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICBwcmlvcml0eU9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBfcHJpb3JpdHlBcnJheVtpXSk7XG4gICAgICBwcmlvcml0eU9wdGlvbi50ZXh0Q29udGVudCA9IF9wcmlvcml0eUFycmF5W2ldO1xuICAgICAgcHJpb3JpdHlTZWxlY3QuYXBwZW5kQ2hpbGQocHJpb3JpdHlPcHRpb24pO1xuICAgIH07XG5cbiAgICBjb25zdCBkYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgZGF0ZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImRhdGUtc2VsZWN0XCIpO1xuICAgIGRhdGVMYWJlbC50ZXh0Q29udGVudCA9IFwiRHVlIERhdGUgKG9wdGlvbmFsKVwiO1xuXG4gICAgY29uc3QgZGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGRhdGVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiZGF0ZVwiKTtcbiAgICBkYXRlSW5wdXQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJkYXRlLXNlbGVjdFwiKTtcbiAgICBkYXRlSW5wdXQuY2xhc3NOYW1lID0gXCJmb2N1c2FibGVcIjtcblxuICAgIGNvbnN0IG5vdGVzTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgbm90ZXNMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJub3Rlcy1pbnB1dFwiKTtcbiAgICBub3Rlc0xhYmVsLnRleHRDb250ZW50ID0gXCJBZGRpdGlvbmFsIE5vdGVzXCI7XG5cbiAgICBjb25zdCBub3Rlc0lucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICAgIG5vdGVzSW5wdXQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJub3Rlcy1pbnB1dFwiKTtcbiAgICBub3Rlc0lucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIFwiRW50ZXIgYW55IGFkZGl0aW9uYWwgbm90ZXMgZm9yIHRoZSB0YXNrXCIpO1xuICAgIG5vdGVzSW5wdXQuY2xhc3NOYW1lID0gXCJmb2N1c2FibGVcIjtcblxuICAgIGlmIChlLnRhcmdldC50ZXh0Q29udGVudC5pbmNsdWRlcyhcIkFERCBUQVNLXCIpKSB7XG4gICAgICBsZWdlbmQudGV4dENvbnRlbnQgPSBcIkFkZCBhIFRhc2tcIjtcblxuICAgICAgY29uc3QgYWRkT25lQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgYWRkT25lQnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gICAgICBhZGRPbmVCdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJBREQgT05FXCIpO1xuICAgICAgYWRkT25lQnRuLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJBZGQgdGFzayBhbmQgY2xvc2UgbW9kYWxcIik7XG4gICAgICBhZGRPbmVCdG4uY2xhc3NMaXN0LmFkZChcImFkZC1zaW5nbGUtYnRuXCIsIFwicHJpbWFyeS1idG5cIixcInN1Ym1pdFwiLCBcImZvY3VzYWJsZVwiKTtcblxuICAgICAgY29uc3QgYWRkTWFueUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIGFkZE1hbnlCdG4uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInN1Ym1pdFwiKTtcbiAgICAgIGFkZE1hbnlCdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJBREQgTUFOWVwiKTtcbiAgICAgIGFkZE1hbnlCdG4uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIkFkZCB0YXNrIGFuZCBrZWVwIG1vZGFsIG9wZW5cIik7XG4gICAgICBhZGRNYW55QnRuLmNsYXNzTGlzdC5hZGQoXCJhZGQtbWFueS1idG5cIiwgXCJzZWNvbmRhcnktYnRuXCIsIFwic3VibWl0XCIsIFwiZm9jdXNhYmxlXCIpO1xuXG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoYWRkT25lQnRuKTtcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChhZGRNYW55QnRuKTtcbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LnRleHRDb250ZW50ID09PSAoXCJFRElUXCIpKSB7XG4gICAgICBsZWdlbmQudGV4dENvbnRlbnQgPSBcIkVkaXQgVGFza1wiO1xuXG4gICAgICBjb25zdCBlZGl0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgZWRpdEJ0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwic3VibWl0XCIpO1xuICAgICAgZWRpdEJ0bi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIlVQREFURVwiKTtcbiAgICAgIGVkaXRCdG4uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIlVwZGF0ZSB0YXNrIGFuZCBjbG9zZSBtb2RhbFwiKTtcbiAgICAgIGVkaXRCdG4uY2xhc3NMaXN0LmFkZChcInVwZGF0ZS10YXNrLWJ0blwiLCBcInByaW1hcnktYnRuXCIsIFwiZm9jdXNhYmxlXCIpO1xuXG4gICAgICBncm91cFNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XG4gICAgICBncm91cExhYmVsLnN0eWxlLm9wYWNpdHkgPSBcIjAuMzhcIjtcbiAgICAgIGdyb3VwU2VsZWN0LnN0eWxlLm9wYWNpdHkgPSBcIjAuMzhcIjtcblxuICAgICAgZGl2LmFwcGVuZENoaWxkKGVkaXRCdG4pO1xuICAgIH07XG5cbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChsZWdlbmQpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKG5hbWVMYWJlbCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQobmFtZUlucHV0KTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChncm91cExhYmVsKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGdyb3VwU2VsZWN0KTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKHByaW9yaXR5TGFiZWwpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQocHJpb3JpdHlTZWxlY3QpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZGF0ZUxhYmVsKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGZpZWxkc2V0LmFwcGVuZENoaWxkKGRhdGVJbnB1dCk7XG4gICAgZmllbGRzZXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChub3Rlc0xhYmVsKTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChub3Rlc0lucHV0KTtcbiAgICBmaWVsZHNldC5hcHBlbmRDaGlsZChkaXYpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoZmllbGRzZXQpO1xuICAgIGdlbmVyYWxNb2RhbC5jcmVhdGVDbG9zZUJ0bigpO1xuICAgIERPTS5tb2RhbEJveC5hcHBlbmRDaGlsZChmb3JtKTtcbiAgfTtcblxuICByZXR1cm4ge3JlbmRlcn1cbn0pKCk7XG5cbmV4cG9ydCB7IGdlbmVyYWxNb2RhbCwgZ3JvdXBNb2RhbCwgdGFza01vZGFsLCB3YXJuaW5nTW9kYWwgfSIsInZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDA7XG5cbmZ1bmN0aW9uIGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpICUgTUlMTElTRUNPTkRTX0lOX01JTlVURTtcbn1cbi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoZGlydHlEYXRlLmdldFRpbWUoKSk7XG4gIHZhciBiYXNlVGltZXpvbmVPZmZzZXQgPSBNYXRoLmNlaWwoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgZGF0ZS5zZXRTZWNvbmRzKDAsIDApO1xuICB2YXIgaGFzTmVnYXRpdmVVVENPZmZzZXQgPSBiYXNlVGltZXpvbmVPZmZzZXQgPiAwO1xuICB2YXIgbWlsbGlzZWNvbmRzUGFydE9mVGltZXpvbmVPZmZzZXQgPSBoYXNOZWdhdGl2ZVVUQ09mZnNldCA/IChNSUxMSVNFQ09ORFNfSU5fTUlOVVRFICsgZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQoZGF0ZSkpICUgTUlMTElTRUNPTkRTX0lOX01JTlVURSA6IGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpO1xuICByZXR1cm4gYmFzZVRpbWV6b25lT2Zmc2V0ICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArIG1pbGxpc2Vjb25kc1BhcnRPZlRpbWV6b25lT2Zmc2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgY29tcGFyZUFzY1xuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAtMSwgMCBvciAxLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcGFyZSB0aGUgdHdvIGRhdGVzIGFuZCByZXR1cm4gMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBhZnRlciB0aGUgc2Vjb25kLFxuICogLTEgaWYgdGhlIGZpcnN0IGRhdGUgaXMgYmVmb3JlIHRoZSBzZWNvbmQgb3IgMCBpZiBkYXRlcyBhcmUgZXF1YWwuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgcmVzdWx0IG9mIHRoZSBjb21wYXJpc29uXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbXBhcmUgMTEgRmVicnVhcnkgMTk4NyBhbmQgMTAgSnVseSAxOTg5OlxuICogdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2MobmV3IERhdGUoMTk4NywgMSwgMTEpLCBuZXcgRGF0ZSgxOTg5LCA2LCAxMCkpXG4gKiAvLz0+IC0xXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFNvcnQgdGhlIGFycmF5IG9mIGRhdGVzOlxuICogdmFyIHJlc3VsdCA9IFtcbiAqICAgbmV3IERhdGUoMTk5NSwgNiwgMiksXG4gKiAgIG5ldyBEYXRlKDE5ODcsIDEsIDExKSxcbiAqICAgbmV3IERhdGUoMTk4OSwgNiwgMTApXG4gKiBdLnNvcnQoY29tcGFyZUFzYylcbiAqIC8vPT4gW1xuICogLy8gICBXZWQgRmViIDExIDE5ODcgMDA6MDA6MDAsXG4gKiAvLyAgIE1vbiBKdWwgMTAgMTk4OSAwMDowMDowMCxcbiAqIC8vICAgU3VuIEp1bCAwMiAxOTk1IDAwOjAwOjAwXG4gKiAvLyBdXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGFyZUFzYyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIGRpZmYgPSBkYXRlTGVmdC5nZXRUaW1lKCkgLSBkYXRlUmlnaHQuZ2V0VGltZSgpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxOyAvLyBSZXR1cm4gMCBpZiBkaWZmIGlzIDA7IHJldHVybiBOYU4gaWYgZGlmZiBpcyBOYU5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGlmZjtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBtaWxsaXNlY29uZHMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDE0IDEyOjMwOjIwLjYwMCBhbmQgMiBKdWx5IDIwMTQgMTI6MzA6MjEuNzAwP1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMSwgNzAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMCwgNjAwKVxuICogKVxuICogLy89PiAxMTAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICByZXR1cm4gZGF0ZUxlZnQuZ2V0VGltZSgpIC0gZGF0ZVJpZ2h0LmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIGZyb20gJy4uL2RpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluU2Vjb25kc1xuICogQGNhdGVnb3J5IFNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2Ygc2Vjb25kc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBzZWNvbmRzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxNCAxMjozMDowNy45OTkgYW5kIDIgSnVseSAyMDE0IDEyOjMwOjIwLjAwMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5TZWNvbmRzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIwLCAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCA3LCA5OTkpXG4gKiApXG4gKiAvLz0+IDEyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluU2Vjb25kcyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRpZmYgPSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIC8gMTAwMDtcbiAgcmV0dXJuIGRpZmYgPiAwID8gTWF0aC5mbG9vcihkaWZmKSA6IE1hdGguY2VpbChkaWZmKTtcbn0iLCJpbXBvcnQgYXNzaWduIGZyb20gJy4uL2Fzc2lnbi9pbmRleC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9uZU9iamVjdChkaXJ0eU9iamVjdCkge1xuICByZXR1cm4gYXNzaWduKHt9LCBkaXJ0eU9iamVjdCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgZGlydHlPYmplY3QpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXNzaWduIHJlcXVpcmVzIHRoYXQgaW5wdXQgcGFyYW1ldGVyIG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgZGlydHlPYmplY3QgPSBkaXJ0eU9iamVjdCB8fCB7fTtcblxuICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBkaXJ0eU9iamVjdCkge1xuICAgIGlmIChkaXJ0eU9iamVjdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSBkaXJ0eU9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlTdHJpbmcsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoZGlydHlTdHJpbmcpO1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG5cbiAgICBpZiAoIXBhcnNlUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aClcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ10gLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX2RpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gJy4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgY29tcGFyZUFzYyBmcm9tICcuLi9jb21wYXJlQXNjL2luZGV4LmpzJztcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCBkaWZmZXJlbmNlSW5TZWNvbmRzIGZyb20gJy4uL2RpZmZlcmVuY2VJblNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IGNsb25lT2JqZWN0IGZyb20gJy4uL19saWIvY2xvbmVPYmplY3QvaW5kZXguanMnO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSAnLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xudmFyIE1JTlVURVNfSU5fREFZID0gMTQ0MDtcbnZhciBNSU5VVEVTX0lOX01PTlRIID0gNDMyMDA7XG52YXIgTUlOVVRFU19JTl9ZRUFSID0gNTI1NjAwO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXREaXN0YW5jZVN0cmljdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzIGluIHdvcmRzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyBpbiB3b3JkcywgdXNpbmcgc3RyaWN0IHVuaXRzLlxuICogVGhpcyBpcyBsaWtlIGBmb3JtYXREaXN0YW5jZWAsIGJ1dCBkb2VzIG5vdCB1c2UgaGVscGVycyBsaWtlICdhbG1vc3QnLCAnb3ZlcicsXG4gKiAnbGVzcyB0aGFuJyBhbmQgdGhlIGxpa2UuXG4gKlxuICogfCBEaXN0YW5jZSBiZXR3ZWVuIGRhdGVzIHwgUmVzdWx0ICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgMCAuLi4gNTkgc2VjcyAgICAgICAgICB8IFswLi41OV0gc2Vjb25kcyAgICAgfFxuICogfCAxIC4uLiA1OSBtaW5zICAgICAgICAgIHwgWzEuLjU5XSBtaW51dGVzICAgICB8XG4gKiB8IDEgLi4uIDIzIGhycyAgICAgICAgICAgfCBbMS4uMjNdIGhvdXJzICAgICAgIHxcbiAqIHwgMSAuLi4gMjkgZGF5cyAgICAgICAgICB8IFsxLi4yOV0gZGF5cyAgICAgICAgfFxuICogfCAxIC4uLiAxMSBtb250aHMgICAgICAgIHwgWzEuLjExXSBtb250aHMgICAgICB8XG4gKiB8IDEgLi4uIE4geWVhcnMgICAgICAgICAgfCBbMS4uTl0gIHllYXJzICAgICAgIHxcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIGZ1bmN0aW9uIHdhcyByZW5hbWVkIGZyb20gYGRpc3RhbmNlSW5Xb3Jkc1N0cmljdGAgdG8gYGZvcm1hdERpc3RhbmNlU3RyaWN0YFxuICogICB0byBtYWtlIGl0cyBuYW1lIGNvbnNpc3RlbnQgd2l0aCBgZm9ybWF0YCBhbmQgYGZvcm1hdFJlbGF0aXZlYC5cbiAqXG4gKiAtIFRoZSBvcmRlciBvZiBhcmd1bWVudHMgaXMgc3dhcHBlZCB0byBtYWtlIHRoZSBmdW5jdGlvblxuICogICBjb25zaXN0ZW50IHdpdGggYGRpZmZlcmVuY2VJbi4uLmAgZnVuY3Rpb25zLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKlxuICogICBkaXN0YW5jZUluV29yZHNTdHJpY3QoXG4gKiAgICAgbmV3IERhdGUoMjAxNSwgMCwgMiksXG4gKiAgICAgbmV3IERhdGUoMjAxNCwgNiwgMilcbiAqICAgKSAvLz0+ICc2IG1vbnRocydcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqXG4gKiAgIGZvcm1hdERpc3RhbmNlU3RyaWN0KFxuICogICAgIG5ldyBEYXRlKDIwMTQsIDYsIDIpLFxuICogICAgIG5ldyBEYXRlKDIwMTUsIDAsIDIpXG4gKiAgICkgLy89PiAnNiBtb250aHMnXG4gKiAgIGBgYFxuICpcbiAqIC0gYHBhcnRpYWxNZXRob2RgIG9wdGlvbiBpcyByZW5hbWVkIHRvIGByb3VuZGluZ01ldGhvZGAuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqXG4gKiAgIGRpc3RhbmNlSW5Xb3Jkc1N0cmljdChcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzIsIDApLFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDEwLCAzMywgMSksXG4gKiAgICAgeyBwYXJ0aWFsTWV0aG9kOiAnY2VpbCcgfVxuICogICApIC8vPT4gJzIgbWludXRlcydcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqXG4gKiAgIGZvcm1hdERpc3RhbmNlU3RyaWN0KFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDEwLCAzMywgMSksXG4gKiAgICAgbmV3IERhdGUoMTk4NiwgMywgNCwgMTAsIDMyLCAwKSxcbiAqICAgICB7IHJvdW5kaW5nTWV0aG9kOiAnY2VpbCcgfVxuICogICApIC8vPT4gJzIgbWludXRlcydcbiAqICAgYGBgXG4gKlxuICogLSBJZiBgcm91bmRpbmdNZXRob2RgIGlzIG5vdCBzcGVjaWZpZWQsIGl0IG5vdyBkZWZhdWx0cyB0byBgcm91bmRgIGluc3RlYWQgb2YgYGZsb29yYC5cbiAqXG4gKiAtIGB1bml0YCBvcHRpb24gbm93IGFjY2VwdHMgb25lIG9mIHRoZSBzdHJpbmdzOlxuICogICAnc2Vjb25kJywgJ21pbnV0ZScsICdob3VyJywgJ2RheScsICdtb250aCcgb3IgJ3llYXInIGluc3RlYWQgb2YgJ3MnLCAnbScsICdoJywgJ2QnLCAnTScgb3IgJ1knXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqXG4gKiAgIGRpc3RhbmNlSW5Xb3Jkc1N0cmljdChcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzIsIDApLFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDEwLCAzMywgMSksXG4gKiAgICAgeyB1bml0OiAnbScgfVxuICogICApXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKlxuICogICBmb3JtYXREaXN0YW5jZVN0cmljdChcbiAqICAgICBuZXcgRGF0ZSgxOTg2LCAzLCA0LCAxMCwgMzMsIDEpLFxuICogICAgIG5ldyBEYXRlKDE5ODYsIDMsIDQsIDEwLCAzMiwgMCksXG4gKiAgICAgeyB1bml0OiAnbWludXRlJyB9XG4gKiAgIClcbiAqICAgYGBgXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBiYXNlRGF0ZSAtIHRoZSBkYXRlIHRvIGNvbXBhcmUgd2l0aFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmFkZFN1ZmZpeD1mYWxzZV0gLSByZXN1bHQgaW5kaWNhdGVzIGlmIHRoZSBzZWNvbmQgZGF0ZSBpcyBlYXJsaWVyIG9yIGxhdGVyIHRoYW4gdGhlIGZpcnN0XG4gKiBAcGFyYW0geydzZWNvbmQnfCdtaW51dGUnfCdob3VyJ3wnZGF5J3wnbW9udGgnfCd5ZWFyJ30gW29wdGlvbnMudW5pdF0gLSBpZiBzcGVjaWZpZWQsIHdpbGwgZm9yY2UgYSB1bml0XG4gKiBAcGFyYW0geydmbG9vcid8J2NlaWwnfCdyb3VuZCd9IFtvcHRpb25zLnJvdW5kaW5nTWV0aG9kPSdyb3VuZCddIC0gd2hpY2ggd2F5IHRvIHJvdW5kIHBhcnRpYWwgdW5pdHNcbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGRpc3RhbmNlIGluIHdvcmRzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgYmFzZURhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMucm91bmRpbmdNZXRob2RgIG11c3QgYmUgJ2Zsb29yJywgJ2NlaWwnIG9yICdyb3VuZCdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLnVuaXRgIG11c3QgYmUgJ3NlY29uZCcsICdtaW51dGUnLCAnaG91cicsICdkYXknLCAnbW9udGgnIG9yICd5ZWFyJ1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdERpc3RhbmNlYCBwcm9wZXJ0eVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIDIgSnVseSAyMDE0IGFuZCAxIEphbnVhcnkgMjAxNT9cbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVN0cmljdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgbmV3IERhdGUoMjAxNSwgMCwgMikpXG4gKiAvLz0+ICc2IG1vbnRocydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAxIEphbnVhcnkgMjAxNSAwMDowMDoxNVxuICogLy8gYW5kIDEgSmFudWFyeSAyMDE1IDAwOjAwOjAwP1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlU3RyaWN0KFxuICogICBuZXcgRGF0ZSgyMDE1LCAwLCAxLCAwLCAwLCAxNSksXG4gKiAgIG5ldyBEYXRlKDIwMTUsIDAsIDEsIDAsIDAsIDApXG4gKiApXG4gKiAvLz0+ICcxNSBzZWNvbmRzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBmcm9tIDEgSmFudWFyeSAyMDE2XG4gKiAvLyB0byAxIEphbnVhcnkgMjAxNSwgd2l0aCBhIHN1ZmZpeD9cbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVN0cmljdChuZXcgRGF0ZSgyMDE1LCAwLCAxKSwgbmV3IERhdGUoMjAxNiwgMCwgMSksIHtcbiAqICAgYWRkU3VmZml4OiB0cnVlXG4gKiB9KVxuICogLy89PiAnMSB5ZWFyIGFnbydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgZnJvbSAxIEphbnVhcnkgMjAxNlxuICogLy8gdG8gMSBKYW51YXJ5IDIwMTUsIGluIG1pbnV0ZXM/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VTdHJpY3QobmV3IERhdGUoMjAxNiwgMCwgMSksIG5ldyBEYXRlKDIwMTUsIDAsIDEpLCB7XG4gKiAgIHVuaXQ6ICdtaW51dGUnXG4gKiB9KVxuICogLy89PiAnNTI1NjAwIG1pbnV0ZXMnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGZyb20gMSBKYW51YXJ5IDIwMTVcbiAqIC8vIHRvIDI4IEphbnVhcnkgMjAxNSwgaW4gbW9udGhzLCByb3VuZGVkIHVwP1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlU3RyaWN0KG5ldyBEYXRlKDIwMTUsIDAsIDI4KSwgbmV3IERhdGUoMjAxNSwgMCwgMSksIHtcbiAqICAgdW5pdDogJ21vbnRoJyxcbiAqICAgcm91bmRpbmdNZXRob2Q6ICdjZWlsJ1xuICogfSlcbiAqIC8vPT4gJzEgbW9udGgnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMSBBdWd1c3QgMjAxNiBhbmQgMSBKYW51YXJ5IDIwMTUgaW4gRXNwZXJhbnRvP1xuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VTdHJpY3QobmV3IERhdGUoMjAxNiwgNywgMSksIG5ldyBEYXRlKDIwMTUsIDAsIDEpLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcxIGphcm8nXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2VTdHJpY3QoZGlydHlEYXRlLCBkaXJ0eUJhc2VEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcblxuICBpZiAoIWxvY2FsZS5mb3JtYXREaXN0YW5jZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplLmZvcm1hdERpc3RhbmNlIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgY29tcGFyaXNvbiA9IGNvbXBhcmVBc2MoZGlydHlEYXRlLCBkaXJ0eUJhc2VEYXRlKTtcblxuICBpZiAoaXNOYU4oY29tcGFyaXNvbikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH1cblxuICB2YXIgbG9jYWxpemVPcHRpb25zID0gY2xvbmVPYmplY3Qob3B0aW9ucyk7XG4gIGxvY2FsaXplT3B0aW9ucy5hZGRTdWZmaXggPSBCb29sZWFuKG9wdGlvbnMuYWRkU3VmZml4KTtcbiAgbG9jYWxpemVPcHRpb25zLmNvbXBhcmlzb24gPSBjb21wYXJpc29uO1xuICB2YXIgZGF0ZUxlZnQ7XG4gIHZhciBkYXRlUmlnaHQ7XG5cbiAgaWYgKGNvbXBhcmlzb24gPiAwKSB7XG4gICAgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlCYXNlRGF0ZSk7XG4gICAgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgICBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlCYXNlRGF0ZSk7XG4gIH1cblxuICB2YXIgcm91bmRpbmdNZXRob2QgPSBvcHRpb25zLnJvdW5kaW5nTWV0aG9kID09IG51bGwgPyAncm91bmQnIDogU3RyaW5nKG9wdGlvbnMucm91bmRpbmdNZXRob2QpO1xuICB2YXIgcm91bmRpbmdNZXRob2RGbjtcblxuICBpZiAocm91bmRpbmdNZXRob2QgPT09ICdmbG9vcicpIHtcbiAgICByb3VuZGluZ01ldGhvZEZuID0gTWF0aC5mbG9vcjtcbiAgfSBlbHNlIGlmIChyb3VuZGluZ01ldGhvZCA9PT0gJ2NlaWwnKSB7XG4gICAgcm91bmRpbmdNZXRob2RGbiA9IE1hdGguY2VpbDtcbiAgfSBlbHNlIGlmIChyb3VuZGluZ01ldGhvZCA9PT0gJ3JvdW5kJykge1xuICAgIHJvdW5kaW5nTWV0aG9kRm4gPSBNYXRoLnJvdW5kO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwicm91bmRpbmdNZXRob2QgbXVzdCBiZSAnZmxvb3InLCAnY2VpbCcgb3IgJ3JvdW5kJ1wiKTtcbiAgfVxuXG4gIHZhciBzZWNvbmRzID0gZGlmZmVyZW5jZUluU2Vjb25kcyhkYXRlUmlnaHQsIGRhdGVMZWZ0KTtcbiAgdmFyIG9mZnNldEluU2Vjb25kcyA9IChnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGVSaWdodCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGVMZWZ0KSkgLyAxMDAwO1xuICB2YXIgbWludXRlcyA9IHJvdW5kaW5nTWV0aG9kRm4oKHNlY29uZHMgLSBvZmZzZXRJblNlY29uZHMpIC8gNjApO1xuICB2YXIgdW5pdDtcblxuICBpZiAob3B0aW9ucy51bml0ID09IG51bGwpIHtcbiAgICBpZiAobWludXRlcyA8IDEpIHtcbiAgICAgIHVuaXQgPSAnc2Vjb25kJztcbiAgICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCA2MCkge1xuICAgICAgdW5pdCA9ICdtaW51dGUnO1xuICAgIH0gZWxzZSBpZiAobWludXRlcyA8IE1JTlVURVNfSU5fREFZKSB7XG4gICAgICB1bml0ID0gJ2hvdXInO1xuICAgIH0gZWxzZSBpZiAobWludXRlcyA8IE1JTlVURVNfSU5fTU9OVEgpIHtcbiAgICAgIHVuaXQgPSAnZGF5JztcbiAgICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX1lFQVIpIHtcbiAgICAgIHVuaXQgPSAnbW9udGgnO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bml0ID0gJ3llYXInO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB1bml0ID0gU3RyaW5nKG9wdGlvbnMudW5pdCk7XG4gIH0gLy8gMCB1cCB0byA2MCBzZWNvbmRzXG5cblxuICBpZiAodW5pdCA9PT0gJ3NlY29uZCcpIHtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4U2Vjb25kcycsIHNlY29uZHMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEgdXAgdG8gNjAgbWluc1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICdtaW51dGUnKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneE1pbnV0ZXMnLCBtaW51dGVzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxIHVwIHRvIDI0IGhvdXJzXG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ2hvdXInKSB7XG4gICAgdmFyIGhvdXJzID0gcm91bmRpbmdNZXRob2RGbihtaW51dGVzIC8gNjApO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hIb3VycycsIGhvdXJzLCBsb2NhbGl6ZU9wdGlvbnMpOyAvLyAxIHVwIHRvIDMwIGRheXNcbiAgfSBlbHNlIGlmICh1bml0ID09PSAnZGF5Jykge1xuICAgIHZhciBkYXlzID0gcm91bmRpbmdNZXRob2RGbihtaW51dGVzIC8gTUlOVVRFU19JTl9EQVkpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hEYXlzJywgZGF5cywgbG9jYWxpemVPcHRpb25zKTsgLy8gMSB1cCB0byAxMiBtb250aHNcbiAgfSBlbHNlIGlmICh1bml0ID09PSAnbW9udGgnKSB7XG4gICAgdmFyIG1vbnRocyA9IHJvdW5kaW5nTWV0aG9kRm4obWludXRlcyAvIE1JTlVURVNfSU5fTU9OVEgpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNb250aHMnLCBtb250aHMsIGxvY2FsaXplT3B0aW9ucyk7IC8vIDEgeWVhciB1cCB0byBtYXggRGF0ZVxuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd5ZWFyJykge1xuICAgIHZhciB5ZWFycyA9IHJvdW5kaW5nTWV0aG9kRm4obWludXRlcyAvIE1JTlVURVNfSU5fWUVBUik7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneFllYXJzJywgeWVhcnMsIGxvY2FsaXplT3B0aW9ucyk7XG4gIH1cblxuICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInVuaXQgbXVzdCBiZSAnc2Vjb25kJywgJ21pbnV0ZScsICdob3VyJywgJ2RheScsICdtb250aCcgb3IgJ3llYXInXCIpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gJy4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZkRheSBmcm9tICcuLi9zdGFydE9mRGF5L2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHRpbWVzIGFyZSByZW1vdmVkXG4gKiBmcm9tIHRoZSBkYXRlcyBhbmQgdGhlbiB0aGUgZGlmZmVyZW5jZSBpbiBkYXlzIGlzIGNhbGN1bGF0ZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6MDA6MDAgYW5kIDIgSnVseSAyMDEyIDAwOjAwOjAwP1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDFcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBzdGFydE9mRGF5TGVmdCA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBzdGFydE9mRGF5UmlnaHQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIHRpbWVzdGFtcExlZnQgPSBzdGFydE9mRGF5TGVmdC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlMZWZ0KTtcbiAgdmFyIHRpbWVzdGFtcFJpZ2h0ID0gc3RhcnRPZkRheVJpZ2h0LmdldFRpbWUoKSAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIGRheSBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIGRheSBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoKHRpbWVzdGFtcExlZnQgLSB0aW1lc3RhbXBSaWdodCkgLyBNSUxMSVNFQ09ORFNfSU5fREFZKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGZvcm1hdERpc3RhbmNlVG9Ob3dTdHJpY3QgZnJvbSBcImRhdGUtZm5zL2Zvcm1hdERpc3RhbmNlVG9Ob3dTdHJpY3RcIjtcbmltcG9ydCBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMgZnJvbSAnZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzJztcblxuY29uc3QgZ3JvdXBDb250YWluZXIgPSAoKCkgPT4ge1xuICBjb25zdCBfY3VzdG9tR3JvdXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jdXN0b20tZ3JvdXBzLWNvbnRhaW5lclwiKTtcblxuICBjb25zdCBfY2xlYXIgPSAoKSA9PiB7XG4gICAgd2hpbGUgKF9jdXN0b21Hcm91cHMuZmlyc3RDaGlsZCkge1xuICAgICAgX2N1c3RvbUdyb3Vwcy5yZW1vdmVDaGlsZChfY3VzdG9tR3JvdXBzLmZpcnN0Q2hpbGQpO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyID0gKGxpc3QpID0+IHtcbiAgICBfY2xlYXIoKTtcbiAgICBPYmplY3Qua2V5cyhsaXN0KS5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGBHcm91cCBuYW1lOiAke2dyb3VwfWApO1xuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjdXN0b20tZ3JvdXBcIiwgXCJmb2N1c2FibGVcIiwgXCJncm91cC1idG5cIik7XG4gICAgICBidXR0b24udGV4dENvbnRlbnQgPSBncm91cDtcbiAgICAgIF9jdXN0b21Hcm91cHMuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge3JlbmRlcn1cbn0pKCk7XG5cbmNvbnN0IHRhc2tDb250YWluZXIgPSAoKCkgPT4ge1xuICBjb25zdCBfdGFza0hlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VsZWN0ZWQtZ3JvdXBcIik7XG4gIGNvbnN0IF90YXNrc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stY29udGFpbmVyXCIpO1xuXG4gIGNvbnN0IF9jbGVhciA9ICgpID0+IHtcbiAgICB3aGlsZSAoX3Rhc2tzTGlzdC5maXJzdENoaWxkKSB7XG4gICAgICBfdGFza3NMaXN0LnJlbW92ZUNoaWxkKF90YXNrc0xpc3QuZmlyc3RDaGlsZCk7XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBfY2hlY2tEYXRlID0gKGRhdGUpID0+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZSgoZGF0ZSkuc3BsaXQoXCItXCIpLmpvaW4oXCIsIFwiKSk7XG4gICAgcmV0dXJuIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhuZXdEYXRlLCBub3cpO1xuICB9O1xuXG4gIGNvbnN0IF9mb3JtYXR0ZWREYXRlID0gKGRhdGUpID0+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZSgoZGF0ZSkuc3BsaXQoXCItXCIpLmpvaW4oXCIsIFwiKSk7XG4gIFxuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSBkYXRlID09PSBcIlwiOlxuICAgICAgICByZXR1cm4gXCJObyBkdWUgZGF0ZVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKG5ld0RhdGUsIG5vdykgPCAwOlxuICAgICAgICByZXR1cm4gXCJEdWUgZGF0ZSBwYXNzZWRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhuZXdEYXRlLCBub3cpID09PSAwOlxuICAgICAgICByZXR1cm4gXCJUb2RheVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKG5ld0RhdGUsIG5vdykgPT09IDE6XG4gICAgICAgIHJldHVybiBcIlRvbW9ycm93XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMobmV3RGF0ZSwgbm93KSA8PSAyOTpcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhuZXdEYXRlLCBub3cpICsgXCIgZGF5c1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0KG5ld0RhdGUpO1xuICAgICAgICBicmVhaztcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IF9yZW5kZXIgPSAodGFzaywgZ3JvdXAsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgdGFza0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiKTtcbiAgICB0YXNrSXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWdyb3VwXCIsIGdyb3VwKTtcbiAgICB0YXNrSXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIsIGluZGV4KTtcbiAgICB0YXNrSXRlbS5jbGFzc05hbWUgPSBcInRhc2staXRlbVwiO1xuXG4gICAgY29uc3QgcHJpb3JpdHlCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBwcmlvcml0eUJveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGAke3Rhc2sucHJpb3JpdHl9IHRhc2tgKTtcbiAgICBwcmlvcml0eUJveC5jbGFzc05hbWUgPSBcInRhc2stcHJpb3JpdHlcIlxuICAgIGlmICh0YXNrLnByaW9yaXR5ID09PSBcIkltcG9ydGFudFwiKSB7XG4gICAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBpY29uLmNsYXNzTmFtZSA9IFwibWF0ZXJpYWwtaWNvbnNcIjtcbiAgICAgIGljb24udGV4dENvbnRlbnQgPSBcInByaW9yaXR5X2hpZ2hcIjtcbiAgICAgIHByaW9yaXR5Qm94LmFwcGVuZENoaWxkKGljb24pO1xuICAgIH07XG5cbiAgICBjb25zdCBzdGF0dXNCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBzdGF0dXNCb3guc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImNoZWNrYm94XCIpO1xuICAgIHN0YXR1c0JveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgXCJmYWxzZVwiKTtcbiAgICBzdGF0dXNCb3guc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICAgIHN0YXR1c0JveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHRhc2sudGFza05hbWUpO1xuICAgIHN0YXR1c0JveC5jbGFzc0xpc3QuYWRkKFwidGFzay1zdGF0dXNcIiwgXCJmb2N1c2FibGVcIik7XG4gICAgaWYgKHRhc2suY29tcGxldGVkKSB7XG4gICAgICBzdGF0dXNCb3guc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXG4gICAgICBcInVybChhc3NldHMvaW1hZ2VzL2ljb25zL2RvbmUtYmxhY2stMjRkcC5zdmcpXCI7XG4gICAgfTtcblxuICAgIGNvbnN0IG5hbWVGaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIG5hbWVGaWVsZC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYnV0dG9uXCIpO1xuICAgIG5hbWVGaWVsZC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgbmFtZUZpZWxkLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgYERldGFpbHMgZm9yICR7dGFzay50YXNrTmFtZX1gKTtcbiAgICBuYW1lRmllbGQuY2xhc3NMaXN0LmFkZChcInRhc2stbmFtZVwiLCBcImZvY3VzYWJsZVwiKTtcbiAgICBuYW1lRmllbGQudGV4dENvbnRlbnQgPSB0YXNrLnRhc2tOYW1lO1xuXG4gICAgY29uc3QgZGF0ZUZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgZGF0ZUZpZWxkLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXG4gICAgICAgIGBEdWUgZGF0ZSBmb3IgdGFzayAke3Rhc2sudGFza05hbWV9OiAke3Rhc2suZHVlRGF0ZX1gKTtcbiAgICBkYXRlRmllbGQuY2xhc3NOYW1lID0gXCJ0YXNrLWRhdGVcIjtcbiAgICBkYXRlRmllbGQudGV4dENvbnRlbnQgPSBfZm9ybWF0dGVkRGF0ZSh0YXNrLmR1ZURhdGUpO1xuXG4gICAgY29uc3QgZGV0YWlscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZGV0YWlscy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRhc2tcIiwgdGFzay50YXNrTmFtZSk7XG4gICAgZGV0YWlscy5zZXRBdHRyaWJ1dGUoXCJkYXRhLWdyb3VwXCIsIGdyb3VwKTtcbiAgICBkZXRhaWxzLnNldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIiwgaW5kZXgpO1xuICAgIGRldGFpbHMuY2xhc3NOYW1lID0gXCJ0YXNrLWRldGFpbHNcIjtcblxuICAgIGNvbnN0IG5vdGVzRmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBub3Rlc0ZpZWxkLmNsYXNzTmFtZSA9IFwidGFzay1ub3Rlc1wiO1xuICAgIG5vdGVzRmllbGQudGV4dENvbnRlbnQgPSB0YXNrLm5vdGVzO1xuXG4gICAgY29uc3QgZWRpdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgZWRpdEJ0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIGVkaXRCdG4uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBgRWRpdCB0YXNrICR7dGFzay50YXNrTmFtZX1gKTtcbiAgICBlZGl0QnRuLmNsYXNzTGlzdC5hZGQoXCJlZGl0LWJ0blwiLCBcImZvY3VzYWJsZVwiKTtcbiAgICBlZGl0QnRuLnRleHRDb250ZW50ID0gXCJFRElUXCI7XG5cbiAgICBjb25zdCBkZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGRlbGV0ZUJ0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIGRlbGV0ZUJ0bi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGBEZWxldGUgdGFzayAke3Rhc2sudGFza05hbWV9YCk7XG4gICAgZGVsZXRlQnRuLmNsYXNzTGlzdC5hZGQoXCJkZWxldGUtYnRuXCIsIFwiZm9jdXNhYmxlXCIpO1xuICAgIGRlbGV0ZUJ0bi50ZXh0Q29udGVudCA9IFwiREVMRVRFXCI7XG5cbiAgICBkZXRhaWxzLmFwcGVuZENoaWxkKG5vdGVzRmllbGQpO1xuICAgIGRldGFpbHMuYXBwZW5kQ2hpbGQoZWRpdEJ0bik7XG4gICAgZGV0YWlscy5hcHBlbmRDaGlsZChkZWxldGVCdG4pO1xuICAgIHRhc2tJdGVtLmFwcGVuZENoaWxkKHByaW9yaXR5Qm94KTtcbiAgICB0YXNrSXRlbS5hcHBlbmRDaGlsZChzdGF0dXNCb3gpO1xuICAgIHRhc2tJdGVtLmFwcGVuZENoaWxkKG5hbWVGaWVsZCk7XG4gICAgdGFza0l0ZW0uYXBwZW5kQ2hpbGQoZGF0ZUZpZWxkKTtcbiAgICB0YXNrSXRlbS5hcHBlbmRDaGlsZChkZXRhaWxzKTtcbiAgICBfdGFza3NMaXN0LmFwcGVuZENoaWxkKHRhc2tJdGVtKTtcbiAgfTtcblxuICBjb25zdCBsb2FkR3JvdXBUYXNrcyA9IChsaXN0LCB0YXJnZXQpID0+IHtcbiAgICBjb25zdCBrZXlBcnJheSA9IE9iamVjdC5rZXlzKGxpc3QpO1xuICAgIF9jbGVhcigpO1xuICAgIHN3aXRjaCAodGFyZ2V0KSB7XG4gICAgICBjYXNlIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW1wb3J0YW50XCIpOlxuICAgICAgICBPYmplY3QudmFsdWVzKGxpc3QpLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXRlbVtpXS5wcmlvcml0eSA9PT0gXCJJbXBvcnRhbnRcIikge1xuICAgICAgICAgICAgICBfcmVuZGVyKGl0ZW1baV0sIGtleUFycmF5W2luZGV4XSwgaSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXh0LTctZGF5c1wiKTpcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhsaXN0KS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKF9jaGVja0RhdGUoaXRlbVtpXS5kdWVEYXRlKSA8PSA3KSB7XG4gICAgICAgICAgICAgIF9yZW5kZXIoaXRlbVtpXSwga2V5QXJyYXlbaW5kZXhdLCBpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhdGVyXCIpOlxuICAgICAgICBPYmplY3QudmFsdWVzKGxpc3QpLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoX2NoZWNrRGF0ZShpdGVtW2ldLmR1ZURhdGUpID4gNykge1xuICAgICAgICAgICAgICBfcmVuZGVyKGl0ZW1baV0sIGtleUFycmF5W2luZGV4XSwgaSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJldmVudHVhbGx5XCIpOlxuICAgICAgICBPYmplY3QudmFsdWVzKGxpc3QpLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXRlbVtpXS5kdWVEYXRlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgIF9yZW5kZXIoaXRlbVtpXSwga2V5QXJyYXlbaW5kZXhdLCBpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGlzdFt0YXJnZXQudGV4dENvbnRlbnRdLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgX3JlbmRlcihpdGVtLCB0YXJnZXQudGV4dENvbnRlbnQsIGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH07XG4gICAgaWYgKF90YXNrc0xpc3QuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCBoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgIGgyLnRleHRDb250ZW50ID0gXCJObyB0YXNrcyBmb3IgdGhpcyBncm91cCFcIjtcbiAgICAgIF90YXNrc0xpc3QuYXBwZW5kQ2hpbGQoaDIpO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlSGVhZGVyID0gKHRhcmdldCkgPT4ge1xuICAgIF90YXNrSGVhZGVyLnRleHRDb250ZW50ID0gdGFyZ2V0LnRleHRDb250ZW50O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbG9hZEdyb3VwVGFza3MsXG4gICAgdXBkYXRlSGVhZGVyXG4gIH1cbn0pKCk7XG5cbmV4cG9ydCB7IGdyb3VwQ29udGFpbmVyLCB0YXNrQ29udGFpbmVyIH0iLCJpbXBvcnQgZGlzdGFuY2VJblN0cmljdFdvcmRzIGZyb20gJy4uL2Zvcm1hdERpc3RhbmNlU3RyaWN0L2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZSBhbmQgbm93IGluIHdvcmRzLlxuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMgaW4gd29yZHMsIHVzaW5nIHN0cmljdCB1bml0cy5cbiAqIFRoaXMgaXMgbGlrZSBgZm9ybWF0RGlzdGFuY2VgLCBidXQgZG9lcyBub3QgdXNlIGhlbHBlcnMgbGlrZSAnYWxtb3N0JywgJ292ZXInLFxuICogJ2xlc3MgdGhhbicgYW5kIHRoZSBsaWtlLlxuICpcbiAqIHwgRGlzdGFuY2UgYmV0d2VlbiBkYXRlcyB8IFJlc3VsdCAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgLi4uIDU5IHNlY3MgICAgICAgICAgfCBbMC4uNTldIHNlY29uZHMgICAgIHxcbiAqIHwgMSAuLi4gNTkgbWlucyAgICAgICAgICB8IFsxLi41OV0gbWludXRlcyAgICAgfFxuICogfCAxIC4uLiAyMyBocnMgICAgICAgICAgIHwgWzEuLjIzXSBob3VycyAgICAgICB8XG4gKiB8IDEgLi4uIDI5IGRheXMgICAgICAgICAgfCBbMS4uMjldIGRheXMgICAgICAgIHxcbiAqIHwgMSAuLi4gMTEgbW9udGhzICAgICAgICB8IFsxLi4xMV0gbW9udGhzICAgICAgfFxuICogfCAxIC4uLiBOIHllYXJzICAgICAgICAgIHwgWzEuLk5dICB5ZWFycyAgICAgICB8XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYWRkU3VmZml4PWZhbHNlXSAtIHJlc3VsdCBpbmRpY2F0ZXMgaWYgdGhlIHNlY29uZCBkYXRlIGlzIGVhcmxpZXIgb3IgbGF0ZXIgdGhhbiB0aGUgZmlyc3RcbiAqIEBwYXJhbSB7J3NlY29uZCd8J21pbnV0ZSd8J2hvdXInfCdkYXknfCdtb250aCd8J3llYXInfSBbb3B0aW9ucy51bml0XSAtIGlmIHNwZWNpZmllZCwgd2lsbCBmb3JjZSBhIHVuaXRcbiAqIEBwYXJhbSB7J2Zsb29yJ3wnY2VpbCd8J3JvdW5kJ30gW29wdGlvbnMucm91bmRpbmdNZXRob2Q9J3JvdW5kJ10gLSB3aGljaCB3YXkgdG8gcm91bmQgcGFydGlhbCB1bml0c1xuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZGlzdGFuY2UgaW4gd29yZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdERpc3RhbmNlYCBwcm9wZXJ0eVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAxIEphbnVhcnkgMjAxNSwgd2hhdCBpcyB0aGUgZGlzdGFuY2UgdG8gMiBKdWx5IDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VUb05vd1N0cmljdChcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMilcbiAqIClcbiAqIC8vPT4gJzYgbW9udGhzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiBub3cgaXMgMSBKYW51YXJ5IDIwMTUgMDA6MDA6MDAsXG4gKiAvLyB3aGF0IGlzIHRoZSBkaXN0YW5jZSB0byAxIEphbnVhcnkgMjAxNSAwMDowMDoxNSwgaW5jbHVkaW5nIHNlY29uZHM/XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VUb05vd1N0cmljdChcbiAqICAgbmV3IERhdGUoMjAxNSwgMCwgMSwgMCwgMCwgMTUpXG4gKiApXG4gKiAvLz0+ICcyMCBzZWNvbmRzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAxIEphbnVhcnkgMjAxNSxcbiAqIC8vIHdoYXQgaXMgdGhlIGRpc3RhbmNlIHRvIDEgSmFudWFyeSAyMDE2LCB3aXRoIGEgc3VmZml4P1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlVG9Ob3dTdHJpY3QoXG4gKiAgIG5ldyBEYXRlKDIwMTYsIDAsIDEpLFxuICogICB7YWRkU3VmZml4OiB0cnVlfVxuICogKVxuICogLy89PiAnaW4gMSB5ZWFyJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAyOCBKYW51YXJ5IDIwMTUsXG4gKiAvLyB3aGF0IGlzIHRoZSBkaXN0YW5jZSB0byAxIEphbnVhcnkgMjAxNSwgaW4gbW9udGhzLCByb3VuZGVkIHVwPz9cbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0KG5ldyBEYXRlKDIwMTUsIDAsIDEpLCB7XG4gKiAgIHVuaXQ6ICdtb250aCcsXG4gKiAgIHJvdW5kaW5nTWV0aG9kOiAnY2VpbCdcbiAqIH0pXG4gKiAvLz0+ICcxIG1vbnRoJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAxIEphbnVhcnkgMjAxNSxcbiAqIC8vIHdoYXQgaXMgdGhlIGRpc3RhbmNlIHRvIDEgQXVndXN0IDIwMTYgaW4gRXNwZXJhbnRvP1xuICogdmFyIGVvTG9jYWxlID0gcmVxdWlyZSgnZGF0ZS1mbnMvbG9jYWxlL2VvJylcbiAqIHZhciByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0KFxuICogICBuZXcgRGF0ZSgyMDE2LCA3LCAxKSxcbiAqICAge2xvY2FsZTogZW9Mb2NhbGV9XG4gKiApXG4gKiAvLz0+ICcxIGphcm8nXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2VUb05vd1N0cmljdChkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGRpc3RhbmNlSW5TdHJpY3RXb3JkcyhkaXJ0eURhdGUsIERhdGUubm93KCksIGRpcnR5T3B0aW9ucyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGdlbmVyYWxNb2RhbCwgdGFza01vZGFsIH0gZnJvbSBcIi4vbW9kYWxzXCI7XG5pbXBvcnQgeyBncm91cENvbnRhaW5lciwgdGFza0NvbnRhaW5lciB9IGZyb20gXCIuL3JlbmRlci1jb250YWluZXJzXCI7XG5cbmNvbnN0IERPTSA9ICgoKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRHcm91cHMgPSBbXCJJbXBvcnRhbnRcIiwgXCJOZXh0IDcgRGF5c1wiLCBcIkxhdGVyXCIsIFwiRXZlbnR1YWxseVwiXTtcbiAgY29uc3QgbW9kYWxCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWJveFwiKTtcbiAgY29uc3QgdGFza0hlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VsZWN0ZWQtZ3JvdXBcIik7XG5cbiAgcmV0dXJuIHtcbiAgICBkZWZhdWx0R3JvdXBzLFxuICAgIG1vZGFsQm94LFxuICAgIHRhc2tIZWFkZXJcbiAgfVxufSkoKTtcblxuY29uc3QgdG9EbyA9ICgoKSA9PiB7XG4gIGNvbnN0IF9hY3RpdmVPbkxvYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImltcG9ydGFudFwiKTtcblxuICBjb25zdCBtYXN0ZXJMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRvRG8tbGlzdFwiKSkgfHwgXG4gICAge1xuICAgICAgRXhhbXBsZTogW1xuICAgICAgICB7XG4gICAgICAgICAgdGFza05hbWU6IFwiRG8gdGhlIGRpc2hlc1wiLFxuICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgcHJpb3JpdHk6IFwiTm9ybWFsXCIsXG4gICAgICAgICAgZHVlRGF0ZTogXCJcIixcbiAgICAgICAgICBub3RlczpcbiAgICAgICAgICAgIFwiTGV0IHRoZSBwYW5zIHNvYWssIHB1dCB0aGUgcGxhdGVzIGluIHRoZSBkaXNod2FzaGVyLCB3YXNoIHRoZSBtdWdzIGJ5IGhhbmQuXFxuXFxuV2FzaCBwYW5zIGFmdGVyIDMwIG1pbnV0ZXMgc29ha2luZy5cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRhc2tOYW1lOiBcIkJyaW5nIE11ZmZpbiB0byB2ZXRcIixcbiAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgIHByaW9yaXR5OiBcIkltcG9ydGFudFwiLFxuICAgICAgICAgIGR1ZURhdGU6IFwiMjAyMS0xMi0wMVwiLFxuICAgICAgICAgIG5vdGVzOiBcIlBhY2sgaGVyIGZhdm9yaXRlIHRveSBzbyBzaGUgc3RheXMgY2FsbS5cIixcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcblxuICBjb25zdCBzYXZlVG9Mb2NhbCA9ICgpID0+IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRvRG8tbGlzdFwiLCBKU09OLnN0cmluZ2lmeShsaXN0KSk7XG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIChlKSA9PiB7XG4gICAgdGFza0NvbnRhaW5lci5sb2FkR3JvdXBUYXNrcyhtYXN0ZXJMaXN0LCBfYWN0aXZlT25Mb2FkKTtcbiAgICBncm91cENvbnRhaW5lci5yZW5kZXIobWFzdGVyTGlzdCk7XG4gIH0pO1xuXG4gIHJldHVybiB7IFxuICAgIG1hc3Rlckxpc3QsXG4gICAgc2F2ZVRvTG9jYWxcbiAgfVxufSkoKTtcblxuY29uc3QgZ3JvdXBzID0gKCgpID0+IHtcbiAgY29uc3QgY3JlYXRlID0gKG5hbWUpID0+IHtcbiAgICB0b0RvLm1hc3Rlckxpc3RbbmFtZV0gPSBbXTtcbiAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZSA9IChvbGROYW1lLCBuZXdOYW1lKSA9PiB7XG4gICAgZGVsZXRlIE9iamVjdC5hc3NpZ24odG9Eby5tYXN0ZXJMaXN0LCB7W25ld05hbWVdOiB0b0RvLm1hc3Rlckxpc3Rbb2xkTmFtZV19KVtvbGROYW1lXTtcbiAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICB9O1xuXG4gIGNvbnN0IGNoZWNrTmFtZSA9IChuYW1lKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIERPTS5kZWZhdWx0R3JvdXBzLmluZGV4T2YobmFtZSkgPj0gMCB8fFxuICAgICAgT2JqZWN0LmtleXModG9Eby5tYXN0ZXJMaXN0KS5pbmRleE9mKG5hbWUpID49IDAgfHxcbiAgICAgIG5hbWUubWF0Y2goL15cXHN7MSx9JC8pIHx8XG4gICAgICBuYW1lID09PSBcIlwiXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCByZW1vdmUgPSAobmFtZSkgPT4ge1xuICAgIGRlbGV0ZSB0b0RvLm1hc3Rlckxpc3RbbmFtZV07XG4gICAgY29uc29sZS5sb2codG9Eby5tYXN0ZXJMaXN0KTtcbiAgfTtcblxuICBjb25zdCBzZXRJbmFjdGl2ZSA9ICgpID0+IHtcbiAgICBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJncm91cC1idG5cIikpLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHNldEFjdGl2ZSA9ICh0YXJnZXQpID0+IHtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgfTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW4tbmF2XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJncm91cC1idG5cIikpIHtcbiAgICAgIHNldEluYWN0aXZlKCk7XG4gICAgICBzZXRBY3RpdmUoZS50YXJnZXQpO1xuICAgICAgdGFza0NvbnRhaW5lci51cGRhdGVIZWFkZXIoZS50YXJnZXQpO1xuICAgICAgdGFza0NvbnRhaW5lci5sb2FkR3JvdXBUYXNrcyh0b0RvLm1hc3Rlckxpc3QsIGUudGFyZ2V0KTtcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGNoZWNrTmFtZSxcbiAgICBjcmVhdGUsXG4gICAgdXBkYXRlLFxuICAgIHJlbW92ZSxcbiAgICBzZXRBY3RpdmUsXG4gICAgc2V0SW5hY3RpdmVcbiAgfVxufSkoKTtcblxuY29uc3QgdGFza3MgPSAoKCkgPT4ge1xuICBjb25zdCBfdGFza0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stY29udGFpbmVyXCIpO1xuICBcbiAgY29uc3QgX2NoYW5nZVN0YXR1cyA9IChub2RlKSA9PiB7XG4gICAgY29uc3QgZ3JvdXBEYXRhID0gbm9kZS5kYXRhc2V0Lmdyb3VwO1xuICAgIGNvbnN0IHRhc2tJbmRleCA9IG5vZGUuZGF0YXNldC5pbmRleDtcblxuICAgIGlmIChub2RlLmNoaWxkcmVuWzFdLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpID09PSBudWxsKSB7XG4gICAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBEYXRhXVt0YXNrSW5kZXhdLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICBub2RlLmNoaWxkcmVuWzFdLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFxuICAgICAgICAgIFwidXJsKGFzc2V0cy9pbWFnZXMvaWNvbnMvZG9uZS1ibGFjay0yNGRwLnN2ZylcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgIG5vZGUuY2hpbGRyZW5bMV0ucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICB9O1xuXG4gIGNvbnN0IF9nZXRJbmZvID0gKG5vZGUpID0+IHtcbiAgICBjb25zdCBncm91cERhdGEgPSBub2RlLmRhdGFzZXQuZ3JvdXA7XG4gICAgY29uc3QgdGFza0luZGV4ID0gbm9kZS5kYXRhc2V0LmluZGV4O1xuICAgIC8vIHN0b3JlIHJlZmVyZW5jZSB0byBncm91cCBhbmQgaW5kZXggb2YgdGFzayBiZWluZyB1cGRhdGVkXG4gICAgRE9NLm1vZGFsQm94LmRhdGFzZXQuaW5kZXhSZWYgPSB0YXNrSW5kZXg7XG4gICAgRE9NLm1vZGFsQm94LmRhdGFzZXQuZ3JvdXBSZWYgPSBncm91cERhdGE7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hbWUtaW5wdXRcIikudmFsdWUgPSBcbiAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS50YXNrTmFtZTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dyb3VwLXNlbGVjdFwiKS52YWx1ZSA9IGdyb3VwRGF0YTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByaW9yaXR5LXNlbGVjdFwiKS52YWx1ZSA9IFxuICAgICAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBEYXRhXVt0YXNrSW5kZXhdLnByaW9yaXR5O1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGF0ZS1zZWxlY3RcIikudmFsdWUgPSBcbiAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS5kdWVEYXRlO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZXMtaW5wdXRcIikudmFsdWUgPSBcbiAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwRGF0YV1bdGFza0luZGV4XS5ub3RlcztcbiAgfTtcblxuICBjb25zdCBfY2hlY2tUYXNrRXZlbnQgPSAoZSkgPT4ge1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YXNrLXN0YXR1c1wiKTpcbiAgICAgICAgX2NoYW5nZVN0YXR1cyhlLnRhcmdldC5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgLy8gdG9Eby5zYXZlVG9Mb2NhbCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFzay1uYW1lXCIpOlxuICAgICAgICAvLyB0b2dnbGUncyB0YXNrIGl0ZW0ncyBkZXRhaWxzIHNlY3Rpb25cbiAgICAgICAgZS50YXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbls0XS5jbGFzc0xpc3QudG9nZ2xlKFwiZXhwYW5kZWRcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJlZGl0LWJ0blwiKTpcbiAgICAgICAgdGFza01vZGFsLnJlbmRlcihlLCBPYmplY3Qua2V5cyh0b0RvLm1hc3Rlckxpc3QpKTtcbiAgICAgICAgX2dldEluZm8oZS50YXJnZXQucGFyZW50RWxlbWVudCk7XG4gICAgICAgIGdlbmVyYWxNb2RhbC5vbk9wZW4oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImRlbGV0ZS1idG5cIik6XG4gICAgICAgIGlmIChjb25maXJtKGBQbGVhc2UgY2xpY2sgXCJPS1wiIHRvIGNvbmZpcm0gZGVsZXRpb24gb2YgdGFzayBcbiAgICAgICAgICAgIFwiJHtlLnRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQudGFza31cIi5gKSkge1xuICAgICAgICAgIHJlbW92ZVNpbmdsZShlLnRhcmdldC5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICAvLyB0b0RvLnNhdmVUb0xvY2FsKCk7XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH07XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlID0gKHRhc2tOYW1lLCBwcmlvcml0eSwgZHVlRGF0ZSwgbm90ZXMsIGNvbXBsZXRlZCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0YXNrTmFtZSxcbiAgICAgIHByaW9yaXR5LFxuICAgICAgZHVlRGF0ZSxcbiAgICAgIG5vdGVzLFxuICAgICAgY29tcGxldGVkXG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCBncm91cFJlZiA9IERPTS5tb2RhbEJveC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWdyb3VwLXJlZlwiKTtcbiAgICBjb25zdCB0YXNrUmVmID0gRE9NLm1vZGFsQm94LmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXgtcmVmXCIpO1xuXG4gICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwUmVmXVt0YXNrUmVmXS50YXNrTmFtZSA9IFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hbWUtaW5wdXRcIikudmFsdWU7XG4gICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwUmVmXVt0YXNrUmVmXS5wcmlvcml0eSA9IFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByaW9yaXR5LXNlbGVjdFwiKS52YWx1ZTtcbiAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBSZWZdW3Rhc2tSZWZdLmR1ZURhdGUgPSBcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkYXRlLXNlbGVjdFwiKS52YWx1ZTtcbiAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBSZWZdW3Rhc2tSZWZdLm5vdGVzID0gXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZXMtaW5wdXRcIikudmFsdWU7XG4gIH07XG5cbiAgY29uc3QgY2hlY2tOYW1lID0gKG5hbWUpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgbmFtZS5tYXRjaCgvXlxcc3sxLH0kLykgfHxcbiAgICAgIG5hbWUgPT09IFwiXCJcbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZVNpbmdsZSA9IChub2RlKSA9PiB7XG4gICAgdG9Eby5tYXN0ZXJMaXN0W25vZGUuZGF0YXNldC5ncm91cF0uc3BsaWNlKG5vZGUuZGF0YXNldC5pbmRleCwgMSk7XG4gICAgbm9kZS5yZW1vdmUoKTtcbiAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUNvbXBsZXRlZCA9IChncm91cCkgPT4ge1xuICAgIGlmIChET00uZGVmYXVsdEdyb3Vwcy5pbmRleE9mKGdyb3VwKSA+PSAwKSB7XG4gICAgICBjb25zdCBrZXlBcnJheSA9IE9iamVjdC5rZXlzKHRvRG8ubWFzdGVyTGlzdCk7XG4gICAgICBPYmplY3QudmFsdWVzKHRvRG8ubWFzdGVyTGlzdCkuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IChpdGVtLmxlbmd0aCAtIDEpOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChpdGVtW2ldLmNvbXBsZXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdG9Eby5tYXN0ZXJMaXN0W2tleUFycmF5W2luZGV4XV0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9Eby5tYXN0ZXJMaXN0W2dyb3VwXS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAodG9Eby5tYXN0ZXJMaXN0W2dyb3VwXS5sZW5ndGggLSAxKTsgaSA+PSAwIDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uY29tcGxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0b0RvLm1hc3Rlckxpc3RbZ3JvdXBdLnNwbGljZShpLCAxKVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IGNvbmZpcm1NYXNzUmVtb3ZlID0gKCkgPT4ge1xuICAgIGlmIChET00uZGVmYXVsdEdyb3Vwcy5pbmRleE9mKERPTS50YXNrSGVhZGVyLnRleHRDb250ZW50KSA+PSAwKSB7XG4gICAgICByZXR1cm4gY29uZmlybShgVGhpcyB3aWxsIGRlbGV0ZSBhbGwgY29tcGxldGVkIHRhc2tzIGluIGV2ZXJ5IGdyb3VwLiBgICsgXG4gICAgICAgICAgICAgICAgICAgIGBcXG5cXG5QbGVhc2UgY2xpY2sgXCJPS1wiIHRvIGNvbmZpcm0gZGVsZXRpb24uYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb25maXJtKGBUaGlzIHdpbGwgZGVsZXRlIGFsbCBjb21wbGV0ZWQgdGFza3MgaW4gdGhlIGAgKyBcbiAgICAgICAgICAgICAgICAgICAgYCR7RE9NLnRhc2tIZWFkZXIudGV4dENvbnRlbnR9IGdyb3VwLlxcblxcblBsZWFzZSBjbGljayBgICsgXG4gICAgICAgICAgICAgICAgICAgIGBcIk9LXCIgdG8gY29uZmlybSBkZWxldGlvbi5gKTtcbiAgICB9O1xuICB9O1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhc2stYnRuXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGlmIChPYmplY3Qua2V5cyh0b0RvLm1hc3Rlckxpc3QpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYWxlcnQoXCJObyBncm91cHMgZXhpc3QuIFBsZWFzZSBjcmVhdGUgYSBncm91cCBiZWZvcmUgYWRkaW5nIGEgdGFzay5cIik7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhc2tNb2RhbC5yZW5kZXIoZSwgT2JqZWN0LmtleXModG9Eby5tYXN0ZXJMaXN0KSk7XG4gICAgICBnZW5lcmFsTW9kYWwub25PcGVuKCk7XG4gICAgfTtcbiAgfSk7XG5cbiAgX3Rhc2tMaXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfY2hlY2tUYXNrRXZlbnQpO1xuICBfdGFza0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICBpZiAoZS5rZXkgPT09IFwiIFwiKSBfY2hlY2tUYXNrRXZlbnQoZSk7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgY2hlY2tOYW1lLFxuICAgIGNvbmZpcm1NYXNzUmVtb3ZlLFxuICAgIGNyZWF0ZSxcbiAgICByZW1vdmVDb21wbGV0ZWQsXG4gICAgcmVtb3ZlU2luZ2xlLFxuICAgIHVwZGF0ZVxuICB9XG59KSgpO1xuXG5jb25zdCBtb2RhbEV2ZW50cyA9ICgoKSA9PiB7XG4gIERPTS5tb2RhbEJveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBjb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hbWUtaW5wdXRcIik7XG4gICAgY29uc3QgZ3JvdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dyb3VwLXNlbGVjdFwiKTtcblxuICAgIHN3aXRjaCAoZS50YXJnZXQpIHtcbiAgICAgIGNhc2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdWJtaXQtZ3JvdXAtYnRuXCIpOlxuICAgICAgY2FzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnVwZGF0ZS1ncm91cC1idG5cIik6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGdyb3Vwcy5jaGVja05hbWUobmFtZUlucHV0LnZhbHVlKSkge1xuICAgICAgICAgIGFsZXJ0KFwiR3JvdXAgbmFtZSBjYW5ub3QgYmUgYmxhbmsgYW5kIGNhbm5vdCBhbHJlYWR5IGJlIHRha2VuLlwiICsgXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5QbGVhc2UgZW50ZXIgYSBuZXcgbmFtZS5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJzdWJtaXQtZ3JvdXAtYnRuXCIpKSB7XG4gICAgICAgICAgICBncm91cHMuY3JlYXRlKG5hbWVJbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICBncm91cENvbnRhaW5lci5yZW5kZXIodG9Eby5tYXN0ZXJMaXN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ3JvdXBzLnVwZGF0ZShET00udGFza0hlYWRlci50ZXh0Q29udGVudCwgbmFtZUlucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWN0aXZlXCIpLnRleHRDb250ZW50ID0gbmFtZUlucHV0LnZhbHVlO1xuICAgICAgICAgICAgdGFza0NvbnRhaW5lci51cGRhdGVIZWFkZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hY3RpdmVcIikpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgICAgLy8gdG9Eby5zYXZlVG9Mb2NhbCgpO1xuICAgICAgICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRlbGV0ZS1ncm91cC1idG5cIik6XG4gICAgICAgIGlmIChjb25maXJtKGBUaGlzIHdpbGwgZGVsZXRlIHRoZSAke0RPTS50YXNrSGVhZGVyLnRleHRDb250ZW50fSBgICsgXG4gICAgICAgICAgICBgZ3JvdXAsIGFsb25nIHdpdGggYW55IHRhc2tzIHdpdGhpbiBpdC5cXG5cXG5QbGVhc2UgY2xpY2sgXCJPS1wiIGAgKyBcbiAgICAgICAgICAgIGB0byBjb25maXJtIGRlbGV0aW9uLmApKSB7XG4gICAgICAgICAgZ3JvdXBzLnJlbW92ZShET00udGFza0hlYWRlci50ZXh0Q29udGVudCk7XG4gICAgICAgICAgLy8gdG9Eby5zYXZlVG9Mb2NhbCgpO1xuICAgICAgICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gICAgICAgICAgZ3JvdXBDb250YWluZXIucmVuZGVyKHRvRG8ubWFzdGVyTGlzdCk7XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRlbGV0ZS1jb21wbGV0ZWQtYnRuXCIpOlxuICAgICAgICBpZiAodGFza3MuY29uZmlybU1hc3NSZW1vdmUoKSkge1xuICAgICAgICAgIHRhc2tzLnJlbW92ZUNvbXBsZXRlZChET00udGFza0hlYWRlci50ZXh0Q29udGVudCk7XG4gICAgICAgICAgLy8gdG9Eby5zYXZlVG9Mb2NhbCgpO1xuICAgICAgICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gICAgICAgICAgY29uc29sZS5sb2codG9Eby5tYXN0ZXJMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXNpbmdsZS1idG5cIik6XG4gICAgICBjYXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLW1hbnktYnRuXCIpOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0YXNrcy5jaGVja05hbWUobmFtZUlucHV0LnZhbHVlKSkge1xuICAgICAgICAgIGFsZXJ0KFwiVGFzayBuYW1lIGNhbm5vdCBiZSBibGFuay5cXG5cXG5QbGVhc2UgZW50ZXIgYSBuZXcgbmFtZS5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB0YXNrcy5jcmVhdGUoXG4gICAgICAgICAgICBuYW1lSW5wdXQudmFsdWUsXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByaW9yaXR5LXNlbGVjdFwiKS52YWx1ZSxcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGF0ZS1zZWxlY3RcIikudmFsdWUsXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25vdGVzLWlucHV0XCIpLnZhbHVlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICApO1xuICAgICAgICAgIHRvRG8ubWFzdGVyTGlzdFtncm91cC52YWx1ZV0ucHVzaChuZXdUYXNrKTtcbiAgICAgICAgICAvLyB0b0RvLnNhdmVUb0xvY2FsKCk7XG4gICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFkZC1tYW55LWJ0blwiKSkge1xuICAgICAgICAgICAgbmFtZUlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICBuYW1lSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgZ3JvdXAuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByaW9yaXR5LXNlbGVjdFwiKS5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGF0ZS1zZWxlY3RcIikudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNub3Rlcy1pbnB1dFwiKS52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh0b0RvLm1hc3Rlckxpc3QpO1xuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi51cGRhdGUtdGFzay1idG5cIik6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRhc2tzLmNoZWNrTmFtZShuYW1lSW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgYWxlcnQoXCJUYXNrIG5hbWUgY2Fubm90IGJlIGJsYW5rLlxcblxcblBsZWFzZSBlbnRlciBhIG5ldyBuYW1lLlwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFza3MudXBkYXRlKCk7XG4gICAgICAgICAgLy8gdG9Eby5zYXZlVG9Mb2NhbCgpO1xuICAgICAgICAgIGdlbmVyYWxNb2RhbC5vbkNsb3NlKCk7XG4gICAgICAgICAgY29uc29sZS5sb2codG9Eby5tYXN0ZXJMaXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgfSk7XG59KSgpO1xuXG5leHBvcnQgeyBncm91cHMsIG1vZGFsRXZlbnRzLCB0YXNrcywgdG9EbyB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IHsgYWNjZXNzaWJpbGl0eU9wdGlvbnMsIGRpc3BsYXlPcHRpb25zIH0gZnJvbSBcIi4vc2l0ZS1zZXR0aW5nc1wiO1xuaW1wb3J0IHsgZ3JvdXBNb2RhbCwgd2FybmluZ01vZGFsIH0gZnJvbSBcIi4vbW9kYWxzXCI7XG5pbXBvcnQgeyBncm91cHMsIG1vZGFsRXZlbnRzLCB0YXNrcywgdG9EbyB9IGZyb20gXCIuL2xvZ2ljXCI7XG5pbXBvcnQgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIGZyb20gJ2RhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cydcbmltcG9ydCBmb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0IGZyb20gXCJkYXRlLWZucy9mb3JtYXREaXN0YW5jZVRvTm93U3RyaWN0XCI7XG5cbmNvbnNvbGUubG9nKHRvRG8ubWFzdGVyTGlzdCk7XG5cbmNvbnN0IG1lbnVWaXNpYmlsaXR5ID0gKCgpID0+IHtcbiAgY29uc3QgbWVudUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWFpbi1uYXZcIik7XG4gIGNvbnN0IG1lbnVPcGVuQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51LWJ1dHRvblwiKTtcbiAgY29uc3QgbWVudUNsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51LWNsb3NlLWJ1dHRvblwiKTtcblxuICBjb25zdCBfb25TY3JlZW5TaXplID0gKCkgPT4ge1xuICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGggPiA3NjMpIHtcbiAgICAgIG1lbnVDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgbWVudUNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbnVDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICBtZW51Q29udGFpbmVyLnN0eWxlLmxlZnQgPSBcIi04MDBweFwiO1xuICAgIH07XG4gIH07XG4gIFxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBfb25TY3JlZW5TaXplKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIF9vblNjcmVlblNpemUpO1xuXG4gIGNvbnN0IF90b2dnbGVNZW51ID0gKCkgPT4ge1xuICAgIGlmIChtZW51Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPT09IFwiaGlkZGVuXCIpIHtcbiAgICAgIG1lbnVDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgbWVudUNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4gICAgICBtZW51Q2xvc2VCdXR0b24uZm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVudUNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCItODAwcHhcIjtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBtZW51Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiXG4gICAgICB9LCA2MDApO1xuICAgICAgbWVudU9wZW5CdXR0b24uZm9jdXMoKTtcbiAgICB9O1xuICB9O1xuXG4gIG1lbnVPcGVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfdG9nZ2xlTWVudSk7XG4gIG1lbnVDbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3RvZ2dsZU1lbnUpO1xufSkoKTsiXSwic291cmNlUm9vdCI6IiJ9