!function(){"use strict";const e={accessibilityContainer:document.querySelector("#accessibility-container"),animationSwitch:document.querySelector("#animation-switch"),githubLogo:document.querySelector("#lower-nav img"),themeSwitch:document.querySelector("#theme-switch")},t=()=>{localStorage.setItem("theme",document.documentElement.getAttribute("theme")),localStorage.setItem("animations-enabled",e.animationSwitch.getAttribute("aria-checked"))},n=((()=>{const n=e=>{"light"===document.documentElement.getAttribute("theme")?o():a(),t()},o=()=>{e.themeSwitch.setAttribute("aria-checked","false"),document.documentElement.setAttribute("theme","dark"),e.themeSwitch.style.backgroundPosition="center bottom -0.8rem",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-Light-32px.png")},a=()=>{e.themeSwitch.setAttribute("aria-checked","true"),document.documentElement.setAttribute("theme","light"),e.themeSwitch.style.backgroundPosition="center top 2px",e.githubLogo.setAttribute("src","assets/images/logos/GitHub-Mark-32px.png")};e.themeSwitch.addEventListener("click",n),e.themeSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"light"===localStorage.getItem("theme")?a():o()}))})(),(()=>{const n=()=>{"true"===e.animationSwitch.getAttribute("aria-checked")?a():o(),t()},o=()=>{e.animationSwitch.setAttribute("aria-checked","true"),document.documentElement.style.scrollBehavior="smooth",e.accessibilityContainer.style.transition="top 0.75s ease-in-out",e.animationSwitch.textContent="Animations Enabled",e.themeSwitch.style.transition="background-position 0.3s ease-in",document.querySelector("#main-nav").style.transition="left 0.5s",Array.from(document.querySelectorAll(".label-arrow")).forEach((e=>{e.style.transition="transform 0.75s"}))},a=()=>{e.animationSwitch.setAttribute("aria-checked","false"),document.documentElement.style.scrollBehavior="auto",e.animationSwitch.setAttribute("aria-checked","false"),e.animationSwitch.textContent="Animations Disabled",Array.from(document.querySelectorAll(".animated")).forEach((e=>{e.style.transition="none"}))};return e.animationSwitch.addEventListener("click",n),e.animationSwitch.addEventListener("keydown",(e=>{" "===e.key&&(e.preventDefault(),n())})),window.addEventListener("load",(()=>{"false"===localStorage.getItem("animations-enabled")?a():o()})),{animationsEnabled:o,animationsDisabled:a}})()),o={defaultGroups:["Important","Next 7 Days","Later","Eventually"],groupButtons:document.getElementsByClassName("group-btn"),modalBox:document.querySelector(".modal-box"),selectedGroup:document.querySelector(".selected-group"),taskItems:document.getElementsByClassName("task-item")},a=(()=>{const e=JSON.parse(localStorage.getItem("toDo-list"))||{Example:[{taskName:"Do the dishes",completed:!1,priority:"Normal",dueDate:"",notes:"Let the pans soak, put the plates in the dishwasher, wash the mugs by hand.\n\nWash pans after 30 minutes soaking."},{taskName:"Bring Muffin to vet",completed:!1,priority:"Important",dueDate:"2021-03-05",notes:"Pack her favorite toy so she stays calm."}]};return{list:e,saveToLocal:()=>{localStorage.setItem("toDo-list",JSON.stringify(e))}}})(),l=(()=>{const e=e=>{a.list[e.dataset.group].splice(e.dataset.index,1),e.remove(),console.log(a.list)},t=e=>{const t=e.dataset.group,n=e.dataset.index;null===e.children[1].getAttribute("style")?(a.list[t][n].completed=!0,e.children[1].style.backgroundImage="url(assets/images/icons/done-black-24dp.svg)"):(a.list[t][n].completed=!1,e.children[1].removeAttribute("style")),console.log(a.list)};return document.querySelector(".add-task-btn").addEventListener("click",(e=>{0!==Object.keys(a.list).length?(d.render(e,Object.keys(a.list)),s.onOpen()):alert("No group exists to add tasks to.\n\nPlease create a group before adding a task.")})),Array.from(o.taskItems).forEach((n=>{n.addEventListener("click",(n=>{switch(n.target){case n.currentTarget.children[1]:t(n.currentTarget);break;case n.currentTarget.children[2]:n.currentTarget.children[4].classList.toggle("expanded");break;case n.currentTarget.children[4].children[1]:d.render(n,Object.keys(a.list)),(e=>{const t=e.dataset.group,n=e.dataset.index;o.modalBox.setAttribute("data-index-ref",n),o.modalBox.setAttribute("data-group-ref",t),document.querySelector("#name-input").value=a.list[t][n].taskName,document.querySelector("#group-select").value=t,document.querySelector("#priority-select").value=a.list[t][n].priority,document.querySelector("#date-select").value=a.list[t][n].dueDate,document.querySelector("#notes-input").value=a.list[t][n].notes})(n.currentTarget),s.onOpen();break;case n.currentTarget.children[4].children[2]:confirm(`Please click "OK" to confirm deletion of task "${n.currentTarget.children[2].textContent}".`)&&e(n.currentTarget);break;default:return}}))})),Array.from(o.taskItems).forEach((e=>{e.addEventListener("keyup",(e=>{" "===e.key&&e.target===e.currentTarget.children[1]&&t(e.currentTarget)}))})),{confirmMassRemove:()=>o.defaultGroups.indexOf(o.selectedGroup.textContent)>=0?confirm('This will delete all completed tasks in every group.\n\nPlease click "OK" to confirm deletion.'):confirm(`This will delete all completed tasks in the ${o.selectedGroup.textContent} group.\n\nPlease click "OK" to confirm deletion.`),create:(e,t,n,o,a)=>({taskName:e,priority:t,dueDate:n,notes:o,completed:a}),update:()=>{const e=o.modalBox.getAttribute("data-group-ref"),t=o.modalBox.getAttribute("data-index-ref");a.list[e][t].taskName=document.querySelector("#name-input").value,a.list[e][t].priority=document.querySelector("#priority-select").value,a.list[e][t].dueDate=document.querySelector("#date-select").value,a.list[e][t].notes=document.querySelector("#notes-input").value},removeCompleted:e=>{if(o.defaultGroups.indexOf(e)>=0){const e=Object.keys(a.list);Object.values(a.list).forEach(((t,n)=>{for(let o=t.length-1;o>=0;o--)!0===t[o].completed&&a.list[e[n]].splice(o,1)}))}else a.list[e].forEach((t=>{for(let n=a.list[e].length-1;n>=0;n--)!0===t.completed&&a.list[e].splice(n,1)}))},removeSingle:e,checkName:e=>e.match(/^\s{1,}$/)||""===e}})(),i=(Array.from(o.groupButtons).forEach((e=>{e.addEventListener("click",(()=>{Array.from(o.groupButtons).forEach((e=>{e.classList.remove("active")})),e.classList.add("active")}))})),{create:e=>{a.list[e]=[],console.log(a.list)},update:(e,t)=>{delete Object.assign(a.list,{[t]:a.list[e]})[e],console.log(a.list)},remove:e=>{delete a.list[e],console.log(a.list)},checkName:e=>o.defaultGroups.indexOf(e)>=0||Object.keys(a.list).indexOf(e)>=0||e.match(/^\s{1,}$/)||""===e}),r=(o.modalBox.addEventListener("click",(e=>{const t=document.querySelector("#name-input");switch(e.target){case document.querySelector(".submit-group-btn"):if(e.preventDefault(),i.checkName(t.value))return void alert("Group name cannot be blank and cannot already be taken.\n\nPlease enter a new name.");i.create(t.value),s.onClose();break;case document.querySelector(".update-group-btn"):if(e.preventDefault(),i.checkName(t.value))return void alert("Group name cannot be blank and cannot already be taken.\n\nPlease enter a new name.");i.update(o.selectedGroup.textContent,t.value),s.onClose();break;case document.querySelector(".delete-group-btn"):confirm(`This will delete the ${o.selectedGroup.textContent} group, along with any tasks within it.\n\nPlease click "OK" to confirm deletion.`)&&(i.remove(o.selectedGroup.textContent),s.onClose());break;case document.querySelector(".delete-completed-btn"):l.confirmMassRemove()&&(l.removeCompleted(o.selectedGroup.textContent),s.onClose(),console.log(a.list));break;default:return}})),{addGroupBtn:document.querySelector(".add-group-btn"),defaultGroups:["Important","Next 7 Days","Later","Eventually"],groupButtons:document.getElementsByClassName("group-btn"),groupOptionBtn:document.querySelector(".group-option-btn"),modalBox:document.querySelector(".modal-box"),modalContainer:document.querySelector(".modal-container"),selectedGroup:document.querySelector(".selected-group")}),s=(()=>{const e=()=>{for(;r.modalBox.firstChild;)r.modalBox.removeChild(r.modalBox.firstChild);r.modalContainer.style.display="none"};return window.addEventListener("keydown",(t=>{"Escape"===t.key&&e()})),{createCloseBtn:()=>{const e=document.createElement("button");e.setAttribute("type","button"),e.setAttribute("aria-label","Close modal"),e.classList.add("modal-close-button","close-btn","focusable"),e.addEventListener("click",s.onClose),r.modalBox.appendChild(e)},onClose:e,onOpen:()=>{r.modalContainer.style.display="flex",document.querySelector(".modal-close-button").focus()}}})(),d=((()=>{const e=e=>{e.target.classList.contains("disable-button")?n.animationsDisabled():e.target.classList.contains("enable-button")&&n.animationsEnabled(),t(),s.onClose()};window.addEventListener("load",(()=>{0===localStorage.length&&(()=>{const t=document.createElement("h1"),n=document.createElement("p"),o=document.createElement("p"),a=document.createElement("button"),l=document.createElement("button");t.textContent="This site uses minimal animation effects.",n.textContent="Effects include moving menus and smooth scrolling. If you suffer from a vestibular disorder or otherwise prefer no animations, you can turn them off by clicking the first button below.",o.textContent="You can later change this setting in the Display & Accessibility tab at the top of the page.",a.setAttribute("type","button"),a.classList.add("disable-button","focusable","primary-btn"),a.textContent="DISABLE ANIMATIONS",a.addEventListener("click",e),l.setAttribute("type","button"),l.classList.add("enable-button","focusable","secondary-btn"),l.textContent="ENABLE ANIMATIONS",l.addEventListener("click",e),r.modalBox.appendChild(t),r.modalBox.appendChild(n),r.modalBox.appendChild(o),r.modalBox.appendChild(a),r.modalBox.appendChild(l),r.modalContainer.style.display="flex"})()}))})(),(()=>{const e=e=>{const t=document.createElement("form"),n=document.createElement("fieldset"),o=document.createElement("legend"),a=document.createElement("div"),l=document.createElement("label"),i=document.createElement("input"),d=document.createElement("input");if(s.createCloseBtn(),l.setAttribute("for","name-input"),l.textContent="Group Name",i.setAttribute("type","text"),i.setAttribute("required","true"),i.setAttribute("id","name-input"),i.setAttribute("autocomplete","off"),i.classList.add("focusable"),e.target.classList.contains("add-group-btn"))o.textContent="Add a Group",d.setAttribute("type","submit"),d.setAttribute("value","ADD GROUP"),d.classList.add("submit-group-btn","primary-btn","focusable","submit"),a.appendChild(d);else if(e.target.classList.contains("group-option-btn")){const e=document.createElement("button"),t=document.createElement("button");o.textContent="Group Options",d.setAttribute("type","submit"),d.setAttribute("value","UPDATE"),d.classList.add("update-group-btn","secondary-btn","focusable","submit"),e.setAttribute("type","button"),e.classList.add("delete-group-btn","delete-btn","focusable"),e.textContent="DELETE GROUP",t.setAttribute("type","button"),t.classList.add("delete-completed-btn","delete-btn","focusable"),t.textContent="DELETE COMPLETED TASKS",r.defaultGroups.indexOf(r.selectedGroup.textContent)>=0&&(l.style.opacity="0.38",i.setAttribute("disabled","true"),i.style.opacity="0.38",d.setAttribute("disabled","true"),d.style.opacity="0.38",e.setAttribute("disabled","true"),e.style.opacity="0.38"),a.appendChild(d),a.appendChild(e),a.appendChild(t)}n.appendChild(o),n.appendChild(l),n.appendChild(i),n.appendChild(a),t.appendChild(n),r.modalBox.appendChild(t)};r.groupOptionBtn.addEventListener("click",(t=>{e(t),s.onOpen()})),r.addGroupBtn.addEventListener("click",(t=>{e(t),s.onOpen()}))})(),{render:(e,t)=>{const n=document.createElement("form"),o=document.createElement("fieldset"),a=document.createElement("legend"),l=document.createElement("div"),i=document.createElement("label"),d=document.createElement("input"),c=document.createElement("label"),u=document.createElement("select"),m=document.createElement("label"),p=document.createElement("select"),b=document.createElement("option"),h=document.createElement("option"),y=document.createElement("label"),g=document.createElement("input"),f=document.createElement("label"),C=document.createElement("textarea");s.createCloseBtn(),i.setAttribute("for","name-input"),i.textContent="Task Name (required)",d.setAttribute("type","text"),d.setAttribute("id","name-input"),d.setAttribute("placeholder","Enter a task name"),d.setAttribute("required","true"),d.setAttribute("autocomplete","off"),d.className="focusable",c.setAttribute("for","group-select"),c.textContent="Group",u.setAttribute("id","group-select"),u.className="focusable";for(let e=0;e<t.length;e++){const n=document.createElement("option");n.setAttribute("value",t[e]),n.textContent=t[e],u.appendChild(n)}if(m.setAttribute("for","priority-select"),m.textContent="Priority",p.setAttribute("id","priority-select"),p.className="focusable",b.textContent="Normal",h.textContent="Important",p.appendChild(b),p.appendChild(h),y.setAttribute("for","date-select"),y.textContent="Due Date (optional)",g.setAttribute("type","date"),g.setAttribute("id","date-select"),g.className="focusable",f.setAttribute("for","notes-input"),f.textContent="Additional Notes",C.setAttribute("id","notes-input"),C.setAttribute("placeholder","Enter any additional notes for the task"),C.className="focusable",e.target.textContent.includes("ADD TASK")){const e=document.createElement("input"),t=document.createElement("input");a.textContent="Add a Task",e.setAttribute("type","submit"),e.setAttribute("value","ADD ONE"),e.setAttribute("aria-label","Add task and close modal"),e.classList.add("add-single-btn","primary-btn","submit","focusable"),t.setAttribute("type","submit"),t.setAttribute("value","ADD MANY"),t.setAttribute("aria-label","Add task and keep modal open"),t.classList.add("add-many-btn","secondary-btn","submit","focusable"),l.appendChild(e),l.appendChild(t)}else if("EDIT"===e.target.textContent){const e=document.createElement("input");a.textContent="Edit Task",u.setAttribute("disabled","true"),c.style.opacity="0.38",u.style.opacity="0.38",e.setAttribute("type","submit"),e.setAttribute("value","UPDATE"),e.setAttribute("aria-label","Update task and close modal"),e.classList.add("update-task-btn","primary-btn","focusable"),l.appendChild(e)}o.appendChild(a),o.appendChild(i),o.appendChild(d),o.appendChild(c),o.appendChild(document.createElement("br")),o.appendChild(u),o.appendChild(document.createElement("br")),o.appendChild(m),o.appendChild(document.createElement("br")),o.appendChild(p),o.appendChild(document.createElement("br")),o.appendChild(y),o.appendChild(document.createElement("br")),o.appendChild(g),o.appendChild(document.createElement("br")),o.appendChild(f),o.appendChild(C),o.appendChild(l),n.appendChild(o),r.modalBox.appendChild(n)}});console.log(a.list);const c={menuContainer:document.querySelector("#main-nav"),menuOpenButton:document.querySelector(".menu-button"),menuCloseButton:document.querySelector(".menu-close-button")};(()=>{const e=()=>{document.documentElement.scrollWidth>763?(c.menuContainer.style.visibility="visible",c.menuContainer.style.left="0"):(c.menuContainer.style.visibility="hidden",c.menuContainer.style.left="-800px")};window.addEventListener("resize",e),window.addEventListener("load",e);const t=()=>{"hidden"===c.menuContainer.style.visibility?(c.menuContainer.style.visibility="visible",c.menuContainer.style.left="0",c.menuCloseButton.focus()):(c.menuContainer.style.left="-800px",setTimeout((()=>{c.menuContainer.style.visibility="hidden"}),600),c.menuOpenButton.focus())};c.menuOpenButton.addEventListener("click",t),c.menuCloseButton.addEventListener("click",t)})()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,